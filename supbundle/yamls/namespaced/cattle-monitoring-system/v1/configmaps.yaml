apiVersion: v1
items:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      objectset.rio.cattle.io/applied: H4sIAAAAAAAA/4yQu27DMAxFf6XgbKW18zbQKUuBolvRnZYZm41EGRSbogjy74WTDBn6yChc3CPecwAc+I00cxKoYV9CATuWFmrYJNly94IDFBDJsEVDqA+AIsnQOEken6l5J2+ZbKKcJh7NAk043fPI6ClE55OYphBIne9RzSl1nE1PDCh+JaRPIXXdfncBXUX7srh7ZmkfnyjEzQj9lyMYCWpQFN+TupiELSlLd1MzD+jH+jm7arv8lY0iHAvwSqdJrxwpG8YBavkIoYCADYU/ZfWYe6hhu1hWJS6axXTVVO28fWjWTTXbrsrlFNdrnLU0X/pqNh1/u+w5Gx0Vk5j7cd1t9x+/AwAA//+zVwWZCwIAAA
      objectset.rio.cattle.io/id: helm-controller-chart-registration
      objectset.rio.cattle.io/owner-gvk: helm.cattle.io/v1, Kind=HelmChart
      objectset.rio.cattle.io/owner-name: rancher-monitoring
      objectset.rio.cattle.io/owner-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:40Z"
    labels:
      objectset.rio.cattle.io/hash: f6721a6b638b2d5d0b9b24f8173a99a4de57c243
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:objectset.rio.cattle.io/applied: {}
            f:objectset.rio.cattle.io/id: {}
            f:objectset.rio.cattle.io/owner-gvk: {}
            f:objectset.rio.cattle.io/owner-name: {}
            f:objectset.rio.cattle.io/owner-namespace: {}
          f:labels:
            .: {}
            f:objectset.rio.cattle.io/hash: {}
      manager: helm-controller@harvesterdev1
      operation: Update
      time: "2024-08-06T01:56:40Z"
    name: chart-content-rancher-monitoring
    namespace: cattle-monitoring-system
    resourceVersion: "6550"
    uid: 89ddaaf0-7dcb-46e2-ba9a-74ac42a14710
- apiVersion: v1
  data:
    nginx.conf: |-
      worker_processes      auto;
      error_log             /dev/stdout warn;
      pid                   /var/cache/nginx/nginx.pid;

      events {
         worker_connections 1024;
      }

      http {
        include       /etc/nginx/mime.types;
        log_format    main '[$time_local - $status] $remote_addr - $remote_user $request ($http_referer)';

        proxy_connect_timeout       10;
        proxy_read_timeout          180;
        proxy_send_timeout          5;
        proxy_buffering             off;
        proxy_cache_path            /var/cache/nginx/cache levels=1:2 keys_zone=my_zone:100m inactive=1d max_size=10g;

        map $http_upgrade $connection_upgrade {
          default upgrade;
          '' close;
        }

        server {
          listen          8080;
          access_log      off;

          gzip            on;
          gzip_min_length 1k;
          gzip_comp_level 2;
          gzip_types      text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png;
          gzip_vary       on;
          gzip_disable    "MSIE [1-6]\.";

          proxy_set_header Host $host;

          location /api/dashboards {
            proxy_pass     http://localhost:3000;
          }

          location /api/search {
            proxy_pass     http://localhost:3000;

            sub_filter_types application/json;
            sub_filter_once off;
          }

          location /api/live/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $http_host;
            proxy_pass http://localhost:3000;
          }

          location / {
            proxy_cache         my_zone;
            proxy_cache_valid   200 302 1d;
            proxy_cache_valid   301 30d;
            proxy_cache_valid   any 5m;
            proxy_cache_bypass  $http_cache_control;
            add_header          X-Proxy-Cache $upstream_cache_status;
            add_header          Cache-Control "public";

            proxy_pass     http://localhost:3000/;

            sub_filter_once off;

            #sub_filter '"appSubUrl":""' '"appSubUrl":"/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';

            sub_filter '"appSubUrl":""' $final_appSubUrl;

            sub_filter ':"/avatar/' ':"avatar/';

            if ($request_filename ~ .*\.(?:js|css|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$) {
              expires             90d;
            }

            rewrite ^/k8s/clusters/.*/proxy(.*) /$1 break;

          }
        }

        map $http_referer $final_appSubUrl {
          ~.*/k8s/clusters/(c-m-.+)/api/v1/namespaces/cattle-monitoring-system/.*      '"appSubUrl":"/k8s/clusters/$1/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
          ~.*/dashboard/c/(c-m-.+)/.*     '"appSubUrl":"/k8s/clusters/$1/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
          ~.*/dashboard/harvester/c/(c-m-.+)/harvesterhci.io.addon/cattle-monitoring-system/.* '"appSubUrl":"/k8s/clusters/$1/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
          ~.*/dashboard/harvester/c/(c-m-.+)/kubevirt.io.virtualmachine/.*/.* '"appSubUrl":"/k8s/clusters/$1/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
          ~.*/dashboard/harvester/c/(c-m-.+)/.*      '"appSubUrl":"/k8s/clusters/$1/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
          ~.*/api/v1/namespaces/cattle-monitoring-system/.*    '"appSubUrl":"/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
          default '"appSubUrl":"/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy"';
        }

      }
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 9.1.5
      helm.sh/chart: grafana-6.59.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:nginx.conf: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: grafana-nginx-proxy-config
    namespace: cattle-monitoring-system
    resourceVersion: "7575"
    uid: 8ffe4e01-2152-44d0-be37-8cf2e301d587
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIBeTCCAR+gAwIBAgIBADAKBggqhkjOPQQDAjAkMSIwIAYDVQQDDBlya2UyLXNl
      cnZlci1jYUAxNzIyOTA5MDgwMB4XDTI0MDgwNjAxNTEyMFoXDTM0MDgwNDAxNTEy
      MFowJDEiMCAGA1UEAwwZcmtlMi1zZXJ2ZXItY2FAMTcyMjkwOTA4MDBZMBMGByqG
      SM49AgEGCCqGSM49AwEHA0IABEVIknm4Aj01WZVAC6VMFNVbO8v1ccUnvCgKi6+p
      L6BwKjjhJHscdm0sXEfbKmzVzYGI8PREFO7+HJ7vhOlZXBmjQjBAMA4GA1UdDwEB
      /wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQ/mkvosSegv9Rg/1sb
      oX/NIEfYNDAKBggqhkjOPQQDAgNIADBFAiB11MuBH4WWBtvzoEkHidHZeDQokcxK
      wpTPtiVvDepgcgIhAKh3lx5DDJ2W/shLxKqDJRv9YzruvDsyJ9QLcM37IHpp
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-08-06T01:53:30Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/description: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:53:30Z"
    name: kube-root-ca.crt
    namespace: cattle-monitoring-system
    resourceVersion: "2311"
    uid: e0e2752c-491a-4a3f-b9b8-7af214184d44
- apiVersion: v1
  data:
    nginx.conf: "worker_processes      auto;\nerror_log             /dev/stdout warn;\npid
      \                  /var/cache/nginx/nginx.pid;\n\nevents {\n   worker_connections
      1024;\n}\n\nhttp {\n  include       /etc/nginx/mime.types;\n  log_format    main
      '[$time_local - $status] $remote_addr - $remote_user $request ($http_referer)';\n\n
      \ proxy_connect_timeout       10;\n  proxy_read_timeout          180;\n  proxy_send_timeout
      \         5;\n  proxy_buffering             off;\n  proxy_cache_path            /var/cache/nginx/cache
      levels=1:2 keys_zone=my_zone:100m inactive=1d max_size=10g;\n\n  server {\n
      \   listen          8081;\n    access_log      off;\n\n    gzip            on;\n
      \   gzip_min_length 1k;\n    gzip_comp_level 2;\n    gzip_types      text/plain
      application/javascript application/x-javascript text/css application/xml text/javascript
      image/jpeg image/gif image/png;\n    gzip_vary       on;\n    gzip_disable    \"MSIE
      [1-6]\\.\";\n\n    proxy_set_header Host $host;\n\n    location / {\n      proxy_cache
      \        my_zone;\n      proxy_cache_valid   200 302 1d;\n      proxy_cache_valid
      \  301 30d;\n      proxy_cache_valid   any 5m;\n      proxy_cache_bypass  $http_cache_control;\n
      \     add_header          X-Proxy-Cache $upstream_cache_status;\n      add_header
      \         Cache-Control \"public\";\n      \n      proxy_pass     http://localhost:9090/;\n\n
      \     sub_filter_once off;\n      sub_filter          'var PATH_PREFIX = \"\";'
      'var PATH_PREFIX = \".\";';\n\n      if ($request_filename ~ .*\\.(?:js|css|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$)
      {\n        expires             90d;\n      }\n\n      rewrite ^/k8s/clusters/.*/proxy(.*)
      /$1 break;\n\n    }\n  }\n}"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app: rancher-monitoring-prometheus
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: rancher-monitoring
      app.kubernetes.io/version: 103.0.3_up45.31.1
      chart: rancher-monitoring-103.0.3_up45.31.1
      heritage: Helm
      release: rancher-monitoring
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:nginx.conf: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:chart: {}
            f:heritage: {}
            f:release: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: prometheus-nginx-proxy-config
    namespace: cattle-monitoring-system
    resourceVersion: "7605"
    uid: 82586454-d7b7-428f-9f78-1f451a606807
- apiVersion: v1
  data:
    cattle-monitoring-system-rancher-monitoring-alertmanager.rules-965c5c7d-6579-4e7a-b54b-e3ddd0669ece.yaml: |
      groups:
      - name: alertmanager.rules
        rules:
        - alert: AlertmanagerFailedReload
          annotations:
            description: Configuration has failed to load for {{ $labels.namespace }}/{{
              $labels.pod}}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerfailedreload
            summary: Reloading an Alertmanager configuration has failed.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            max_over_time(alertmanager_config_last_reload_successful{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[5m]) == 0
          for: 10m
          labels:
            severity: critical
        - alert: AlertmanagerMembersInconsistent
          annotations:
            description: Alertmanager {{ $labels.namespace }}/{{ $labels.pod}} has only
              found {{ $value }} members of the {{$labels.job}} cluster.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagermembersinconsistent
            summary: A member of an Alertmanager cluster has not found all other cluster
              members.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
              max_over_time(alertmanager_cluster_members{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[5m])
            < on (namespace,service) group_left
              count by (namespace,service) (max_over_time(alertmanager_cluster_members{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[5m]))
          for: 15m
          labels:
            severity: critical
        - alert: AlertmanagerFailedToSendAlerts
          annotations:
            description: Alertmanager {{ $labels.namespace }}/{{ $labels.pod}} failed to
              send {{ $value | humanizePercentage }} of notifications to {{ $labels.integration
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerfailedtosendalerts
            summary: An Alertmanager instance failed to send notifications.
          expr: |-
            (
              rate(alertmanager_notifications_failed_total{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[5m])
            /
              rate(alertmanager_notifications_total{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[5m])
            )
            > 0.01
          for: 5m
          labels:
            severity: warning
        - alert: AlertmanagerClusterFailedToSendAlerts
          annotations:
            description: The minimum notification failure rate to {{ $labels.integration
              }} sent from any instance in the {{$labels.job}} cluster is {{ $value | humanizePercentage
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclusterfailedtosendalerts
            summary: All Alertmanager instances in a cluster failed to send notifications
              to a critical integration.
          expr: |-
            min by (namespace,service, integration) (
              rate(alertmanager_notifications_failed_total{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system", integration=~`.*`}[5m])
            /
              rate(alertmanager_notifications_total{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system", integration=~`.*`}[5m])
            )
            > 0.01
          for: 5m
          labels:
            severity: critical
        - alert: AlertmanagerClusterFailedToSendAlerts
          annotations:
            description: The minimum notification failure rate to {{ $labels.integration
              }} sent from any instance in the {{$labels.job}} cluster is {{ $value | humanizePercentage
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclusterfailedtosendalerts
            summary: All Alertmanager instances in a cluster failed to send notifications
              to a non-critical integration.
          expr: |-
            min by (namespace,service, integration) (
              rate(alertmanager_notifications_failed_total{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system", integration!~`.*`}[5m])
            /
              rate(alertmanager_notifications_total{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system", integration!~`.*`}[5m])
            )
            > 0.01
          for: 5m
          labels:
            severity: warning
        - alert: AlertmanagerConfigInconsistent
          annotations:
            description: Alertmanager instances within the {{$labels.job}} cluster have
              different configurations.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerconfiginconsistent
            summary: Alertmanager instances within the same cluster have different configurations.
          expr: |-
            count by (namespace,service) (
              count_values by (namespace,service) ("config_hash", alertmanager_config_hash{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"})
            )
            != 1
          for: 20m
          labels:
            severity: critical
        - alert: AlertmanagerClusterDown
          annotations:
            description: '{{ $value | humanizePercentage }} of Alertmanager instances within
              the {{$labels.job}} cluster have been up for less than half of the last 5m.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclusterdown
            summary: Half or more of the Alertmanager instances within the same cluster
              are down.
          expr: |-
            (
              count by (namespace,service) (
                avg_over_time(up{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[5m]) < 0.5
              )
            /
              count by (namespace,service) (
                up{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}
              )
            )
            >= 0.5
          for: 5m
          labels:
            severity: critical
        - alert: AlertmanagerClusterCrashlooping
          annotations:
            description: '{{ $value | humanizePercentage }} of Alertmanager instances within
              the {{$labels.job}} cluster have restarted at least 5 times in the last 10m.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/alertmanager/alertmanagerclustercrashlooping
            summary: Half or more of the Alertmanager instances within the same cluster
              are crashlooping.
          expr: |-
            (
              count by (namespace,service) (
                changes(process_start_time_seconds{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}[10m]) > 4
              )
            /
              count by (namespace,service) (
                up{job="rancher-monitoring-alertmanager",namespace="cattle-monitoring-system"}
              )
            )
            >= 0.5
          for: 5m
          labels:
            severity: critical
    cattle-monitoring-system-rancher-monitoring-config-reloaders-b91ec321-26b4-4c38-abbf-e0e99a7c11c9.yaml: |
      groups:
      - name: config-reloaders
        rules:
        - alert: ConfigReloaderSidecarErrors
          annotations:
            description: |-
              Errors encountered while the {{$labels.pod}} config-reloader sidecar attempts to sync config in {{$labels.namespace}} namespace.
              As a result, configuration for service running in {{$labels.pod}} may be stale and cannot be updated anymore.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/configreloadersidecarerrors
            summary: config-reloader sidecar has not had a successful reload for 10m
          expr: max_over_time(reloader_last_reload_successful{namespace=~".+"}[5m]) == 0
          for: 10m
          labels:
            severity: warning
    cattle-monitoring-system-rancher-monitoring-general.rules-9d5d6b8f-60c1-4f7d-83ae-75c6a93cde1f.yaml: |
      groups:
      - name: general.rules
        rules:
        - alert: TargetDown
          annotations:
            description: '{{ printf "%.4g" $value }}% of the {{ $labels.job }}/{{ $labels.service
              }} targets in {{ $labels.namespace }} namespace are down.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/targetdown
            summary: One or more targets are unreachable.
          expr: 100 * (count(up == 0) BY (job, namespace, service) / count(up) BY (job,
            namespace, service)) > 10
          for: 10m
          labels:
            severity: warning
        - alert: Watchdog
          annotations:
            description: |
              This is an alert meant to ensure that the entire alerting pipeline is functional.
              This alert is always firing, therefore it should always be firing in Alertmanager
              and always fire against a receiver. There are integrations with various notification
              mechanisms that send a notification when this alert is not firing. For example the
              "DeadMansSnitch" integration in PagerDuty.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/watchdog
            summary: An alert that should always be firing to certify that Alertmanager
              is working properly.
          expr: vector(1)
          labels:
            severity: none
        - alert: InfoInhibitor
          annotations:
            description: |
              This is an alert that is used to inhibit info alerts.
              By themselves, the info-level alerts are sometimes very noisy, but they are relevant when combined with
              other alerts.
              This alert fires whenever there's a severity="info" alert, and stops firing when another alert with a
              severity of 'warning' or 'critical' starts firing on the same namespace.
              This alert should be routed to a null receiver and configured to inhibit alerts with severity="info".
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/infoinhibitor
            summary: Info-level alert inhibition.
          expr: ALERTS{severity = "info"} == 1 unless on(namespace) ALERTS{alertname !=
            "InfoInhibitor", severity =~ "warning|critical", alertstate="firing"} == 1
          labels:
            severity: none
    cattle-monitoring-system-rancher-monitoring-k8s.rules-d2a73a80-b03f-4b94-8e38-f413a0eccb38.yaml: |
      groups:
      - name: k8s.rules
        rules:
        - expr: |-
            sum by (cluster, namespace, pod, container) (
              irate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}[5m])
            ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
              1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
        - expr: |-
            container_memory_working_set_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1,
              max by(cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_working_set_bytes
        - expr: |-
            container_memory_rss{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1,
              max by(cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_rss
        - expr: |-
            container_memory_cache{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1,
              max by(cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_cache
        - expr: |-
            container_memory_swap{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (cluster, namespace, pod) group_left(node) topk by(cluster, namespace, pod) (1,
              max by(cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: node_namespace_pod_container:container_memory_swap
        - expr: |-
            kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
              (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
            )
          record: cluster:namespace:pod_memory:active:kube_pod_container_resource_requests
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"}
                    ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_memory:kube_pod_container_resource_requests:sum
        - expr: |-
            kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
              (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
            )
          record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"}
                    ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_cpu:kube_pod_container_resource_requests:sum
        - expr: |-
            kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
              (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
            )
          record: cluster:namespace:pod_memory:active:kube_pod_container_resource_limits
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"}
                    ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_memory:kube_pod_container_resource_limits:sum
        - expr: |-
            kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"}  * on (namespace, pod, cluster)
            group_left() max by (namespace, pod, cluster) (
             (kube_pod_status_phase{phase=~"Pending|Running"} == 1)
             )
          record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits
        - expr: |-
            sum by (namespace, cluster) (
                sum by (namespace, pod, cluster) (
                    max by (namespace, pod, container, cluster) (
                      kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"}
                    ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace_cpu:kube_pod_container_resource_limits:sum
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"},
                  "replicaset", "$1", "owner_name", "(.*)"
                ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (
                  1, max by (replicaset, namespace, owner_name) (
                    kube_replicaset_owner{job="kube-state-metrics"}
                  )
                ),
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: deployment
          record: namespace_workload_pod:kube_pod_owner:relabel
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet"},
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: daemonset
          record: namespace_workload_pod:kube_pod_owner:relabel
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet"},
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: statefulset
          record: namespace_workload_pod:kube_pod_owner:relabel
        - expr: |-
            max by (cluster, namespace, workload, pod) (
              label_replace(
                kube_pod_owner{job="kube-state-metrics", owner_kind="Job"},
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: job
          record: namespace_workload_pod:kube_pod_owner:relabel
    cattle-monitoring-system-rancher-monitoring-kube-apiserver-availability.rules-f6419d92-db04-4b4a-bd83-d7b5f0fc44be.yaml: |
      groups:
      - interval: 3m
        name: kube-apiserver-availability.rules
        rules:
        - expr: avg_over_time(code_verb:apiserver_request_total:increase1h[30d]) * 24 *
            30
          record: code_verb:apiserver_request_total:increase30d
        - expr: sum by (cluster, code) (code_verb:apiserver_request_total:increase30d{verb=~"LIST|GET"})
          labels:
            verb: read
          record: code:apiserver_request_total:increase30d
        - expr: sum by (cluster, code) (code_verb:apiserver_request_total:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
          labels:
            verb: write
          record: code:apiserver_request_total:increase30d
        - expr: sum by (cluster, verb, scope) (increase(apiserver_request_slo_duration_seconds_count[1h]))
          record: cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase1h
        - expr: sum by (cluster, verb, scope) (avg_over_time(cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase1h[30d])
            * 24 * 30)
          record: cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase30d
        - expr: sum by (cluster, verb, scope, le) (increase(apiserver_request_slo_duration_seconds_bucket[1h]))
          record: cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase1h
        - expr: sum by (cluster, verb, scope, le) (avg_over_time(cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase1h[30d])
            * 24 * 30)
          record: cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d
        - expr: |-
            1 - (
              (
                # write too slow
                sum by (cluster) (cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
                -
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"POST|PUT|PATCH|DELETE",le="1"})
              ) +
              (
                # read too slow
                sum by (cluster) (cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase30d{verb=~"LIST|GET"})
                -
                (
                  (
                    sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope=~"resource|",le="1"})
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="namespace",le="5"})
                  +
                  sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="cluster",le="30"})
                )
              ) +
              # errors
              sum by (cluster) (code:apiserver_request_total:increase30d{code=~"5.."} or vector(0))
            )
            /
            sum by (cluster) (code:apiserver_request_total:increase30d)
          labels:
            verb: all
          record: apiserver_request:availability30d
        - expr: |-
            1 - (
              sum by (cluster) (cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase30d{verb=~"LIST|GET"})
              -
              (
                # too slow
                (
                  sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope=~"resource|",le="1"})
                  or
                  vector(0)
                )
                +
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="namespace",le="5"})
                +
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"LIST|GET",scope="cluster",le="30"})
              )
              +
              # errors
              sum by (cluster) (code:apiserver_request_total:increase30d{verb="read",code=~"5.."} or vector(0))
            )
            /
            sum by (cluster) (code:apiserver_request_total:increase30d{verb="read"})
          labels:
            verb: read
          record: apiserver_request:availability30d
        - expr: |-
            1 - (
              (
                # too slow
                sum by (cluster) (cluster_verb_scope:apiserver_request_slo_duration_seconds_count:increase30d{verb=~"POST|PUT|PATCH|DELETE"})
                -
                sum by (cluster) (cluster_verb_scope_le:apiserver_request_slo_duration_seconds_bucket:increase30d{verb=~"POST|PUT|PATCH|DELETE",le="1"})
              )
              +
              # errors
              sum by (cluster) (code:apiserver_request_total:increase30d{verb="write",code=~"5.."} or vector(0))
            )
            /
            sum by (cluster) (code:apiserver_request_total:increase30d{verb="write"})
          labels:
            verb: write
          record: apiserver_request:availability30d
        - expr: sum by (cluster,code,resource) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[5m]))
          labels:
            verb: read
          record: code_resource:apiserver_request_total:rate5m
        - expr: sum by (cluster,code,resource) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[5m]))
          labels:
            verb: write
          record: code_resource:apiserver_request_total:rate5m
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"2.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"3.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"4.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
        - expr: sum by (cluster, code, verb) (increase(apiserver_request_total{job="apiserver",verb=~"LIST|GET|POST|PUT|PATCH|DELETE",code=~"5.."}[1h]))
          record: code_verb:apiserver_request_total:increase1h
    cattle-monitoring-system-rancher-monitoring-kube-apiserver-burnrate.rules-af2db6c7-2d1c-4f76-97d4-97724eed3ea8.yaml: |
      groups:
      - name: kube-apiserver-burnrate.rules
        rules:
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[1d]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[1d]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[1d]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[1d]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[1d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[1d]))
          labels:
            verb: read
          record: apiserver_request:burnrate1d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[1h]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[1h]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[1h]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[1h]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[1h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[1h]))
          labels:
            verb: read
          record: apiserver_request:burnrate1h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[2h]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[2h]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[2h]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[2h]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[2h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[2h]))
          labels:
            verb: read
          record: apiserver_request:burnrate2h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[30m]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[30m]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[30m]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[30m]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[30m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[30m]))
          labels:
            verb: read
          record: apiserver_request:burnrate30m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[3d]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[3d]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[3d]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[3d]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[3d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[3d]))
          labels:
            verb: read
          record: apiserver_request:burnrate3d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[5m]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[5m]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[5m]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[5m]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[5m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[5m]))
          labels:
            verb: read
          record: apiserver_request:burnrate5m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[6h]))
                -
                (
                  (
                    sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope=~"resource|",le="1"}[6h]))
                    or
                    vector(0)
                  )
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="namespace",le="5"}[6h]))
                  +
                  sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward",scope="cluster",le="30"}[6h]))
                )
              )
              +
              # errors
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET",code=~"5.."}[6h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"LIST|GET"}[6h]))
          labels:
            verb: read
          record: apiserver_request:burnrate6h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[1d]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[1d]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[1d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[1d]))
          labels:
            verb: write
          record: apiserver_request:burnrate1d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[1h]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[1h]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[1h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[1h]))
          labels:
            verb: write
          record: apiserver_request:burnrate1h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[2h]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[2h]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[2h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[2h]))
          labels:
            verb: write
          record: apiserver_request:burnrate2h
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[30m]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[30m]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[30m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[30m]))
          labels:
            verb: write
          record: apiserver_request:burnrate30m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[3d]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[3d]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[3d]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[3d]))
          labels:
            verb: write
          record: apiserver_request:burnrate3d
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[5m]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[5m]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[5m]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[5m]))
          labels:
            verb: write
          record: apiserver_request:burnrate5m
        - expr: |-
            (
              (
                # too slow
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_count{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[6h]))
                -
                sum by (cluster) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward",le="1"}[6h]))
              )
              +
              sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",code=~"5.."}[6h]))
            )
            /
            sum by (cluster) (rate(apiserver_request_total{job="apiserver",verb=~"POST|PUT|PATCH|DELETE"}[6h]))
          labels:
            verb: write
          record: apiserver_request:burnrate6h
    cattle-monitoring-system-rancher-monitoring-kube-apiserver-histogram.rules-0112930d-9e54-45e3-b9d4-ef3914cb5081.yaml: |
      groups:
      - name: kube-apiserver-histogram.rules
        rules:
        - expr: histogram_quantile(0.99, sum by (cluster, le, resource) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"LIST|GET",subresource!~"proxy|attach|log|exec|portforward"}[5m])))
            > 0
          labels:
            quantile: "0.99"
            verb: read
          record: cluster_quantile:apiserver_request_slo_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.99, sum by (cluster, le, resource) (rate(apiserver_request_slo_duration_seconds_bucket{job="apiserver",verb=~"POST|PUT|PATCH|DELETE",subresource!~"proxy|attach|log|exec|portforward"}[5m])))
            > 0
          labels:
            quantile: "0.99"
            verb: write
          record: cluster_quantile:apiserver_request_slo_duration_seconds:histogram_quantile
    cattle-monitoring-system-rancher-monitoring-kube-apiserver-slos-52ed3618-2034-45f4-b470-fabd4ad7cfda.yaml: |
      groups:
      - name: kube-apiserver-slos
        rules:
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum(apiserver_request:burnrate1h) > (14.40 * 0.01000)
            and
            sum(apiserver_request:burnrate5m) > (14.40 * 0.01000)
          for: 2m
          labels:
            long: 1h
            severity: critical
            short: 5m
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum(apiserver_request:burnrate6h) > (6.00 * 0.01000)
            and
            sum(apiserver_request:burnrate30m) > (6.00 * 0.01000)
          for: 15m
          labels:
            long: 6h
            severity: critical
            short: 30m
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum(apiserver_request:burnrate1d) > (3.00 * 0.01000)
            and
            sum(apiserver_request:burnrate2h) > (3.00 * 0.01000)
          for: 1h
          labels:
            long: 1d
            severity: warning
            short: 2h
        - alert: KubeAPIErrorBudgetBurn
          annotations:
            description: The API server is burning too much error budget.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapierrorbudgetburn
            summary: The API server is burning too much error budget.
          expr: |-
            sum(apiserver_request:burnrate3d) > (1.00 * 0.01000)
            and
            sum(apiserver_request:burnrate6h) > (1.00 * 0.01000)
          for: 3h
          labels:
            long: 3d
            severity: warning
            short: 6h
    cattle-monitoring-system-rancher-monitoring-kube-prometheus-general.rules-bfc88cb3-815e-4817-ba19-3cc7dc6181d4.yaml: |
      groups:
      - name: kube-prometheus-general.rules
        rules:
        - expr: count without(instance, pod, node) (up == 1)
          record: count:up1
        - expr: count without(instance, pod, node) (up == 0)
          record: count:up0
    cattle-monitoring-system-rancher-monitoring-kube-prometheus-node-recording.rules-3e6655c9-ed17-406b-80f5-cb61b38de6a9.yaml: |
      groups:
      - name: kube-prometheus-node-recording.rules
        rules:
        - expr: sum(rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal"}[3m]))
            BY (instance)
          record: instance:node_cpu:rate:sum
        - expr: sum(rate(node_network_receive_bytes_total[3m])) BY (instance)
          record: instance:node_network_receive_bytes:rate:sum
        - expr: sum(rate(node_network_transmit_bytes_total[3m])) BY (instance)
          record: instance:node_network_transmit_bytes:rate:sum
        - expr: sum(rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal"}[5m]))
            WITHOUT (cpu, mode) / ON(instance) GROUP_LEFT() count(sum(node_cpu_seconds_total)
            BY (instance, cpu)) BY (instance)
          record: instance:node_cpu:ratio
        - expr: sum(rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal"}[5m]))
          record: cluster:node_cpu:sum_rate5m
        - expr: cluster:node_cpu:sum_rate5m / count(sum(node_cpu_seconds_total) BY (instance,
            cpu))
          record: cluster:node_cpu:ratio
    cattle-monitoring-system-rancher-monitoring-kube-state-metrics-d842120f-30fe-422b-90cf-4b973401b96d.yaml: |
      groups:
      - name: kube-state-metrics
        rules:
        - alert: KubeStateMetricsListErrors
          annotations:
            description: kube-state-metrics is experiencing errors at an elevated rate in
              list operations. This is likely causing it to not be able to expose metrics
              about Kubernetes objects correctly or at all.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricslisterrors
            summary: kube-state-metrics is experiencing errors in list operations.
          expr: |-
            (sum(rate(kube_state_metrics_list_total{job="kube-state-metrics",result="error"}[5m])) by (cluster)
              /
            sum(rate(kube_state_metrics_list_total{job="kube-state-metrics"}[5m])) by (cluster))
            > 0.01
          for: 15m
          labels:
            severity: critical
        - alert: KubeStateMetricsWatchErrors
          annotations:
            description: kube-state-metrics is experiencing errors at an elevated rate in
              watch operations. This is likely causing it to not be able to expose metrics
              about Kubernetes objects correctly or at all.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricswatcherrors
            summary: kube-state-metrics is experiencing errors in watch operations.
          expr: |-
            (sum(rate(kube_state_metrics_watch_total{job="kube-state-metrics",result="error"}[5m])) by (cluster)
              /
            sum(rate(kube_state_metrics_watch_total{job="kube-state-metrics"}[5m])) by (cluster))
            > 0.01
          for: 15m
          labels:
            severity: critical
        - alert: KubeStateMetricsShardingMismatch
          annotations:
            description: kube-state-metrics pods are running with different --total-shards
              configuration, some Kubernetes objects may be exposed multiple times or not
              exposed at all.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricsshardingmismatch
            summary: kube-state-metrics sharding is misconfigured.
          expr: stdvar (kube_state_metrics_total_shards{job="kube-state-metrics"}) by (cluster)
            != 0
          for: 15m
          labels:
            severity: critical
        - alert: KubeStateMetricsShardsMissing
          annotations:
            description: kube-state-metrics shards are missing, some Kubernetes objects
              are not being exposed.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kube-state-metrics/kubestatemetricsshardsmissing
            summary: kube-state-metrics shards are missing.
          expr: |-
            2^max(kube_state_metrics_total_shards{job="kube-state-metrics"}) by (cluster) - 1
              -
            sum( 2 ^ max by (cluster, shard_ordinal) (kube_state_metrics_shard_ordinal{job="kube-state-metrics"}) ) by (cluster)
            != 0
          for: 15m
          labels:
            severity: critical
    cattle-monitoring-system-rancher-monitoring-kubelet.rules-91aea60d-5bc2-4c0e-821c-22d9040186f0.yaml: |
      groups:
      - name: kubelet.rules
        rules:
        - expr: histogram_quantile(0.99, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le) * on(cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"})
          labels:
            quantile: "0.99"
          record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.9, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le) * on(cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"})
          labels:
            quantile: "0.9"
          record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
        - expr: histogram_quantile(0.5, sum(rate(kubelet_pleg_relist_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le) * on(cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"})
          labels:
            quantile: "0.5"
          record: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile
    cattle-monitoring-system-rancher-monitoring-kubernetes-apps-08d7d1be-8744-4cf5-8f0a-33b0cdfb5d0c.yaml: |
      groups:
      - name: kubernetes-apps
        rules:
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepodcrashlooping
            summary: Pod is crash looping.
          expr: max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff",
            job="kube-state-metrics", namespace=~".*"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepodnotready
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |-
            sum by (namespace, pod, cluster) (
              max by(namespace, pod, cluster) (
                kube_pod_status_phase{job="kube-state-metrics", namespace=~".*", phase=~"Pending|Unknown|Failed"}
              ) * on(namespace, pod, cluster) group_left(owner_kind) topk by(namespace, pod, cluster) (
                1, max by(namespace, pod, owner_kind, cluster) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeDeploymentGenerationMismatch
          annotations:
            description: Deployment generation for {{ $labels.namespace }}/{{ $labels.deployment
              }} does not match, this indicates that the Deployment has failed but has not
              been rolled back.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedeploymentgenerationmismatch
            summary: Deployment generation mismatch due to possible roll-back
          expr: |-
            kube_deployment_status_observed_generation{job="kube-state-metrics", namespace=~".*"}
              !=
            kube_deployment_metadata_generation{job="kube-state-metrics", namespace=~".*"}
          for: 15m
          labels:
            severity: warning
        - alert: KubeDeploymentReplicasMismatch
          annotations:
            description: Deployment {{ $labels.namespace }}/{{ $labels.deployment }} has
              not matched the expected number of replicas for longer than 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedeploymentreplicasmismatch
            summary: Deployment has not matched the expected number of replicas.
          expr: |-
            (
              kube_deployment_spec_replicas{job="kube-state-metrics", namespace=~".*"}
                >
              kube_deployment_status_replicas_available{job="kube-state-metrics", namespace=~".*"}
            ) and (
              changes(kube_deployment_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}[10m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeStatefulSetReplicasMismatch
          annotations:
            description: StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} has
              not matched the expected number of replicas for longer than 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubestatefulsetreplicasmismatch
            summary: Deployment has not matched the expected number of replicas.
          expr: |-
            (
              kube_statefulset_status_replicas_ready{job="kube-state-metrics", namespace=~".*"}
                !=
              kube_statefulset_status_replicas{job="kube-state-metrics", namespace=~".*"}
            ) and (
              changes(kube_statefulset_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}[10m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeStatefulSetGenerationMismatch
          annotations:
            description: StatefulSet generation for {{ $labels.namespace }}/{{ $labels.statefulset
              }} does not match, this indicates that the StatefulSet has failed but has
              not been rolled back.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubestatefulsetgenerationmismatch
            summary: StatefulSet generation mismatch due to possible roll-back
          expr: |-
            kube_statefulset_status_observed_generation{job="kube-state-metrics", namespace=~".*"}
              !=
            kube_statefulset_metadata_generation{job="kube-state-metrics", namespace=~".*"}
          for: 15m
          labels:
            severity: warning
        - alert: KubeStatefulSetUpdateNotRolledOut
          annotations:
            description: StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} update
              has not been rolled out.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubestatefulsetupdatenotrolledout
            summary: StatefulSet update has not been rolled out.
          expr: |-
            (
              max without (revision) (
                kube_statefulset_status_current_revision{job="kube-state-metrics", namespace=~".*"}
                  unless
                kube_statefulset_status_update_revision{job="kube-state-metrics", namespace=~".*"}
              )
                *
              (
                kube_statefulset_replicas{job="kube-state-metrics", namespace=~".*"}
                  !=
                kube_statefulset_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}
              )
            )  and (
              changes(kube_statefulset_status_replicas_updated{job="kube-state-metrics", namespace=~".*"}[5m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeDaemonSetRolloutStuck
          annotations:
            description: DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset }} has not
              finished or progressed for at least 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedaemonsetrolloutstuck
            summary: DaemonSet rollout is stuck.
          expr: |-
            (
              (
                kube_daemonset_status_current_number_scheduled{job="kube-state-metrics", namespace=~".*"}
                 !=
                kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              ) or (
                kube_daemonset_status_number_misscheduled{job="kube-state-metrics", namespace=~".*"}
                 !=
                0
              ) or (
                kube_daemonset_status_updated_number_scheduled{job="kube-state-metrics", namespace=~".*"}
                 !=
                kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              ) or (
                kube_daemonset_status_number_available{job="kube-state-metrics", namespace=~".*"}
                 !=
                kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              )
            ) and (
              changes(kube_daemonset_status_updated_number_scheduled{job="kube-state-metrics", namespace=~".*"}[5m])
                ==
              0
            )
          for: 15m
          labels:
            severity: warning
        - alert: KubeContainerWaiting
          annotations:
            description: pod/{{ $labels.pod }} in namespace {{ $labels.namespace }} on container
              {{ $labels.container}} has been in waiting state for longer than 1 hour.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecontainerwaiting
            summary: Pod container waiting longer than 1 hour
          expr: sum by (namespace, pod, container, cluster) (kube_pod_container_status_waiting_reason{job="kube-state-metrics",
            namespace=~".*"}) > 0
          for: 1h
          labels:
            severity: warning
        - alert: KubeDaemonSetNotScheduled
          annotations:
            description: '{{ $value }} Pods of DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset
              }} are not scheduled.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedaemonsetnotscheduled
            summary: DaemonSet pods are not scheduled.
          expr: |-
            kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics", namespace=~".*"}
              -
            kube_daemonset_status_current_number_scheduled{job="kube-state-metrics", namespace=~".*"} > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeDaemonSetMisScheduled
          annotations:
            description: '{{ $value }} Pods of DaemonSet {{ $labels.namespace }}/{{ $labels.daemonset
              }} are running where they are not supposed to run.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubedaemonsetmisscheduled
            summary: DaemonSet pods are misscheduled.
          expr: kube_daemonset_status_number_misscheduled{job="kube-state-metrics", namespace=~".*"}
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeJobNotCompleted
          annotations:
            description: Job {{ $labels.namespace }}/{{ $labels.job_name }} is taking more
              than {{ "43200" | humanizeDuration }} to complete.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubejobnotcompleted
            summary: Job did not complete in time
          expr: |-
            time() - max by(namespace, job_name, cluster) (kube_job_status_start_time{job="kube-state-metrics", namespace=~".*"}
              and
            kube_job_status_active{job="kube-state-metrics", namespace=~".*"} > 0) > 43200
          labels:
            severity: warning
        - alert: KubeJobFailed
          annotations:
            description: Job {{ $labels.namespace }}/{{ $labels.job_name }} failed to complete.
              Removing failed job after investigation should clear this alert.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubejobfailed
            summary: Job failed to complete.
          expr: kube_job_failed{job="kube-state-metrics", namespace=~".*"}  > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeHpaReplicasMismatch
          annotations:
            description: HPA {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler  }}
              has not matched the desired number of replicas for longer than 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubehpareplicasmismatch
            summary: HPA has not matched desired number of replicas.
          expr: |-
            (kube_horizontalpodautoscaler_status_desired_replicas{job="kube-state-metrics", namespace=~".*"}
              !=
            kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"})
              and
            (kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}
              >
            kube_horizontalpodautoscaler_spec_min_replicas{job="kube-state-metrics", namespace=~".*"})
              and
            (kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}
              <
            kube_horizontalpodautoscaler_spec_max_replicas{job="kube-state-metrics", namespace=~".*"})
              and
            changes(kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}[15m]) == 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeHpaMaxedOut
          annotations:
            description: HPA {{ $labels.namespace }}/{{ $labels.horizontalpodautoscaler  }}
              has been running at max replicas for longer than 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubehpamaxedout
            summary: HPA is running at max replicas
          expr: |-
            kube_horizontalpodautoscaler_status_current_replicas{job="kube-state-metrics", namespace=~".*"}
              ==
            kube_horizontalpodautoscaler_spec_max_replicas{job="kube-state-metrics", namespace=~".*"}
          for: 15m
          labels:
            severity: warning
    cattle-monitoring-system-rancher-monitoring-kubernetes-resources-0678fd1e-3beb-4224-9050-a0f911c37e0e.yaml: |
      groups:
      - name: kubernetes-resources
        rules:
        - alert: KubeCPUOvercommit
          annotations:
            description: Cluster has overcommitted CPU resource requests for Pods by {{
              $value }} CPU shares and cannot tolerate node failure.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuovercommit
            summary: Cluster has overcommitted CPU resource requests.
          expr: |-
            sum(namespace_cpu:kube_pod_container_resource_requests:sum{}) - (sum(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"}) - max(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"})) > 0
            and
            (sum(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"}) - max(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"})) > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeMemoryOvercommit
          annotations:
            description: Cluster has overcommitted memory resource requests for Pods by
              {{ $value | humanize }} bytes and cannot tolerate node failure.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryovercommit
            summary: Cluster has overcommitted memory resource requests.
          expr: |-
            sum(namespace_memory:kube_pod_container_resource_requests:sum{}) - (sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) - max(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"})) > 0
            and
            (sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) - max(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"})) > 0
          for: 10m
          labels:
            severity: warning
        - alert: KubeCPUQuotaOvercommit
          annotations:
            description: Cluster has overcommitted CPU resource requests for Namespaces.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuquotaovercommit
            summary: Cluster has overcommitted CPU resource requests.
          expr: |-
            sum(min without(resource) (kube_resourcequota{job="kube-state-metrics", type="hard", resource=~"(cpu|requests.cpu)"}))
              /
            sum(kube_node_status_allocatable{resource="cpu", job="kube-state-metrics"})
              > 1.5
          for: 5m
          labels:
            severity: warning
        - alert: KubeMemoryQuotaOvercommit
          annotations:
            description: Cluster has overcommitted memory resource requests for Namespaces.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryquotaovercommit
            summary: Cluster has overcommitted memory resource requests.
          expr: |-
            sum(min without(resource) (kube_resourcequota{job="kube-state-metrics", type="hard", resource=~"(memory|requests.memory)"}))
              /
            sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"})
              > 1.5
          for: 5m
          labels:
            severity: warning
        - alert: KubeQuotaAlmostFull
          annotations:
            description: Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage
              }} of its {{ $labels.resource }} quota.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaalmostfull
            summary: Namespace quota is going to be full.
          expr: |-
            kube_resourcequota{job="kube-state-metrics", type="used"}
              / ignoring(instance, job, type)
            (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
              > 0.9 < 1
          for: 15m
          labels:
            severity: info
        - alert: KubeQuotaFullyUsed
          annotations:
            description: Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage
              }} of its {{ $labels.resource }} quota.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotafullyused
            summary: Namespace quota is fully used.
          expr: |-
            kube_resourcequota{job="kube-state-metrics", type="used"}
              / ignoring(instance, job, type)
            (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
              == 1
          for: 15m
          labels:
            severity: info
        - alert: KubeQuotaExceeded
          annotations:
            description: Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage
              }} of its {{ $labels.resource }} quota.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaexceeded
            summary: Namespace quota has exceeded the limits.
          expr: |-
            kube_resourcequota{job="kube-state-metrics", type="used"}
              / ignoring(instance, job, type)
            (kube_resourcequota{job="kube-state-metrics", type="hard"} > 0)
              > 1
          for: 15m
          labels:
            severity: warning
        - alert: CPUThrottlingHigh
          annotations:
            description: '{{ $value | humanizePercentage }} throttling of CPU in namespace
              {{ $labels.namespace }} for container {{ $labels.container }} in pod {{ $labels.pod
              }}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/cputhrottlinghigh
            summary: Processes experience elevated CPU throttling.
          expr: |-
            sum(increase(container_cpu_cfs_throttled_periods_total{container!="", }[5m])) by (container, pod, namespace)
              /
            sum(increase(container_cpu_cfs_periods_total{}[5m])) by (container, pod, namespace)
              > ( 25 / 100 )
          for: 15m
          labels:
            severity: info
    cattle-monitoring-system-rancher-monitoring-kubernetes-storage-f87da777-7b55-464b-99cf-0a6e74aadc3c.yaml: |
      groups:
      - name: kubernetes-storage
        rules:
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage
              }} free.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
            summary: PersistentVolume is filling up.
          expr: |-
            kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
              /
            kubelet_volume_stats_capacity_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
              < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: Based on recent sampling, the PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} is expected to fill up within four
              days. Currently {{ $value | humanizePercentage }} is available.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
            summary: PersistentVolume is filling up.
          expr: |-
            (
              kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.15
            and
            kubelet_volume_stats_used_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            and
            predict_linear(kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}[6h], 4 * 24 * 3600) < 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1h
          labels:
            severity: warning
        - alert: KubePersistentVolumeInodesFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} only has {{ $value | humanizePercentage
              }} free inodes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumeinodesfillingup
            summary: PersistentVolumeInodes are filling up.
          expr: |-
            (
              kubelet_volume_stats_inodes_free{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_inodes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.03
            and
            kubelet_volume_stats_inodes_used{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePersistentVolumeInodesFillingUp
          annotations:
            description: Based on recent sampling, the PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} is expected to run out of inodes within
              four days. Currently {{ $value | humanizePercentage }} of its inodes are free.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumeinodesfillingup
            summary: PersistentVolumeInodes are filling up.
          expr: |-
            (
              kubelet_volume_stats_inodes_free{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_inodes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.15
            and
            kubelet_volume_stats_inodes_used{job="kubelet", namespace=~".*", metrics_path="/metrics"} > 0
            and
            predict_linear(kubelet_volume_stats_inodes_free{job="kubelet", namespace=~".*", metrics_path="/metrics"}[6h], 4 * 24 * 3600) < 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1h
          labels:
            severity: warning
        - alert: KubePersistentVolumeErrors
          annotations:
            description: The persistent volume {{ $labels.persistentvolume }} has status
              {{ $labels.phase }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumeerrors
            summary: PersistentVolume is having issues with provisioning.
          expr: kube_persistentvolume_status_phase{phase=~"Failed|Pending",job="kube-state-metrics"}
            > 0
          for: 5m
          labels:
            severity: critical
    cattle-monitoring-system-rancher-monitoring-kubernetes-system-05e631bf-dcfd-4210-b57a-4d5776a69313.yaml: |
      groups:
      - name: kubernetes-system
        rules:
        - alert: KubeVersionMismatch
          annotations:
            description: There are {{ $value }} different semantic versions of Kubernetes
              components running.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeversionmismatch
            summary: Different semantic versions of Kubernetes components running.
          expr: count by (cluster) (count by (git_version, cluster) (label_replace(kubernetes_build_info{job!~"kube-dns|coredns"},"git_version","$1","git_version","(v[0-9]*.[0-9]*).*")))
            > 1
          for: 15m
          labels:
            severity: warning
        - alert: KubeClientErrors
          annotations:
            description: Kubernetes API server client '{{ $labels.job }}/{{ $labels.instance
              }}' is experiencing {{ $value | humanizePercentage }} errors.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeclienterrors
            summary: Kubernetes API server client is experiencing errors.
          expr: |-
            (sum(rate(rest_client_requests_total{job="apiserver",code=~"5.."}[5m])) by (cluster, instance, job, namespace)
              /
            sum(rate(rest_client_requests_total{job="apiserver"}[5m])) by (cluster, instance, job, namespace))
            > 0.01
          for: 15m
          labels:
            severity: warning
    cattle-monitoring-system-rancher-monitoring-kubernetes-system-apiserver-06b6e8a8-2325-4aef-b3ae-1e5a98715f62.yaml: |
      groups:
      - name: kubernetes-system-apiserver
        rules:
        - alert: KubeClientCertificateExpiration
          annotations:
            description: A client certificate used to authenticate to kubernetes apiserver
              is expiring in less than 7.0 days.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeclientcertificateexpiration
            summary: Client certificate is about to expire.
          expr: apiserver_client_certificate_expiration_seconds_count{job="apiserver"} >
            0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="apiserver"}[5m])))
            < 604800
          for: 5m
          labels:
            severity: warning
        - alert: KubeClientCertificateExpiration
          annotations:
            description: A client certificate used to authenticate to kubernetes apiserver
              is expiring in less than 24.0 hours.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeclientcertificateexpiration
            summary: Client certificate is about to expire.
          expr: apiserver_client_certificate_expiration_seconds_count{job="apiserver"} >
            0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job="apiserver"}[5m])))
            < 86400
          for: 5m
          labels:
            severity: critical
        - alert: KubeAggregatedAPIErrors
          annotations:
            description: Kubernetes aggregated API {{ $labels.name }}/{{ $labels.namespace
              }} has reported errors. It has appeared unavailable {{ $value | humanize }}
              times averaged over the past 10m.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeaggregatedapierrors
            summary: Kubernetes aggregated API has reported errors.
          expr: sum by(name, namespace, cluster)(increase(aggregator_unavailable_apiservice_total[10m]))
            > 4
          labels:
            severity: warning
        - alert: KubeAggregatedAPIDown
          annotations:
            description: Kubernetes aggregated API {{ $labels.name }}/{{ $labels.namespace
              }} has been only {{ $value | humanize }}% available over the last 10m.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeaggregatedapidown
            summary: Kubernetes aggregated API is down.
          expr: (1 - max by(name, namespace, cluster)(avg_over_time(aggregator_unavailable_apiservice[10m])))
            * 100 < 85
          for: 5m
          labels:
            severity: warning
        - alert: KubeAPIDown
          annotations:
            description: KubeAPI has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapidown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="apiserver"} == 1)
          for: 15m
          labels:
            severity: critical
        - alert: KubeAPITerminatedRequests
          annotations:
            description: The kubernetes apiserver has terminated {{ $value | humanizePercentage
              }} of its incoming requests.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeapiterminatedrequests
            summary: The kubernetes apiserver has terminated {{ $value | humanizePercentage
              }} of its incoming requests.
          expr: sum(rate(apiserver_request_terminations_total{job="apiserver"}[10m]))  /
            (  sum(rate(apiserver_request_total{job="apiserver"}[10m])) + sum(rate(apiserver_request_terminations_total{job="apiserver"}[10m]))
            ) > 0.20
          for: 5m
          labels:
            severity: warning
    cattle-monitoring-system-rancher-monitoring-kubernetes-system-kubelet-273f30de-f168-42e2-8436-f45deed67dad.yaml: |
      groups:
      - name: kubernetes-system-kubelet
        rules:
        - alert: KubeNodeNotReady
          annotations:
            description: '{{ $labels.node }} has been unready for more than 15 minutes.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubenodenotready
            summary: Node is not ready.
          expr: kube_node_status_condition{job="kube-state-metrics",condition="Ready",status="true"}
            == 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeNodeUnreachable
          annotations:
            description: '{{ $labels.node }} is unreachable and some workloads may be rescheduled.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubenodeunreachable
            summary: Node is unreachable.
          expr: (kube_node_spec_taint{job="kube-state-metrics",key="node.kubernetes.io/unreachable",effect="NoSchedule"}
            unless ignoring(key,value) kube_node_spec_taint{job="kube-state-metrics",key=~"ToBeDeletedByClusterAutoscaler|cloud.google.com/impending-node-termination|aws-node-termination-handler/spot-itn"})
            == 1
          for: 15m
          labels:
            severity: warning
        - alert: KubeletTooManyPods
          annotations:
            description: Kubelet '{{ $labels.node }}' is running at {{ $value | humanizePercentage
              }} of its Pod capacity.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubelettoomanypods
            summary: Kubelet is running at capacity.
          expr: |-
            count by(cluster, node) (
              (kube_pod_status_phase{job="kube-state-metrics",phase="Running"} == 1) * on(instance,pod,namespace,cluster) group_left(node) topk by(instance,pod,namespace,cluster) (1, kube_pod_info{job="kube-state-metrics"})
            )
            /
            max by(cluster, node) (
              kube_node_status_capacity{job="kube-state-metrics",resource="pods"} != 1
            ) > 0.95
          for: 15m
          labels:
            severity: info
        - alert: KubeNodeReadinessFlapping
          annotations:
            description: The readiness status of node {{ $labels.node }} has changed {{
              $value }} times in the last 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubenodereadinessflapping
            summary: Node readiness status is flapping.
          expr: sum(changes(kube_node_status_condition{job="kube-state-metrics",status="true",condition="Ready"}[15m]))
            by (cluster, node) > 2
          for: 15m
          labels:
            severity: warning
        - alert: KubeletPlegDurationHigh
          annotations:
            description: The Kubelet Pod Lifecycle Event Generator has a 99th percentile
              duration of {{ $value }} seconds on node {{ $labels.node }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletplegdurationhigh
            summary: Kubelet Pod Lifecycle Event Generator is taking too long to relist.
          expr: node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile{quantile="0.99"}
            >= 10
          for: 5m
          labels:
            severity: warning
        - alert: KubeletPodStartUpLatencyHigh
          annotations:
            description: Kubelet Pod startup 99th percentile latency is {{ $value }} seconds
              on node {{ $labels.node }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletpodstartuplatencyhigh
            summary: Kubelet Pod startup latency is too high.
          expr: histogram_quantile(0.99, sum(rate(kubelet_pod_worker_duration_seconds_bucket{job="kubelet",
            metrics_path="/metrics"}[5m])) by (cluster, instance, le)) * on(cluster, instance)
            group_left(node) kubelet_node_name{job="kubelet", metrics_path="/metrics"} >
            60
          for: 15m
          labels:
            severity: warning
        - alert: KubeletClientCertificateExpiration
          annotations:
            description: Client certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletclientcertificateexpiration
            summary: Kubelet client certificate is about to expire.
          expr: kubelet_certificate_manager_client_ttl_seconds < 604800
          labels:
            severity: warning
        - alert: KubeletClientCertificateExpiration
          annotations:
            description: Client certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletclientcertificateexpiration
            summary: Kubelet client certificate is about to expire.
          expr: kubelet_certificate_manager_client_ttl_seconds < 86400
          labels:
            severity: critical
        - alert: KubeletServerCertificateExpiration
          annotations:
            description: Server certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletservercertificateexpiration
            summary: Kubelet server certificate is about to expire.
          expr: kubelet_certificate_manager_server_ttl_seconds < 604800
          labels:
            severity: warning
        - alert: KubeletServerCertificateExpiration
          annotations:
            description: Server certificate for Kubelet on node {{ $labels.node }} expires
              in {{ $value | humanizeDuration }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletservercertificateexpiration
            summary: Kubelet server certificate is about to expire.
          expr: kubelet_certificate_manager_server_ttl_seconds < 86400
          labels:
            severity: critical
        - alert: KubeletClientCertificateRenewalErrors
          annotations:
            description: Kubelet on node {{ $labels.node }} has failed to renew its client
              certificate ({{ $value | humanize }} errors in the last 5 minutes).
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletclientcertificaterenewalerrors
            summary: Kubelet has failed to renew its client certificate.
          expr: increase(kubelet_certificate_manager_client_expiration_renew_errors[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeletServerCertificateRenewalErrors
          annotations:
            description: Kubelet on node {{ $labels.node }} has failed to renew its server
              certificate ({{ $value | humanize }} errors in the last 5 minutes).
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletservercertificaterenewalerrors
            summary: Kubelet has failed to renew its server certificate.
          expr: increase(kubelet_server_expiration_renew_errors[5m]) > 0
          for: 15m
          labels:
            severity: warning
        - alert: KubeletDown
          annotations:
            description: Kubelet has disappeared from Prometheus target discovery.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubeletdown
            summary: Target disappeared from Prometheus target discovery.
          expr: absent(up{job="kubelet", metrics_path="/metrics"} == 1)
          for: 15m
          labels:
            severity: critical
    cattle-monitoring-system-rancher-monitoring-node-exporter-77d3e254-35f4-4e20-8130-4efc8222178b.yaml: |
      groups:
      - name: node-exporter
        rules:
        - alert: NodeFilesystemSpaceFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available space left and is filling up.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemspacefillingup
            summary: Filesystem is predicted to run out of space within the next 24 hours.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 15
            and
              predict_linear(node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""}[6h], 24*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: warning
        - alert: NodeFilesystemSpaceFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available space left and is filling up fast.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemspacefillingup
            summary: Filesystem is predicted to run out of space within the next 4 hours.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 10
            and
              predict_linear(node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""}[6h], 4*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: critical
        - alert: NodeFilesystemAlmostOutOfSpace
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available space left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutofspace
            summary: Filesystem has less than 5% space left.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 5
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 30m
          labels:
            severity: warning
        - alert: NodeFilesystemAlmostOutOfSpace
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available space left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutofspace
            summary: Filesystem has less than 3% space left.
          expr: |-
            (
              node_filesystem_avail_bytes{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_size_bytes{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 3
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 30m
          labels:
            severity: critical
        - alert: NodeFilesystemFilesFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available inodes left and is filling up.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemfilesfillingup
            summary: Filesystem is predicted to run out of inodes within the next 24 hours.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 40
            and
              predict_linear(node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""}[6h], 24*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: warning
        - alert: NodeFilesystemFilesFillingUp
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available inodes left and is filling up fast.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemfilesfillingup
            summary: Filesystem is predicted to run out of inodes within the next 4 hours.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 20
            and
              predict_linear(node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""}[6h], 4*60*60) < 0
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: critical
        - alert: NodeFilesystemAlmostOutOfFiles
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available inodes left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutoffiles
            summary: Filesystem has less than 5% inodes left.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 5
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: warning
        - alert: NodeFilesystemAlmostOutOfFiles
          annotations:
            description: Filesystem on {{ $labels.device }} at {{ $labels.instance }} has
              only {{ printf "%.2f" $value }}% available inodes left.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefilesystemalmostoutoffiles
            summary: Filesystem has less than 3% inodes left.
          expr: |-
            (
              node_filesystem_files_free{job="node-exporter",fstype!="",mountpoint!=""} / node_filesystem_files{job="node-exporter",fstype!="",mountpoint!=""} * 100 < 3
            and
              node_filesystem_readonly{job="node-exporter",fstype!="",mountpoint!=""} == 0
            )
          for: 1h
          labels:
            severity: critical
        - alert: NodeNetworkReceiveErrs
          annotations:
            description: '{{ $labels.instance }} interface {{ $labels.device }} has encountered
              {{ printf "%.0f" $value }} receive errors in the last two minutes.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodenetworkreceiveerrs
            summary: Network interface is reporting many receive errors.
          expr: rate(node_network_receive_errs_total[2m]) / rate(node_network_receive_packets_total[2m])
            > 0.01
          for: 1h
          labels:
            severity: warning
        - alert: NodeNetworkTransmitErrs
          annotations:
            description: '{{ $labels.instance }} interface {{ $labels.device }} has encountered
              {{ printf "%.0f" $value }} transmit errors in the last two minutes.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodenetworktransmiterrs
            summary: Network interface is reporting many transmit errors.
          expr: rate(node_network_transmit_errs_total[2m]) / rate(node_network_transmit_packets_total[2m])
            > 0.01
          for: 1h
          labels:
            severity: warning
        - alert: NodeHighNumberConntrackEntriesUsed
          annotations:
            description: '{{ $value | humanizePercentage }} of conntrack entries are used.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodehighnumberconntrackentriesused
            summary: Number of conntrack are getting close to the limit.
          expr: (node_nf_conntrack_entries / node_nf_conntrack_entries_limit) > 0.75
          labels:
            severity: warning
        - alert: NodeTextFileCollectorScrapeError
          annotations:
            description: Node Exporter text file collector failed to scrape.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodetextfilecollectorscrapeerror
            summary: Node Exporter text file collector failed to scrape.
          expr: node_textfile_scrape_error{job="node-exporter"} == 1
          labels:
            severity: warning
        - alert: NodeClockSkewDetected
          annotations:
            description: Clock on {{ $labels.instance }} is out of sync by more than 0.05s.
              Ensure NTP is configured correctly on this host.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodeclockskewdetected
            summary: Clock skew detected.
          expr: |-
            (
              node_timex_offset_seconds{job="node-exporter"} > 0.05
            and
              deriv(node_timex_offset_seconds{job="node-exporter"}[5m]) >= 0
            )
            or
            (
              node_timex_offset_seconds{job="node-exporter"} < -0.05
            and
              deriv(node_timex_offset_seconds{job="node-exporter"}[5m]) <= 0
            )
          for: 10m
          labels:
            severity: warning
        - alert: NodeClockNotSynchronising
          annotations:
            description: Clock on {{ $labels.instance }} is not synchronising. Ensure NTP
              is configured on this host.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodeclocknotsynchronising
            summary: Clock not synchronising.
          expr: |-
            min_over_time(node_timex_sync_status{job="node-exporter"}[5m]) == 0
            and
            node_timex_maxerror_seconds{job="node-exporter"} >= 16
          for: 10m
          labels:
            severity: warning
        - alert: NodeRAIDDegraded
          annotations:
            description: RAID array '{{ $labels.device }}' on {{ $labels.instance }} is
              in degraded state due to one or more disks failures. Number of spare drives
              is insufficient to fix issue automatically.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/noderaiddegraded
            summary: RAID Array is degraded
          expr: node_md_disks_required{job="node-exporter",device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}
            - ignoring (state) (node_md_disks{state="active",job="node-exporter",device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"})
            > 0
          for: 15m
          labels:
            severity: critical
        - alert: NodeRAIDDiskFailure
          annotations:
            description: At least one device in RAID array on {{ $labels.instance }} failed.
              Array '{{ $labels.device }}' needs attention and possibly a disk swap.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/noderaiddiskfailure
            summary: Failed device in RAID array
          expr: node_md_disks{state="failed",job="node-exporter",device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}
            > 0
          labels:
            severity: warning
        - alert: NodeFileDescriptorLimit
          annotations:
            description: File descriptors limit at {{ $labels.instance }} is currently at
              {{ printf "%.2f" $value }}%.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefiledescriptorlimit
            summary: Kernel is predicted to exhaust file descriptors limit soon.
          expr: |-
            (
              node_filefd_allocated{job="node-exporter"} * 100 / node_filefd_maximum{job="node-exporter"} > 70
            )
          for: 15m
          labels:
            severity: warning
        - alert: NodeFileDescriptorLimit
          annotations:
            description: File descriptors limit at {{ $labels.instance }} is currently at
              {{ printf "%.2f" $value }}%.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/node/nodefiledescriptorlimit
            summary: Kernel is predicted to exhaust file descriptors limit soon.
          expr: |-
            (
              node_filefd_allocated{job="node-exporter"} * 100 / node_filefd_maximum{job="node-exporter"} > 90
            )
          for: 15m
          labels:
            severity: critical
    cattle-monitoring-system-rancher-monitoring-node-exporter.rules-a0f0edf1-3ae2-4f35-89a7-cd3a3b8b0eb1.yaml: |
      groups:
      - name: node-exporter.rules
        rules:
        - expr: |-
            count without (cpu, mode) (
              node_cpu_seconds_total{job="node-exporter",mode="idle"}
            )
          record: instance:node_num_cpu:sum
        - expr: |-
            1 - avg without (cpu) (
              sum without (mode) (rate(node_cpu_seconds_total{job="node-exporter", mode=~"idle|iowait|steal"}[5m]))
            )
          record: instance:node_cpu_utilisation:rate5m
        - expr: |-
            (
              node_load1{job="node-exporter"}
            /
              instance:node_num_cpu:sum{job="node-exporter"}
            )
          record: instance:node_load1_per_cpu:ratio
        - expr: |-
            1 - (
              (
                node_memory_MemAvailable_bytes{job="node-exporter"}
                or
                (
                  node_memory_Buffers_bytes{job="node-exporter"}
                  +
                  node_memory_Cached_bytes{job="node-exporter"}
                  +
                  node_memory_MemFree_bytes{job="node-exporter"}
                  +
                  node_memory_Slab_bytes{job="node-exporter"}
                )
              )
            /
              node_memory_MemTotal_bytes{job="node-exporter"}
            )
          record: instance:node_memory_utilisation:ratio
        - expr: rate(node_vmstat_pgmajfault{job="node-exporter"}[5m])
          record: instance:node_vmstat_pgmajfault:rate5m
        - expr: rate(node_disk_io_time_seconds_total{job="node-exporter", device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}[5m])
          record: instance_device:node_disk_io_time_seconds:rate5m
        - expr: rate(node_disk_io_time_weighted_seconds_total{job="node-exporter", device=~"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)"}[5m])
          record: instance_device:node_disk_io_time_weighted_seconds:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_receive_bytes_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_receive_bytes_excluding_lo:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_transmit_bytes_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_transmit_bytes_excluding_lo:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_receive_drop_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_receive_drop_excluding_lo:rate5m
        - expr: |-
            sum without (device) (
              rate(node_network_transmit_drop_total{job="node-exporter", device!="lo"}[5m])
            )
          record: instance:node_network_transmit_drop_excluding_lo:rate5m
    cattle-monitoring-system-rancher-monitoring-node-network-b07e9c8d-e999-4729-85d6-d3683f6d06c1.yaml: |
      groups:
      - name: node-network
        rules:
        - alert: NodeNetworkInterfaceFlapping
          annotations:
            description: Network interface "{{ $labels.device }}" changing its up status
              often on node-exporter {{ $labels.namespace }}/{{ $labels.pod }}
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/nodenetworkinterfaceflapping
            summary: Network interface is often changing its status
          expr: changes(node_network_up{job="node-exporter",device!~"veth.+"}[2m]) > 2
          for: 2m
          labels:
            severity: warning
    cattle-monitoring-system-rancher-monitoring-node.rules-7ea0d4ff-2825-46b5-afdb-1ca2f52303c3.yaml: |
      groups:
      - name: node.rules
        rules:
        - expr: |-
            topk by(cluster, namespace, pod) (1,
              max by (cluster, node, namespace, pod) (
                label_replace(kube_pod_info{job="kube-state-metrics",node!=""}, "pod", "$1", "pod", "(.*)")
            ))
          record: 'node_namespace_pod:kube_pod_info:'
        - expr: |-
            count by (cluster, node) (
              node_cpu_seconds_total{mode="idle",job="node-exporter"}
              * on (namespace, pod) group_left(node)
              topk by(namespace, pod) (1, node_namespace_pod:kube_pod_info:)
            )
          record: node:node_num_cpu:sum
        - expr: |-
            sum(
              node_memory_MemAvailable_bytes{job="node-exporter"} or
              (
                node_memory_Buffers_bytes{job="node-exporter"} +
                node_memory_Cached_bytes{job="node-exporter"} +
                node_memory_MemFree_bytes{job="node-exporter"} +
                node_memory_Slab_bytes{job="node-exporter"}
              )
            ) by (cluster)
          record: :node_memory_MemAvailable_bytes:sum
        - expr: |-
            avg by (cluster, node) (
              sum without (mode) (
                rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",job="node-exporter"}[5m])
              )
            )
          record: node:node_cpu_utilization:ratio_rate5m
        - expr: |-
            avg by (cluster) (
              node:node_cpu_utilization:ratio_rate5m
            )
          record: cluster:node_cpu:ratio_rate5m
    cattle-monitoring-system-rancher-monitoring-prometheus-a11e00df-7a03-44b2-935d-172d396e536c.yaml: |
      groups:
      - name: prometheus
        rules:
        - alert: PrometheusBadConfig
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to
              reload its configuration.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusbadconfig
            summary: Failed Prometheus configuration reload.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            max_over_time(prometheus_config_last_reload_successful{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]) == 0
          for: 10m
          labels:
            severity: critical
        - alert: PrometheusNotificationQueueRunningFull
          annotations:
            description: Alert notification queue of Prometheus {{$labels.namespace}}/{{$labels.pod}}
              is running full.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusnotificationqueuerunningfull
            summary: Prometheus alert notification queue predicted to run full in less than
              30m.
          expr: |-
            # Without min_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            (
              predict_linear(prometheus_notifications_queue_length{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m], 60 * 30)
            >
              min_over_time(prometheus_notifications_queue_capacity{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            )
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusErrorSendingAlertsToSomeAlertmanagers
          annotations:
            description: '{{ printf "%.1f" $value }}% errors while sending alerts from Prometheus
              {{$labels.namespace}}/{{$labels.pod}} to Alertmanager {{$labels.alertmanager}}.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuserrorsendingalertstosomealertmanagers
            summary: Prometheus has encountered more than 1% errors sending alerts to a
              specific Alertmanager.
          expr: |-
            (
              rate(prometheus_notifications_errors_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            /
              rate(prometheus_notifications_sent_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            )
            * 100
            > 1
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusNotConnectedToAlertmanagers
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is not connected
              to any Alertmanagers.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusnotconnectedtoalertmanagers
            summary: Prometheus is not connected to any Alertmanagers.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            max_over_time(prometheus_notifications_alertmanagers_discovered{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]) < 1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusTSDBReloadsFailing
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has detected {{$value
              | humanize}} reload failures over the last 3h.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustsdbreloadsfailing
            summary: Prometheus has issues reloading blocks from disk.
          expr: increase(prometheus_tsdb_reloads_failures_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[3h])
            > 0
          for: 4h
          labels:
            severity: warning
        - alert: PrometheusTSDBCompactionsFailing
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has detected {{$value
              | humanize}} compaction failures over the last 3h.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustsdbcompactionsfailing
            summary: Prometheus has issues compacting blocks.
          expr: increase(prometheus_tsdb_compactions_failed_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[3h])
            > 0
          for: 4h
          labels:
            severity: warning
        - alert: PrometheusNotIngestingSamples
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is not ingesting
              samples.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusnotingestingsamples
            summary: Prometheus is not ingesting samples.
          expr: |-
            (
              rate(prometheus_tsdb_head_samples_appended_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]) <= 0
            and
              (
                sum without(scrape_job) (prometheus_target_metadata_cache_entries{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}) > 0
              or
                sum without(rule_group) (prometheus_rule_group_rules{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}) > 0
              )
            )
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusDuplicateTimestamps
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is dropping {{
              printf "%.4g" $value  }} samples/s with different values but duplicated timestamp.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusduplicatetimestamps
            summary: Prometheus is dropping samples with duplicate timestamps.
          expr: rate(prometheus_target_scrapes_sample_duplicate_timestamp_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOutOfOrderTimestamps
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} is dropping {{
              printf "%.4g" $value  }} samples/s with timestamps arriving out of order.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusoutofordertimestamps
            summary: Prometheus drops samples with out-of-order timestamps.
          expr: rate(prometheus_target_scrapes_sample_out_of_order_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusRemoteStorageFailures
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} failed to send
              {{ printf "%.1f" $value }}% of the samples to {{ $labels.remote_name}}:{{
              $labels.url }}
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusremotestoragefailures
            summary: Prometheus fails to send samples to remote storage.
          expr: |-
            (
              (rate(prometheus_remote_storage_failed_samples_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]))
            /
              (
                (rate(prometheus_remote_storage_failed_samples_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]))
              +
                (rate(prometheus_remote_storage_succeeded_samples_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]) or rate(prometheus_remote_storage_samples_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m]))
              )
            )
            * 100
            > 1
          for: 15m
          labels:
            severity: critical
        - alert: PrometheusRemoteWriteBehind
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} remote write is
              {{ printf "%.1f" $value }}s behind for {{ $labels.remote_name}}:{{ $labels.url
              }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusremotewritebehind
            summary: Prometheus remote write is behind.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            (
              max_over_time(prometheus_remote_storage_highest_timestamp_in_seconds{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            - ignoring(remote_name, url) group_right
              max_over_time(prometheus_remote_storage_queue_highest_sent_timestamp_seconds{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            )
            > 120
          for: 15m
          labels:
            severity: critical
        - alert: PrometheusRemoteWriteDesiredShards
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} remote write desired
              shards calculation wants to run {{ $value }} shards for queue {{ $labels.remote_name}}:{{
              $labels.url }}, which is more than the max of {{ printf `prometheus_remote_storage_shards_max{instance="%s",job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}`
              $labels.instance | query | first | value }}.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusremotewritedesiredshards
            summary: Prometheus remote write desired shards calculation wants to run more
              than configured max shards.
          expr: |-
            # Without max_over_time, failed scrapes could create false negatives, see
            # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
            (
              max_over_time(prometheus_remote_storage_shards_desired{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            >
              max_over_time(prometheus_remote_storage_shards_max{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            )
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusRuleFailures
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed to
              evaluate {{ printf "%.0f" $value }} rules in the last 5m.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusrulefailures
            summary: Prometheus is failing rule evaluations.
          expr: increase(prometheus_rule_evaluation_failures_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 15m
          labels:
            severity: critical
        - alert: PrometheusMissingRuleEvaluations
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has missed {{
              printf "%.0f" $value }} rule group evaluations in the last 5m.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusmissingruleevaluations
            summary: Prometheus is missing rule evaluations due to slow rule group evaluation.
          expr: increase(prometheus_rule_group_iterations_missed_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusTargetLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has dropped {{
              printf "%.0f" $value }} targets because the number of targets exceeded the
              configured target_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustargetlimithit
            summary: Prometheus has dropped targets because some scrape configs have exceeded
              the targets limit.
          expr: increase(prometheus_target_scrape_pool_exceeded_target_limit_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusLabelLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has dropped {{
              printf "%.0f" $value }} targets because some samples exceeded the configured
              label_limit, label_name_length_limit or label_value_length_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuslabellimithit
            summary: Prometheus has dropped targets because some scrape configs have exceeded
              the labels limit.
          expr: increase(prometheus_target_scrape_pool_exceeded_label_limits_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusScrapeBodySizeLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed {{
              printf "%.0f" $value }} scrapes in the last 5m because some targets exceeded
              the configured body_size_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusscrapebodysizelimithit
            summary: Prometheus has dropped some targets that exceeded body size limit.
          expr: increase(prometheus_target_scrapes_exceeded_body_size_limit_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusScrapeSampleLimitHit
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} has failed {{
              printf "%.0f" $value }} scrapes in the last 5m because some targets exceeded
              the configured sample_limit.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheusscrapesamplelimithit
            summary: Prometheus has failed scrapes that have exceeded the configured sample
              limit.
          expr: increase(prometheus_target_scrapes_exceeded_sample_limit_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusTargetSyncFailure
          annotations:
            description: '{{ printf "%.0f" $value }} targets in Prometheus {{$labels.namespace}}/{{$labels.pod}}
              have failed to sync because invalid configuration was supplied.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheustargetsyncfailure
            summary: Prometheus has failed to sync targets.
          expr: increase(prometheus_target_sync_failed_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[30m])
            > 0
          for: 5m
          labels:
            severity: critical
        - alert: PrometheusHighQueryLoad
          annotations:
            description: Prometheus {{$labels.namespace}}/{{$labels.pod}} query API has
              less than 20% available capacity in its query engine for the last 15 minutes.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheushighqueryload
            summary: Prometheus is reaching its maximum capacity serving concurrent requests.
          expr: avg_over_time(prometheus_engine_queries{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            / max_over_time(prometheus_engine_queries_concurrent_max{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system"}[5m])
            > 0.8
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusErrorSendingAlertsToAnyAlertmanager
          annotations:
            description: '{{ printf "%.1f" $value }}% minimum errors while sending alerts
              from Prometheus {{$labels.namespace}}/{{$labels.pod}} to any Alertmanager.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus/prometheuserrorsendingalertstoanyalertmanager
            summary: Prometheus encounters more than 3% errors sending alerts to any Alertmanager.
          expr: |-
            min without (alertmanager) (
              rate(prometheus_notifications_errors_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system",alertmanager!~``}[5m])
            /
              rate(prometheus_notifications_sent_total{job="rancher-monitoring-prometheus",namespace="cattle-monitoring-system",alertmanager!~``}[5m])
            )
            * 100
            > 3
          for: 15m
          labels:
            severity: critical
    cattle-monitoring-system-rancher-monitoring-prometheus-operator-a6be5003-c44f-4533-a560-e03d9676909f.yaml: |
      groups:
      - name: prometheus-operator
        rules:
        - alert: PrometheusOperatorListErrors
          annotations:
            description: Errors while performing List operations in controller {{$labels.controller}}
              in {{$labels.namespace}} namespace.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorlisterrors
            summary: Errors while performing list operations in controller.
          expr: (sum by (controller,namespace,cluster) (rate(prometheus_operator_list_operations_failed_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[10m]))
            / sum by (controller,namespace,cluster) (rate(prometheus_operator_list_operations_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[10m])))
            > 0.4
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusOperatorWatchErrors
          annotations:
            description: Errors while performing watch operations in controller {{$labels.controller}}
              in {{$labels.namespace}} namespace.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorwatcherrors
            summary: Errors while performing watch operations in controller.
          expr: (sum by (controller,namespace,cluster) (rate(prometheus_operator_watch_operations_failed_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m]))
            / sum by (controller,namespace,cluster) (rate(prometheus_operator_watch_operations_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])))
            > 0.4
          for: 15m
          labels:
            severity: warning
        - alert: PrometheusOperatorSyncFailed
          annotations:
            description: Controller {{ $labels.controller }} in {{ $labels.namespace }}
              namespace fails to reconcile {{ $value }} objects.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorsyncfailed
            summary: Last controller reconciliation failed
          expr: min_over_time(prometheus_operator_syncs{status="failed",job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorReconcileErrors
          annotations:
            description: '{{ $value | humanizePercentage }} of reconciling operations failed
              for {{ $labels.controller }} controller in {{ $labels.namespace }} namespace.'
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorreconcileerrors
            summary: Errors while reconciling controller.
          expr: (sum by (controller,namespace,cluster) (rate(prometheus_operator_reconcile_errors_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])))
            / (sum by (controller,namespace,cluster) (rate(prometheus_operator_reconcile_operations_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])))
            > 0.1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorNodeLookupErrors
          annotations:
            description: Errors while reconciling Prometheus in {{ $labels.namespace }}
              Namespace.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatornodelookuperrors
            summary: Errors while reconciling Prometheus.
          expr: rate(prometheus_operator_node_address_lookup_errors_total{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])
            > 0.1
          for: 10m
          labels:
            severity: warning
        - alert: PrometheusOperatorNotReady
          annotations:
            description: Prometheus operator in {{ $labels.namespace }} namespace isn't
              ready to reconcile {{ $labels.controller }} resources.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatornotready
            summary: Prometheus operator not ready
          expr: min by (controller,namespace,cluster) (max_over_time(prometheus_operator_ready{job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])
            == 0)
          for: 5m
          labels:
            severity: warning
        - alert: PrometheusOperatorRejectedResources
          annotations:
            description: Prometheus operator in {{ $labels.namespace }} namespace rejected
              {{ printf "%0.0f" $value }} {{ $labels.controller }}/{{ $labels.resource }}
              resources.
            runbook_url: https://runbooks.prometheus-operator.dev/runbooks/prometheus-operator/prometheusoperatorrejectedresources
            summary: Resources rejected by Prometheus operator
          expr: min_over_time(prometheus_operator_managed_resources{state="rejected",job="rancher-monitoring-operator",namespace="cattle-monitoring-system"}[5m])
            > 0
          for: 5m
          labels:
            severity: warning
    harvester-system-prometheus-kubevirt-rules-3e77fd4a-7c48-47e3-b26a-15eb73f0e9e8.yaml: |
      groups:
      - name: kubevirt.rules
        rules:
        - expr: sum(up{namespace='harvester-system', pod=~'virt-api-.*'}) or vector(0)
          record: kubevirt_virt_api_up
        - expr: count(count (kube_node_status_allocatable) by (node))
          record: kubevirt_allocatable_nodes
        - expr: count(kube_node_status_allocatable{resource="devices_kubevirt_io_kvm"} !=
            0) or vector(0)
          record: kubevirt_nodes_with_kvm
        - expr: sum(up{pod=~'virt-controller-.*', namespace='harvester-system'}) or vector(0)
          record: kubevirt_virt_controller_up
        - expr: sum(kubevirt_virt_controller_ready_status{namespace='harvester-system'})
            or vector(0)
          record: kubevirt_virt_controller_ready
        - expr: sum(up{namespace='harvester-system', pod=~'virt-operator-.*'}) or vector(0)
          record: kubevirt_virt_operator_up
        - expr: sum(kubevirt_virt_operator_ready_status{namespace='harvester-system'}) or
            vector(0)
          record: kubevirt_virt_operator_ready
        - expr: sum(kubevirt_virt_operator_leading_status{namespace='harvester-system'})
          record: kubevirt_virt_operator_leading
        - expr: sum(up{pod=~'virt-handler-.*', namespace='harvester-system'}) or vector(0)
          record: kubevirt_virt_handler_up
        - expr: kubevirt_vmi_memory_available_bytes-kubevirt_vmi_memory_usable_bytes
          record: kubevirt_vmi_memory_used_bytes
        - expr: sum by(pod, container, namespace) (kube_pod_container_resource_requests{pod=~'virt-launcher-.*',
            container='compute', resource='memory'}- on(pod,container, namespace) container_memory_working_set_bytes{pod=~'virt-launcher-.*',
            container='compute'})
          record: kubevirt_vm_container_free_memory_bytes_based_on_working_set_bytes
        - expr: sum by(pod, container, namespace) (kube_pod_container_resource_requests{pod=~'virt-launcher-.*',
            container='compute', resource='memory'}- on(pod,container, namespace) container_memory_rss{pod=~'virt-launcher-.*',
            container='compute'})
          record: kubevirt_vm_container_free_memory_bytes_based_on_rss
        - expr: label_replace(label_replace(kube_persistentvolumeclaim_labels{label_restore_kubevirt_io_source_vm_name!='',
            label_restore_kubevirt_io_source_vm_namespace!=''} == 1, 'vm_namespace', '$1',
            'label_restore_kubevirt_io_source_vm_namespace', '(.*)'), 'vm_name', '$1', 'label_restore_kubevirt_io_source_vm_name',
            '(.*)')
          record: kubevirt_vmsnapshot_persistentvolumeclaim_labels
        - expr: sum by(vm_name, vm_namespace) (kubevirt_vmsnapshot_persistentvolumeclaim_labels)
          record: kubevirt_vmsnapshot_disks_restored_from_source
        - expr: sum by(vm_name, vm_namespace) (kube_persistentvolumeclaim_resource_requests_storage_bytes
            * on(persistentvolumeclaim, namespace) group_left(vm_name, vm_namespace) kubevirt_vmsnapshot_persistentvolumeclaim_labels)
          record: kubevirt_vmsnapshot_disks_restored_from_source_bytes
        - expr: sum by (namespace) (count by (name,namespace) (kubevirt_vm_error_status_last_transition_timestamp_seconds
            + kubevirt_vm_migrating_status_last_transition_timestamp_seconds + kubevirt_vm_non_running_status_last_transition_timestamp_seconds
            + kubevirt_vm_running_status_last_transition_timestamp_seconds + kubevirt_vm_starting_status_last_transition_timestamp_seconds))
          record: kubevirt_number_of_vms
        - expr: group by (group,version,resource,subresource) (apiserver_requested_deprecated_apis{group="kubevirt.io"})
            * on (group,version,resource,subresource) group_right() sum by (group,version,resource,subresource,verb)
            (apiserver_request_total)
          record: kubevirt_api_request_deprecated_total
        - alert: VirtAPIDown
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtAPIDown
            summary: All virt-api servers are down.
          expr: kubevirt_virt_api_up == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: LowVirtAPICount
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/LowVirtAPICount
            summary: More than one virt-api should be running if more than one worker nodes
              exist.
          expr: (kubevirt_allocatable_nodes > 1) and (kubevirt_virt_api_up < 2)
          for: 60m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: LowKVMNodesCount
          annotations:
            description: Low number of nodes with KVM resource available.
            runbook_url: https://kubevirt.io/monitoring/runbooks/LowKVMNodesCount
            summary: At least two nodes with kvm resource required for VM live migration.
          expr: (kubevirt_allocatable_nodes > 1) and (kubevirt_nodes_with_kvm < 2)
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: LowReadyVirtControllersCount
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/LowReadyVirtControllersCount
            summary: Some virt controllers are running but not ready.
          expr: kubevirt_virt_controller_ready <  kubevirt_virt_controller_up
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: NoReadyVirtController
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/NoReadyVirtController
            summary: No ready virt-controller was detected for the last 10 min.
          expr: kubevirt_virt_controller_ready == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: VirtControllerDown
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtControllerDown
            summary: No running virt-controller was detected for the last 10 min.
          expr: kubevirt_virt_controller_up == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: LowVirtControllersCount
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/LowVirtControllersCount
            summary: More than one virt-controller should be ready if more than one worker
              node.
          expr: (kubevirt_allocatable_nodes > 1) and (kubevirt_virt_controller_ready < 2)
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtControllerRESTErrorsHigh
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtControllerRESTErrorsHigh
            summary: More than 5% of the rest calls failed in virt-controller for the last
              hour
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-controller-.*",code=~"(4|5)[0-9][0-9]"}
            [60m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-controller-.*"}
            [60m] ) ) >= 0.05
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtControllerRESTErrorsBurst
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtControllerRESTErrorsBurst
            summary: More than 80% of the rest calls failed in virt-controller for the last
              5 minutes
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-controller-.*",code=~"(4|5)[0-9][0-9]"}
            [5m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-controller-.*"}
            [5m] ) ) >= 0.8
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: VirtOperatorDown
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtOperatorDown
            summary: All virt-operator servers are down.
          expr: kubevirt_virt_operator_up == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: LowVirtOperatorCount
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/LowVirtOperatorCount
            summary: More than one virt-operator should be running if more than one worker
              nodes exist.
          expr: (kubevirt_allocatable_nodes > 1) and (kubevirt_virt_operator_up < 2)
          for: 60m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtOperatorRESTErrorsHigh
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtOperatorRESTErrorsHigh
            summary: More than 5% of the rest calls failed in virt-operator for the last
              hour
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-operator-.*",code=~"(4|5)[0-9][0-9]"}
            [60m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-operator-.*"}
            [60m] ) ) >= 0.05
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtOperatorRESTErrorsBurst
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtOperatorRESTErrorsBurst
            summary: More than 80% of the rest calls failed in virt-operator for the last
              5 minutes
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-operator-.*",code=~"(4|5)[0-9][0-9]"}
            [5m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-operator-.*"}
            [5m] ) ) >= 0.8
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: LowReadyVirtOperatorsCount
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/LowReadyVirtOperatorsCount
            summary: Some virt-operators are running but not ready.
          expr: kubevirt_virt_operator_ready <  kubevirt_virt_operator_up
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: NoReadyVirtOperator
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/NoReadyVirtOperator
            summary: No ready virt-operator was detected for the last 10 min.
          expr: kubevirt_virt_operator_ready == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: NoLeadingVirtOperator
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/NoLeadingVirtOperator
            summary: No leading virt-operator was detected for the last 10 min.
          expr: kubevirt_virt_operator_leading == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: VirtHandlerDaemonSetRolloutFailing
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtHandlerDaemonSetRolloutFailing
            summary: Some virt-handlers failed to roll out
          expr: (kube_daemonset_status_number_ready{namespace='harvester-system', daemonset='virt-handler'}
            - kube_daemonset_status_desired_number_scheduled{namespace='harvester-system',
            daemonset='virt-handler'}) != 0
          for: 15m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtHandlerRESTErrorsHigh
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtHandlerRESTErrorsHigh
            summary: More than 5% of the rest calls failed in virt-handler for the last
              hour
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-handler-.*",code=~"(4|5)[0-9][0-9]"}
            [60m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-handler-.*"}
            [60m] ) ) >= 0.05
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtHandlerRESTErrorsBurst
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtHandlerRESTErrorsBurst
            summary: More than 80% of the rest calls failed in virt-handler for the last
              5 minutes
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-handler-.*",code=~"(4|5)[0-9][0-9]"}
            [5m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-handler-.*"}
            [5m] ) ) >= 0.8
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: VirtApiRESTErrorsHigh
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtApiRESTErrorsHigh
            summary: More than 5% of the rest calls failed in virt-api for the last hour
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-api-.*",code=~"(4|5)[0-9][0-9]"}
            [60m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-api-.*"}
            [60m] ) ) >= 0.05
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: warning
            severity: warning
        - alert: VirtApiRESTErrorsBurst
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/VirtApiRESTErrorsBurst
            summary: More than 80% of the rest calls failed in virt-api for the last 5 minutes
          expr: sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-api-.*",code=~"(4|5)[0-9][0-9]"}
            [5m] ) )  /  sum ( rate ( rest_client_requests_total{namespace="harvester-system",pod=~"virt-api-.*"}
            [5m] ) ) >= 0.8
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: critical
        - alert: KubevirtVmHighMemoryUsage
          annotations:
            description: Container {{ $labels.container }} in pod {{ $labels.pod }} in namespace
              {{ $labels.namespace }} free memory is less than 50Mi and it is close to requested
              memory
            runbook_url: https://kubevirt.io/monitoring/runbooks/KubevirtVmHighMemoryUsage
            summary: VM is at risk of being evicted and in serious cases of memory exhaustion
              being terminated by the runtime.
          expr: kubevirt_vm_container_free_memory_bytes_based_on_working_set_bytes < 52428800
            or kubevirt_vm_container_free_memory_bytes_based_on_rss < 52428800
          for: 1m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
        - alert: OrphanedVirtualMachineInstances
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/OrphanedVirtualMachineInstances
            summary: No ready virt-handler pod detected on node {{ $labels.node }} with
              running vmis for more than 10 minutes
          expr: (((max by (node) (kube_pod_status_ready{condition='true',pod=~'virt-handler.*'}
            * on(pod) group_left(node) max by(pod,node)(kube_pod_info{pod=~'virt-handler.*',node!=''}))
            ) == 1) or (count by (node)( kube_pod_info{pod=~'virt-launcher.*',node!=''})*0))
            == 0
          for: 10m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
        - alert: VMCannotBeEvicted
          annotations:
            description: Eviction policy for {{ $labels.name }} (on node {{ $labels.node
              }}) is set to Live Migration but the VM is not migratable
            runbook_url: https://kubevirt.io/monitoring/runbooks/VMCannotBeEvicted
            summary: The VM's eviction strategy is set to Live Migration but the VM is not
              migratable
          expr: kubevirt_vmi_non_evictable > 0
          for: 1m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
        - alert: KubeVirtComponentExceedsRequestedMemory
          annotations:
            description: Container {{ $labels.container }} in pod {{ $labels.pod }} memory
              usage exceeds the memory requested
            runbook_url: https://kubevirt.io/monitoring/runbooks/KubeVirtComponentExceedsRequestedMemory
            summary: The container is using more memory than what is defined in the containers
              resource requests
          expr: ((kube_pod_container_resource_requests{namespace="harvester-system",container=~"virt-controller|virt-api|virt-handler|virt-operator",resource="memory"})
            - on(pod) group_left(node) container_memory_working_set_bytes{container="",namespace="harvester-system"})
            < 0
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
        - alert: KubeVirtComponentExceedsRequestedCPU
          annotations:
            description: Pod {{ $labels.pod }} cpu usage exceeds the CPU requested
            runbook_url: https://kubevirt.io/monitoring/runbooks/KubeVirtComponentExceedsRequestedCPU
            summary: The containers in the pod are using more CPU than what is defined in
              the containers resource requests
          expr: ((kube_pod_container_resource_requests{namespace="harvester-system",container=~"virt-controller|virt-api|virt-handler|virt-operator",resource="cpu"})
            - on(pod) sum(rate(container_cpu_usage_seconds_total{container="",namespace="harvester-system"}[5m]))
            by (pod)) < 0
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
        - alert: KubeVirtVMIExcessiveMigrations
          annotations:
            description: VirtualMachineInstance {{ $labels.vmi }} has been migrated more
              than 12 times during the last 24 hours
            runbook_url: https://kubevirt.io/monitoring/runbooks/KubeVirtVMIExcessiveMigrations
            summary: An excessive amount of migrations have been detected on a VirtualMachineInstance
              in the last 24 hours.
          expr: sum by (vmi) (max_over_time(kubevirt_vmi_migration_succeeded[1d])) >= 12
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
        - alert: KubeVirtNoAvailableNodesToRunVMs
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/KubeVirtNoAvailableNodesToRunVMs
            summary: There are no available nodes in the cluster to run VMs.
          expr: ((sum(kube_node_status_allocatable{resource='devices_kubevirt_io_kvm'})
            or on() vector(0)) == 0 and (sum(kubevirt_configuration_emulation_enabled) or
            on() vector(0)) == 0) or (sum(kube_node_labels{label_kubevirt_io_schedulable='true'})
            or on() vector(0)) == 0
          for: 5m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: critical
            severity: warning
        - alert: KubeVirtDeprecatedAPIRequested
          annotations:
            description: Detected requests to the deprecated {{ $labels.resource }}.{{ $labels.group
              }}/{{ $labels.version }} API.
            runbook_url: https://kubevirt.io/monitoring/runbooks/KubeVirtDeprecatedAPIRequested
            summary: Detected {{ $value }} requests in the last 10 minutes.
          expr: sum by (resource,group,version) ((round(increase(kubevirt_api_request_deprecated_total{verb!~"LIST|WATCH"}[10m]))
            > 0 and kubevirt_api_request_deprecated_total{verb!~"LIST|WATCH"} offset 10m)
            or (kubevirt_api_request_deprecated_total{verb!~"LIST|WATCH"} != 0 unless kubevirt_api_request_deprecated_total{verb!~"LIST|WATCH"}
            offset 10m))
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: info
        - alert: OutdatedVirtualMachineInstanceWorkloads
          annotations:
            runbook_url: https://kubevirt.io/monitoring/runbooks/OutdatedVirtualMachineInstanceWorkloads
            summary: Some running VMIs are still active in outdated pods after KubeVirt
              control plane update has completed.
          expr: kubevirt_vmi_number_of_outdated != 0
          for: 1440m
          labels:
            kubernetes_operator_component: kubevirt
            kubernetes_operator_part_of: kubevirt
            operator_health_impact: none
            severity: warning
    longhorn-system-prometheus-longhorn-rules-5335b8d1-9ace-4524-b730-d90eaa8871bb.yaml: |
      groups:
      - name: longhorn.rules
        rules:
        - alert: LonghornVolumeActualSpaceUsedWarning
          annotations:
            description: The actual space used by Longhorn volume on node is at 90% capacity
              for more than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: The actual used space of Longhorn volume is over 90% of the capacity.
          expr: (longhorn_volume_actual_size_bytes / longhorn_volume_capacity_bytes) * 100
            > 90
          for: 5m
          labels:
            issue: The actual used space of Longhorn volume on is high.
            severity: warning
        - alert: LonghornVolumeStatusCritical
          annotations:
            description: Longhorn volume on is Fault for more than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: Longhorn volume is Fault
          expr: longhorn_volume_robustness == 3
          for: 5m
          labels:
            issue: Longhorn volume  is Fault.
            severity: critical
        - alert: LonghornVolumeStatusWarning
          annotations:
            description: Longhorn volume is Degraded for more than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: Longhorn volume is Degraded
          expr: longhorn_volume_robustness == 2
          for: 5m
          labels:
            issue: Longhorn volume is Degraded.
            severity: warning
        - alert: LonghornNodeStorageWarning
          annotations:
            description: The used storage of node is at 70% capacity for more than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: The used storage of node is over 70% of the capacity.
          expr: (longhorn_node_storage_usage_bytes / longhorn_node_storage_capacity_bytes)
            * 100 > 70
          for: 5m
          labels:
            issue: The used storage of node is high.
            severity: warning
        - alert: LonghornDiskStorageWarning
          annotations:
            description: The used storage of disk is at 70% capacity for more than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: The used storage of disk is over 70% of the capacity.
          expr: (longhorn_disk_usage_bytes / longhorn_disk_capacity_bytes) * 100 > 70
          for: 5m
          labels:
            issue: The used storage of disk on node is high.
            severity: warning
        - alert: LonghornNodeDown
          annotations:
            description: There are Longhorn nodes which have been offline for more than
              5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: Longhorn nodes is offline
          expr: (avg(longhorn_node_count_total) or on() vector(0)) - (count(longhorn_node_status{condition="ready"}
            == 1) or on() vector(0)) > 0
          for: 5m
          labels:
            issue: There are Longhorn nodes are offline
            severity: critical
        - alert: LonghornIntanceManagerCPUUsageWarning
          annotations:
            description: Longhorn instance manager has CPU Usage / CPU request is over 300%
              for more than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: Longhorn instance manager has CPU Usage / CPU request is over 300%.
          expr: (longhorn_instance_manager_cpu_usage_millicpu/longhorn_instance_manager_cpu_requests_millicpu)
            * 100 > 300
          for: 5m
          labels:
            issue: Longhorn instance manager on consumes 3 times the CPU request.
            severity: warning
        - alert: LonghornNodeCPUUsageWarning
          annotations:
            description: Longhorn node has CPU Usage / CPU capacity is over 90% for more
              than 5 minutes.
            runbook_url: https://longhorn.io/docs/1.3.0/monitoring/metrics/
            summary: Longhorn node experiences high CPU pressure for more than 5m.
          expr: (longhorn_node_cpu_usage_millicpu / longhorn_node_cpu_capacity_millicpu)
            * 100 > 90
          for: 5m
          labels:
            issue: Longhorn node experiences high CPU pressure.
            severity: warning
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-08-06T01:57:04Z"
    labels:
      managed-by: prometheus-operator
      prometheus-name: rancher-monitoring-prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:cattle-monitoring-system-rancher-monitoring-alertmanager.rules-965c5c7d-6579-4e7a-b54b-e3ddd0669ece.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-config-reloaders-b91ec321-26b4-4c38-abbf-e0e99a7c11c9.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-general.rules-9d5d6b8f-60c1-4f7d-83ae-75c6a93cde1f.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-k8s.rules-d2a73a80-b03f-4b94-8e38-f413a0eccb38.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-apiserver-availability.rules-f6419d92-db04-4b4a-bd83-d7b5f0fc44be.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-apiserver-burnrate.rules-af2db6c7-2d1c-4f76-97d4-97724eed3ea8.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-apiserver-histogram.rules-0112930d-9e54-45e3-b9d4-ef3914cb5081.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-apiserver-slos-52ed3618-2034-45f4-b470-fabd4ad7cfda.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-prometheus-general.rules-bfc88cb3-815e-4817-ba19-3cc7dc6181d4.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-prometheus-node-recording.rules-3e6655c9-ed17-406b-80f5-cb61b38de6a9.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kube-state-metrics-d842120f-30fe-422b-90cf-4b973401b96d.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubelet.rules-91aea60d-5bc2-4c0e-821c-22d9040186f0.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubernetes-apps-08d7d1be-8744-4cf5-8f0a-33b0cdfb5d0c.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubernetes-resources-0678fd1e-3beb-4224-9050-a0f911c37e0e.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubernetes-storage-f87da777-7b55-464b-99cf-0a6e74aadc3c.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubernetes-system-05e631bf-dcfd-4210-b57a-4d5776a69313.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubernetes-system-apiserver-06b6e8a8-2325-4aef-b3ae-1e5a98715f62.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-kubernetes-system-kubelet-273f30de-f168-42e2-8436-f45deed67dad.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-node-exporter-77d3e254-35f4-4e20-8130-4efc8222178b.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-node-exporter.rules-a0f0edf1-3ae2-4f35-89a7-cd3a3b8b0eb1.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-node-network-b07e9c8d-e999-4729-85d6-d3683f6d06c1.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-node.rules-7ea0d4ff-2825-46b5-afdb-1ca2f52303c3.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-prometheus-a11e00df-7a03-44b2-935d-172d396e536c.yaml: {}
          f:cattle-monitoring-system-rancher-monitoring-prometheus-operator-a6be5003-c44f-4533-a560-e03d9676909f.yaml: {}
          f:harvester-system-prometheus-kubevirt-rules-3e77fd4a-7c48-47e3-b26a-15eb73f0e9e8.yaml: {}
          f:longhorn-system-prometheus-longhorn-rules-5335b8d1-9ace-4524-b730-d90eaa8871bb.yaml: {}
        f:metadata:
          f:labels:
            .: {}
            f:managed-by: {}
            f:prometheus-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"586d1b69-c991-4a35-b61e-a9a0be9bf1f5"}: {}
      manager: PrometheusOperator
      operation: Update
      time: "2024-08-06T01:57:04Z"
    name: prometheus-rancher-monitoring-prometheus-rulefiles-0
    namespace: cattle-monitoring-system
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: rancher-monitoring-prometheus
      uid: 586d1b69-c991-4a35-b61e-a9a0be9bf1f5
    resourceVersion: "8103"
    uid: 1dc48edc-1b66-4ca9-8b26-804711d1edb4
- apiVersion: v1
  data:
    crd-manifest.tgz.b64: 
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring-crd
      meta.helm.sh/release-namespace: cattle-monitoring-system
      objectset.rio.cattle.io/id: default-mcc-rancher-monitoring-crd-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:54:23Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      objectset.rio.cattle.io/hash: 2da503261617e9ea2da822d2da7cdcfccad847a9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:crd-manifest.tgz.b64: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
            f:objectset.rio.cattle.io/hash: {}
      manager: fleetagent
      operation: Update
      time: "2024-08-06T01:54:23Z"
    name: rancher-monitoring-crd-manifest
    namespace: cattle-monitoring-system
    resourceVersion: "3231"
    uid: 9ea5a84b-efb6-402e-8fe9-4f767c219733
- apiVersion: v1
  data:
    grafana.ini: |
      [analytics]
      check_for_updates = true
      [auth]
      disable_login_form = false
      [auth.anonymous]
      enabled = true
      org_role = Viewer
      [auth.basic]
      enabled = false
      [dashboards]
      default_home_dashboard_path = /tmp/dashboards/rancher-default-home.json
      [grafana_net]
      url = https://grafana.net
      [log]
      mode = console
      [paths]
      data = /var/lib/grafana/
      logs = /var/log/grafana
      plugins = /var/lib/grafana/plugins
      provisioning = /etc/grafana/provisioning
      [security]
      allow_embedding = true
      [server]
      domain = ''
      [users]
      auto_assign_org_role = Viewer
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 9.1.5
      helm.sh/chart: grafana-6.59.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:grafana.ini: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
    resourceVersion: "7574"
    uid: 333fe6dc-01a7-4e27-b5aa-54fbeca1630f
- apiVersion: v1
  data:
    provider.yaml: |-
      apiVersion: 1
      providers:
        - name: 'sidecarProvider'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          allowUiUpdates: false
          updateIntervalSeconds: 30
          options:
            foldersFromFilesStructure: false
            path: /tmp/dashboards
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 9.1.5
      helm.sh/chart: grafana-6.59.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:provider.yaml: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: rancher-monitoring-grafana-config-dashboards
    namespace: cattle-monitoring-system
    resourceVersion: "7573"
    uid: da7f0a38-aea4-48c4-a075-e30bb1ac1cb4
- apiVersion: v1
  data:
    datasource.yaml: |-
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        url: http://rancher-monitoring-prometheus.cattle-monitoring-system:9090/
        access: proxy
        isDefault: true
        jsonData:
          httpMethod: POST
          timeInterval: 1m
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app: rancher-monitoring-grafana
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: rancher-monitoring
      app.kubernetes.io/version: 103.0.3_up45.31.1
      chart: rancher-monitoring-103.0.3_up45.31.1
      grafana_datasource: "1"
      heritage: Helm
      release: rancher-monitoring
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:datasource.yaml: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:chart: {}
            f:grafana_datasource: {}
            f:heritage: {}
            f:release: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: rancher-monitoring-grafana-datasource
    namespace: cattle-monitoring-system
    resourceVersion: "7577"
    uid: 16d3fc6c-d86d-4155-873a-9b5ace7dc75d
- apiVersion: v1
  data:
    grafana-overview.json: |-
      {
          "annotations": {
              "list": [
                  {
                      "builtIn": 1,
                      "datasource": "-- Grafana --",
                      "enable": true,
                      "hide": true,
                      "iconColor": "rgba(0, 211, 255, 1)",
                      "name": "Annotations & Alerts",
                      "target": {
                          "limit": 100,
                          "matchAny": false,
                          "tags": [

                          ],
                          "type": "dashboard"
                      },
                      "type": "dashboard"
                  }
              ]
          },
          "editable": true,
          "gnetId": null,
          "graphTooltip": 0,
          "id": 3085,
          "iteration": 1631554945276,
          "links": [

          ],
          "panels": [
              {
                  "datasource": "$datasource",
                  "fieldConfig": {
                      "defaults": {
                          "mappings": [

                          ],
                          "noValue": "0",
                          "thresholds": {
                              "mode": "absolute",
                              "steps": [
                                  {
                                      "color": "green",
                                      "value": null
                                  },
                                  {
                                      "color": "red",
                                      "value": 80
                                  }
                              ]
                          }
                      },
                      "overrides": [

                      ]
                  },
                  "gridPos": {
                      "h": 5,
                      "w": 6,
                      "x": 0,
                      "y": 0
                  },
                  "id": 6,
                  "options": {
                      "colorMode": "value",
                      "graphMode": "area",
                      "justifyMode": "auto",
                      "orientation": "auto",
                      "reduceOptions": {
                          "calcs": [
                              "mean"
                          ],
                          "fields": "",
                          "values": false
                      },
                      "text": {

                      },
                      "textMode": "auto"
                  },
                  "pluginVersion": "8.1.3",
                  "targets": [
                      {
                          "expr": "grafana_alerting_result_total{job=~\"$job\", instance=~\"$instance\", state=\"alerting\"}",
                          "instant": true,
                          "interval": "",
                          "legendFormat": "",
                          "refId": "A"
                      }
                  ],
                  "timeFrom": null,
                  "timeShift": null,
                  "title": "Firing Alerts",
                  "type": "stat"
              },
              {
                  "datasource": "$datasource",
                  "fieldConfig": {
                      "defaults": {
                          "mappings": [

                          ],
                          "thresholds": {
                              "mode": "absolute",
                              "steps": [
                                  {
                                      "color": "green",
                                      "value": null
                                  },
                                  {
                                      "color": "red",
                                      "value": 80
                                  }
                              ]
                          }
                      },
                      "overrides": [

                      ]
                  },
                  "gridPos": {
                      "h": 5,
                      "w": 6,
                      "x": 6,
                      "y": 0
                  },
                  "id": 8,
                  "options": {
                      "colorMode": "value",
                      "graphMode": "area",
                      "justifyMode": "auto",
                      "orientation": "auto",
                      "reduceOptions": {
                          "calcs": [
                              "mean"
                          ],
                          "fields": "",
                          "values": false
                      },
                      "text": {

                      },
                      "textMode": "auto"
                  },
                  "pluginVersion": "8.1.3",
                  "targets": [
                      {
                          "expr": "sum(grafana_stat_totals_dashboard{job=~\"$job\", instance=~\"$instance\"})",
                          "interval": "",
                          "legendFormat": "",
                          "refId": "A"
                      }
                  ],
                  "timeFrom": null,
                  "timeShift": null,
                  "title": "Dashboards",
                  "type": "stat"
              },
              {
                  "datasource": "$datasource",
                  "fieldConfig": {
                      "defaults": {
                          "custom": {
                              "align": null,
                              "displayMode": "auto"
                          },
                          "mappings": [

                          ],
                          "thresholds": {
                              "mode": "absolute",
                              "steps": [
                                  {
                                      "color": "green",
                                      "value": null
                                  },
                                  {
                                      "color": "red",
                                      "value": 80
                                  }
                              ]
                          }
                      },
                      "overrides": [

                      ]
                  },
                  "gridPos": {
                      "h": 5,
                      "w": 12,
                      "x": 12,
                      "y": 0
                  },
                  "id": 10,
                  "options": {
                      "showHeader": true
                  },
                  "pluginVersion": "8.1.3",
                  "targets": [
                      {
                          "expr": "grafana_build_info{job=~\"$job\", instance=~\"$instance\"}",
                          "instant": true,
                          "interval": "",
                          "legendFormat": "",
                          "refId": "A"
                      }
                  ],
                  "timeFrom": null,
                  "timeShift": null,
                  "title": "Build Info",
                  "transformations": [
                      {
                          "id": "labelsToFields",
                          "options": {

                          }
                      },
                      {
                          "id": "organize",
                          "options": {
                              "excludeByName": {
                                  "Time": true,
                                  "Value": true,
                                  "branch": true,
                                  "container": true,
                                  "goversion": true,
                                  "namespace": true,
                                  "pod": true,
                                  "revision": true
                              },
                              "indexByName": {
                                  "Time": 7,
                                  "Value": 11,
                                  "branch": 4,
                                  "container": 8,
                                  "edition": 2,
                                  "goversion": 6,
                                  "instance": 1,
                                  "job": 0,
                                  "namespace": 9,
                                  "pod": 10,
                                  "revision": 5,
                                  "version": 3
                              },
                              "renameByName": {

                              }
                          }
                      }
                  ],
                  "type": "table"
              },
              {
                  "aliasColors": {

                  },
                  "bars": false,
                  "dashLength": 10,
                  "dashes": false,
                  "datasource": "$datasource",
                  "fieldConfig": {
                      "defaults": {
                          "links": [

                          ]
                      },
                      "overrides": [

                      ]
                  },
                  "fill": 1,
                  "fillGradient": 0,
                  "gridPos": {
                      "h": 8,
                      "w": 12,
                      "x": 0,
                      "y": 5
                  },
                  "hiddenSeries": false,
                  "id": 2,
                  "legend": {
                      "avg": false,
                      "current": false,
                      "max": false,
                      "min": false,
                      "show": true,
                      "total": false,
                      "values": false
                  },
                  "lines": true,
                  "linewidth": 1,
                  "nullPointMode": "null",
                  "options": {
                      "alertThreshold": true
                  },
                  "percentage": false,
                  "pluginVersion": "8.1.3",
                  "pointradius": 2,
                  "points": false,
                  "renderer": "flot",
                  "seriesOverrides": [

                  ],
                  "spaceLength": 10,
                  "stack": true,
                  "steppedLine": false,
                  "targets": [
                      {
                          "expr": "sum by (status_code) (irate(grafana_http_request_duration_seconds_count{job=~\"$job\", instance=~\"$instance\"}[1m])) ",
                          "interval": "",
                          "legendFormat": "{{status_code}}",
                          "refId": "A"
                      }
                  ],
                  "thresholds": [

                  ],
                  "timeFrom": null,
                  "timeRegions": [

                  ],
                  "timeShift": null,
                  "title": "RPS",
                  "tooltip": {
                      "shared": true,
                      "sort": 0,
                      "value_type": "individual"
                  },
                  "type": "graph",
                  "xaxis": {
                      "buckets": null,
                      "mode": "time",
                      "name": null,
                      "show": true,
                      "values": [

                      ]
                  },
                  "yaxes": [
                      {
                          "$$hashKey": "object:157",
                          "format": "reqps",
                          "label": null,
                          "logBase": 1,
                          "max": null,
                          "min": null,
                          "show": true
                      },
                      {
                          "$$hashKey": "object:158",
                          "format": "short",
                          "label": null,
                          "logBase": 1,
                          "max": null,
                          "min": null,
                          "show": false
                      }
                  ],
                  "yaxis": {
                      "align": false,
                      "alignLevel": null
                  }
              },
              {
                  "aliasColors": {

                  },
                  "bars": false,
                  "dashLength": 10,
                  "dashes": false,
                  "datasource": "$datasource",
                  "fieldConfig": {
                      "defaults": {
                          "links": [

                          ]
                      },
                      "overrides": [

                      ]
                  },
                  "fill": 1,
                  "fillGradient": 0,
                  "gridPos": {
                      "h": 8,
                      "w": 12,
                      "x": 12,
                      "y": 5
                  },
                  "hiddenSeries": false,
                  "id": 4,
                  "legend": {
                      "avg": false,
                      "current": false,
                      "max": false,
                      "min": false,
                      "show": true,
                      "total": false,
                      "values": false
                  },
                  "lines": true,
                  "linewidth": 1,
                  "nullPointMode": "null",
                  "options": {
                      "alertThreshold": true
                  },
                  "percentage": false,
                  "pluginVersion": "8.1.3",
                  "pointradius": 2,
                  "points": false,
                  "renderer": "flot",
                  "seriesOverrides": [

                  ],
                  "spaceLength": 10,
                  "stack": false,
                  "steppedLine": false,
                  "targets": [
                      {
                          "exemplar": true,
                          "expr": "histogram_quantile(0.99, sum(irate(grafana_http_request_duration_seconds_bucket{instance=~\"$instance\", job=~\"$job\"}[$__rate_interval])) by (le)) * 1",
                          "interval": "",
                          "legendFormat": "99th Percentile",
                          "refId": "A"
                      },
                      {
                          "exemplar": true,
                          "expr": "histogram_quantile(0.50, sum(irate(grafana_http_request_duration_seconds_bucket{instance=~\"$instance\", job=~\"$job\"}[$__rate_interval])) by (le)) * 1",
                          "interval": "",
                          "legendFormat": "50th Percentile",
                          "refId": "B"
                      },
                      {
                          "exemplar": true,
                          "expr": "sum(irate(grafana_http_request_duration_seconds_sum{instance=~\"$instance\", job=~\"$job\"}[$__rate_interval])) * 1 / sum(irate(grafana_http_request_duration_seconds_count{instance=~\"$instance\", job=~\"$job\"}[$__rate_interval]))",
                          "interval": "",
                          "legendFormat": "Average",
                          "refId": "C"
                      }
                  ],
                  "thresholds": [

                  ],
                  "timeFrom": null,
                  "timeRegions": [

                  ],
                  "timeShift": null,
                  "title": "Request Latency",
                  "tooltip": {
                      "shared": true,
                      "sort": 0,
                      "value_type": "individual"
                  },
                  "type": "graph",
                  "xaxis": {
                      "buckets": null,
                      "mode": "time",
                      "name": null,
                      "show": true,
                      "values": [

                      ]
                  },
                  "yaxes": [
                      {
                          "$$hashKey": "object:210",
                          "format": "ms",
                          "label": null,
                          "logBase": 1,
                          "max": null,
                          "min": null,
                          "show": true
                      },
                      {
                          "$$hashKey": "object:211",
                          "format": "short",
                          "label": null,
                          "logBase": 1,
                          "max": null,
                          "min": null,
                          "show": true
                      }
                  ],
                  "yaxis": {
                      "align": false,
                      "alignLevel": null
                  }
              }
          ],
          "schemaVersion": 30,
          "style": "dark",
          "tags": [

          ],
          "templating": {
              "list": [
                  {
                      "current": {
                          "text": "Prometheus",
                          "value": "Prometheus"
                      },
                      "description": null,
                      "error": null,
                      "hide": 0,
                      "includeAll": false,
                      "label": "Data Source",
                      "multi": false,
                      "name": "datasource",
                      "options": [

                      ],
                      "query": "prometheus",
                      "queryValue": "",
                      "refresh": 1,
                      "regex": "",
                      "skipUrlSync": false,
                      "type": "datasource"
                  },
                  {
                      "allValue": ".*",
                      "current": {
                          "selected": false,
                          "text": [
                              "default/grafana"
                          ],
                          "value": [
                              "default/grafana"
                          ]
                      },
                      "datasource": "$datasource",
                      "definition": "label_values(grafana_build_info, job)",
                      "description": null,
                      "error": null,
                      "hide": 0,
                      "includeAll": true,
                      "label": null,
                      "multi": true,
                      "name": "job",
                      "options": [

                      ],
                      "query": {
                          "query": "label_values(grafana_build_info, job)",
                          "refId": "Billing Admin-job-Variable-Query"
                      },
                      "refresh": 1,
                      "regex": "",
                      "skipUrlSync": false,
                      "sort": 0,
                      "tagValuesQuery": "",
                      "tagsQuery": "",
                      "type": "query",
                      "useTags": false
                  },
                  {
                      "allValue": ".*",
                      "current": {
                          "selected": false,
                          "text": "All",
                          "value": "$__all"
                      },
                      "datasource": "$datasource",
                      "definition": "label_values(grafana_build_info, instance)",
                      "description": null,
                      "error": null,
                      "hide": 0,
                      "includeAll": true,
                      "label": null,
                      "multi": true,
                      "name": "instance",
                      "options": [

                      ],
                      "query": {
                          "query": "label_values(grafana_build_info, instance)",
                          "refId": "Billing Admin-instance-Variable-Query"
                      },
                      "refresh": 1,
                      "regex": "",
                      "skipUrlSync": false,
                      "sort": 0,
                      "tagValuesQuery": "",
                      "tagsQuery": "",
                      "type": "query",
                      "useTags": false
                  }
              ]
          },
          "time": {
              "from": "now-6h",
              "to": "now"
          },
          "timepicker": {
              "refresh_intervals": [
                  "10s",
                  "30s",
                  "1m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "1d"
              ]
          },
          "timezone": "utc",
          "title": "Grafana Overview",
          "uid": "6be0s85Mk",
          "version": 2
      }
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app: rancher-monitoring-grafana
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: rancher-monitoring
      app.kubernetes.io/version: 103.0.3_up45.31.1
      chart: rancher-monitoring-103.0.3_up45.31.1
      grafana_dashboard: "1"
      heritage: Helm
      release: rancher-monitoring
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:grafana-overview.json: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:chart: {}
            f:grafana_dashboard: {}
            f:heritage: {}
            f:release: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: rancher-monitoring-grafana-overview
    namespace: cattle-monitoring-system
    resourceVersion: "7581"
    uid: 27c7824c-3c9f-4a14-851d-dce6719777f1
- apiVersion: v1
  data:
    nodes-darwin.json: |-
      {
          "__inputs": [

          ],
          "__requires": [

          ],
          "annotations": {
              "list": [

              ]
          },
          "editable": false,
          "gnetId": null,
          "graphTooltip": 1,
          "hideControls": false,
          "id": null,
          "links": [

          ],
          "refresh": "30s",
          "rows": [
              {
                  "collapse": false,
                  "collapsed": false,
                  "panels": [
                      {
                          "aliasColors": {

                          },
                          "bars": false,
                          "dashLength": 10,
                          "dashes": false,
                          "datasource": "$datasource",
                          "fill": 1,
                          "fillGradient": 0,
                          "gridPos": {

                          },
                          "id": 2,
                          "legend": {
                              "alignAsTable": false,
                              "avg": false,
                              "current": false,
                              "max": false,
                              "min": false,
                              "rightSide": false,
                              "show": true,
                              "sideWidth": null,
                              "total": false,
                              "values": false
                          },
                          "lines": true,
                          "linewidth": 1,
                          "links": [

                          ],
                          "nullPointMode": "null",
                          "percentage": false,
                          "pointradius": 5,
                          "points": false,
                          "renderer": "flot",
                          "repeat": null,
                          "seriesOverrides": [

                          ],
                          "spaceLength": 10,
                          "span": 6,
                          "stack": true,
                          "steppedLine": false,
                          "targets": [
                              {
                                  "expr": "(\n  (1 - sum without (mode) (rate(node_cpu_seconds_total{job=\"node-exporter\", mode=~\"idle|iowait|steal\", instance=\"$instance\"}[$__rate_interval])))\n/ ignoring(cpu) group_left\n  count without (cpu, mode) (node_cpu_seconds_total{job=\"node-exporter\", mode=\"idle\", instance=\"$instance\"})\n)\n",
                                  "format": "time_series",
                                  "intervalFactor": 5,
                                  "legendFormat": "{{cpu}}",
                                  "refId": "A"
                              }
                          ],
                          "thresholds": [

                          ],
                          "timeFrom": null,
                          "timeShift": null,
                          "title": "CPU Usage",
                          "tooltip": {
                              "shared": true,
                              "sort": 0,
                              "value_type": "individual"
                          },
                          "type": "graph",
                          "xaxis": {
                              "buckets": null,
                              "mode": "time",
                              "name": null,
                              "show": true,
                              "values": [

                              ]
                          },
                          "yaxes": [
                              {
                                  "format": "percentunit",
                                  "label": null,
                                  "logBase": 1,
                                  "max": 1,
                                  "min": 0,
                                  "show": true
                              },
                              {
                                  "format": "percentunit",
                                  "label": null,
                                  "logBase": 1,
                                  "max": 1,
                                  "min": 0,
                                  "show": true
                              }
                          ]
                      },
                      {
                          "aliasColors": {

                          },
                          "bars": false,
                          "dashLength": 10,
                          "dashes": false,
                          "datasource": "$datasource",
                          "fill": 0,
                          "fillGradient": 0,
                          "gridPos": {

                          },
                          "id": 3,
                          "legend": {
                              "alignAsTable": false,
                              "avg": false,
                              "current": false,
                              "max": false,
                              "min": false,
                              "rightSide": false,
                              "show": true,
                              "sideWidth": null,
                              "total": false,
                              "values": false
                          },
                          "lines": true,
                          "linewidth": 1,
                          "links": [

                          ],
                          "nullPointMode": "null",
                          "percentage": false,
                          "pointradius": 5,
                          "points": false,
                          "renderer": "flot",
                          "repeat": null,
                          "seriesOverrides": [

                          ],
                          "spaceLength": 10,
                          "span": 6,
                          "stack": false,
                          "steppedLine": false,
                          "targets": [
                              {
                                  "expr": "node_load1{job=\"node-exporter\", instance=\"$instance\"}",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "1m load average",
                                  "refId": "A"
                              },
                              {
                                  "expr": "node_load5{job=\"node-exporter\", instance=\"$instance\"}",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "5m load average",
                                  "refId": "B"
                              },
                              {
                                  "expr": "node_load15{job=\"node-exporter\", instance=\"$instance\"}",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "15m load average",
                                  "refId": "C"
                              },
                              {
                                  "expr": "count(node_cpu_seconds_total{job=\"node-exporter\", instance=\"$instance\", mode=\"idle\"})",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "logical cores",
                                  "refId": "D"
                              }
                          ],
                          "thresholds": [

                          ],
                          "timeFrom": null,
                          "timeShift": null,
                          "title": "Load Average",
                          "tooltip": {
                              "shared": true,
                              "sort": 0,
                              "value_type": "individual"
                          },
                          "type": "graph",
                          "xaxis": {
                              "buckets": null,
                              "mode": "time",
                              "name": null,
                              "show": true,
                              "values": [

                              ]
                          },
                          "yaxes": [
                              {
                                  "format": "short",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              },
                              {
                                  "format": "short",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              }
                          ]
                      }
                  ],
                  "repeat": null,
                  "repeatIteration": null,
                  "repeatRowId": null,
                  "showTitle": true,
                  "title": "CPU",
                  "titleSize": "h6",
                  "type": "row"
              },
              {
                  "collapse": false,
                  "collapsed": false,
                  "panels": [
                      {
                          "aliasColors": {

                          },
                          "bars": false,
                          "dashLength": 10,
                          "dashes": false,
                          "datasource": "$datasource",
                          "fill": 1,
                          "fillGradient": 0,
                          "gridPos": {

                          },
                          "id": 4,
                          "legend": {
                              "alignAsTable": false,
                              "avg": false,
                              "current": false,
                              "max": false,
                              "min": false,
                              "rightSide": false,
                              "show": true,
                              "sideWidth": null,
                              "total": false,
                              "values": false
                          },
                          "lines": true,
                          "linewidth": 1,
                          "links": [

                          ],
                          "nullPointMode": "null",
                          "percentage": false,
                          "pointradius": 5,
                          "points": false,
                          "renderer": "flot",
                          "repeat": null,
                          "seriesOverrides": [

                          ],
                          "spaceLength": 10,
                          "span": 9,
                          "stack": false,
                          "steppedLine": false,
                          "targets": [
                              {
                                  "expr": "node_memory_total_bytes{job=\"node-exporter\", instance=\"$instance\"}",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "Physical Memory",
                                  "refId": "A"
                              },
                              {
                                  "expr": "(\n    node_memory_internal_bytes{job=\"node-exporter\", instance=\"$instance\"} -\n    node_memory_purgeable_bytes{job=\"node-exporter\", instance=\"$instance\"} +\n    node_memory_wired_bytes{job=\"node-exporter\", instance=\"$instance\"} +\n    node_memory_compressed_bytes{job=\"node-exporter\", instance=\"$instance\"}\n)\n",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "Memory Used",
                                  "refId": "B"
                              },
                              {
                                  "expr": "(\n    node_memory_internal_bytes{job=\"node-exporter\", instance=\"$instance\"} -\n    node_memory_purgeable_bytes{job=\"node-exporter\", instance=\"$instance\"}\n)\n",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "App Memory",
                                  "refId": "C"
                              },
                              {
                                  "expr": "node_memory_wired_bytes{job=\"node-exporter\", instance=\"$instance\"}",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "Wired Memory",
                                  "refId": "D"
                              },
                              {
                                  "expr": "node_memory_compressed_bytes{job=\"node-exporter\", instance=\"$instance\"}",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": "Compressed",
                                  "refId": "E"
                              }
                          ],
                          "thresholds": [

                          ],
                          "timeFrom": null,
                          "timeShift": null,
                          "title": "Memory Usage",
                          "tooltip": {
                              "shared": true,
                              "sort": 0,
                              "value_type": "individual"
                          },
                          "type": "graph",
                          "xaxis": {
                              "buckets": null,
                              "mode": "time",
                              "name": null,
                              "show": true,
                              "values": [

                              ]
                          },
                          "yaxes": [
                              {
                                  "format": "bytes",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              },
                              {
                                  "format": "bytes",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              }
                          ]
                      },
                      {
                          "datasource": "$datasource",
                          "fieldConfig": {
                              "defaults": {
                                  "max": 100,
                                  "min": 0,
                                  "thresholds": {
                                      "mode": "absolute",
                                      "steps": [
                                          {
                                              "color": "rgba(50, 172, 45, 0.97)"
                                          },
                                          {
                                              "color": "rgba(237, 129, 40, 0.89)",
                                              "value": 80
                                          },
                                          {
                                              "color": "rgba(245, 54, 54, 0.9)",
                                              "value": 90
                                          }
                                      ]
                                  },
                                  "unit": "percent"
                              }
                          },
                          "gridPos": {

                          },
                          "id": 5,
                          "span": 3,
                          "targets": [
                              {
                                  "expr": "(\n    (\n      avg(node_memory_internal_bytes{job=\"node-exporter\", instance=\"$instance\"}) -\n      avg(node_memory_purgeable_bytes{job=\"node-exporter\", instance=\"$instance\"}) +\n      avg(node_memory_wired_bytes{job=\"node-exporter\", instance=\"$instance\"}) +\n      avg(node_memory_compressed_bytes{job=\"node-exporter\", instance=\"$instance\"})\n    ) /\n    avg(node_memory_total_bytes{job=\"node-exporter\", instance=\"$instance\"})\n)\n*\n100\n",
                                  "format": "time_series",
                                  "intervalFactor": 2,
                                  "legendFormat": ""
                              }
                          ],
                          "title": "Memory Usage",
                          "transparent": false,
                          "type": "gauge"
                      }
                  ],
                  "repeat": null,
                  "repeatIteration": null,
                  "repeatRowId": null,
                  "showTitle": true,
                  "title": "Memory",
                  "titleSize": "h6",
                  "type": "row"
              },
              {
                  "collapse": false,
                  "collapsed": false,
                  "panels": [
                      {
                          "aliasColors": {

                          },
                          "bars": false,
                          "dashLength": 10,
                          "dashes": false,
                          "datasource": "$datasource",
                          "fill": 0,
                          "fillGradient": 0,
                          "gridPos": {

                          },
                          "id": 6,
                          "legend": {
                              "alignAsTable": false,
                              "avg": false,
                              "current": false,
                              "max": false,
                              "min": false,
                              "rightSide": false,
                              "show": true,
                              "sideWidth": null,
                              "total": false,
                              "values": false
                          },
                          "lines": true,
                          "linewidth": 1,
                          "links": [

                          ],
                          "nullPointMode": "null",
                          "percentage": false,
                          "pointradius": 5,
                          "points": false,
                          "renderer": "flot",
                          "repeat": null,
                          "seriesOverrides": [
                              {
                                  "alias": "/ read| written/",
                                  "yaxis": 1
                              },
                              {
                                  "alias": "/ io time/",
                                  "yaxis": 2
                              }
                          ],
                          "spaceLength": 10,
                          "span": 6,
                          "stack": false,
                          "steppedLine": false,
                          "targets": [
                              {
                                  "expr": "rate(node_disk_read_bytes_total{job=\"node-exporter\", instance=\"$instance\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])",
                                  "format": "time_series",
                                  "intervalFactor": 1,
                                  "legendFormat": "{{device}} read",
                                  "refId": "A"
                              },
                              {
                                  "expr": "rate(node_disk_written_bytes_total{job=\"node-exporter\", instance=\"$instance\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])",
                                  "format": "time_series",
                                  "intervalFactor": 1,
                                  "legendFormat": "{{device}} written",
                                  "refId": "B"
                              },
                              {
                                  "expr": "rate(node_disk_io_time_seconds_total{job=\"node-exporter\", instance=\"$instance\", device=~\"(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dm-.+|md.+|dasd.+)\"}[$__rate_interval])",
                                  "format": "time_series",
                                  "intervalFactor": 1,
                                  "legendFormat": "{{device}} io time",
                                  "refId": "C"
                              }
                          ],
                          "thresholds": [

                          ],
                          "timeFrom": null,
                          "timeShift": null,
                          "title": "Disk I/O",
                          "tooltip": {
                              "shared": true,
                              "sort": 0,
                              "value_type": "individual"
                          },
                          "type": "graph",
                          "xaxis": {
                              "buckets": null,
                              "mode": "time",
                              "name": null,
                              "show": true,
                              "values": [

                              ]
                          },
                          "yaxes": [
                              {
                                  "format": "Bps",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": null,
                                  "show": true
                              },
                              {
                                  "format": "percentunit",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": null,
                                  "show": true
                              }
                          ]
                      },
                      {
                          "datasource": "$datasource",
                          "fieldConfig": {
                              "defaults": {
                                  "custom": {

                                  },
                                  "thresholds": {
                                      "mode": "absolute",
                                      "steps": [
                                          {
                                              "color": "green"
                                          },
                                          {
                                              "color": "yellow",
                                              "value": 0.8
                                          },
                                          {
                                              "color": "red",
                                              "value": 0.9
                                          }
                                      ]
                                  },
                                  "unit": "decbytes"
                              },
                              "overrides": [
                                  {
                                      "matcher": {
                                          "id": "byName",
                                          "options": "Mounted on"
                                      },
                                      "properties": [
                                          {
                                              "id": "custom.width",
                                              "value": 260
                                          }
                                      ]
                                  },
                                  {
                                      "matcher": {
                                          "id": "byName",
                                          "options": "Size"
                                      },
                                      "properties": [
                                          {
                                              "id": "custom.width",
                                              "value": 93
                                          }
                                      ]
                                  },
                                  {
                                      "matcher": {
                                          "id": "byName",
                                          "options": "Used"
                                      },
                                      "properties": [
                                          {
                                              "id": "custom.width",
                                              "value": 72
                                          }
                                      ]
                                  },
                                  {
                                      "matcher": {
                                          "id": "byName",
                                          "options": "Available"
                                      },
                                      "properties": [
                                          {
                                              "id": "custom.width",
                                              "value": 88
                                          }
                                      ]
                                  },
                                  {
                                      "matcher": {
                                          "id": "byName",
                                          "options": "Used, %"
                                      },
                                      "properties": [
                                          {
                                              "id": "unit",
                                              "value": "percentunit"
                                          },
                                          {
                                              "id": "custom.displayMode",
                                              "value": "gradient-gauge"
                                          },
                                          {
                                              "id": "max",
                                              "value": 1
                                          },
                                          {
                                              "id": "min",
                                              "value": 0
                                          }
                                      ]
                                  }
                              ]
                          },
                          "gridPos": {

                          },
                          "id": 7,
                          "span": 6,
                          "targets": [
                              {
                                  "expr": "max by (mountpoint) (node_filesystem_size_bytes{job=\"node-exporter\", instance=\"$instance\", fstype!=\"\", mountpoint!=\"\"})\n",
                                  "format": "table",
                                  "instant": true,
                                  "intervalFactor": 2,
                                  "legendFormat": ""
                              },
                              {
                                  "expr": "max by (mountpoint) (node_filesystem_avail_bytes{job=\"node-exporter\", instance=\"$instance\", fstype!=\"\", mountpoint!=\"\"})\n",
                                  "format": "table",
                                  "instant": true,
                                  "intervalFactor": 2,
                                  "legendFormat": ""
                              }
                          ],
                          "title": "Disk Space Usage",
                          "transformations": [
                              {
                                  "id": "groupBy",
                                  "options": {
                                      "fields": {
                                          "Value #A": {
                                              "aggregations": [
                                                  "lastNotNull"
                                              ],
                                              "operation": "aggregate"
                                          },
                                          "Value #B": {
                                              "aggregations": [
                                                  "lastNotNull"
                                              ],
                                              "operation": "aggregate"
                                          },
                                          "mountpoint": {
                                              "aggregations": [

                                              ],
                                              "operation": "groupby"
                                          }
                                      }
                                  }
                              },
                              {
                                  "id": "merge",
                                  "options": {

                                  }
                              },
                              {
                                  "id": "calculateField",
                                  "options": {
                                      "alias": "Used",
                                      "binary": {
                                          "left": "Value #A (lastNotNull)",
                                          "operator": "-",
                                          "reducer": "sum",
                                          "right": "Value #B (lastNotNull)"
                                      },
                                      "mode": "binary",
                                      "reduce": {
                                          "reducer": "sum"
                                      }
                                  }
                              },
                              {
                                  "id": "calculateField",
                                  "options": {
                                      "alias": "Used, %",
                                      "binary": {
                                          "left": "Used",
                                          "operator": "/",
                                          "reducer": "sum",
                                          "right": "Value #A (lastNotNull)"
                                      },
                                      "mode": "binary",
                                      "reduce": {
                                          "reducer": "sum"
                                      }
                                  }
                              },
                              {
                                  "id": "organize",
                                  "options": {
                                      "excludeByName": {

                                      },
                                      "indexByName": {

                                      },
                                      "renameByName": {
                                          "Value #A (lastNotNull)": "Size",
                                          "Value #B (lastNotNull)": "Available",
                                          "mountpoint": "Mounted on"
                                      }
                                  }
                              },
                              {
                                  "id": "sortBy",
                                  "options": {
                                      "fields": {

                                      },
                                      "sort": [
                                          {
                                              "field": "Mounted on"
                                          }
                                      ]
                                  }
                              }
                          ],
                          "transparent": false,
                          "type": "table"
                      }
                  ],
                  "repeat": null,
                  "repeatIteration": null,
                  "repeatRowId": null,
                  "showTitle": true,
                  "title": "Disk",
                  "titleSize": "h6",
                  "type": "row"
              },
              {
                  "collapse": false,
                  "collapsed": false,
                  "panels": [
                      {
                          "aliasColors": {

                          },
                          "bars": false,
                          "dashLength": 10,
                          "dashes": false,
                          "datasource": "$datasource",
                          "description": "Network received (bits/s)",
                          "fill": 0,
                          "fillGradient": 0,
                          "gridPos": {

                          },
                          "id": 8,
                          "legend": {
                              "alignAsTable": false,
                              "avg": false,
                              "current": false,
                              "max": false,
                              "min": false,
                              "rightSide": false,
                              "show": true,
                              "sideWidth": null,
                              "total": false,
                              "values": false
                          },
                          "lines": true,
                          "linewidth": 1,
                          "links": [

                          ],
                          "nullPointMode": "null",
                          "percentage": false,
                          "pointradius": 5,
                          "points": false,
                          "renderer": "flot",
                          "repeat": null,
                          "seriesOverrides": [

                          ],
                          "spaceLength": 10,
                          "span": 6,
                          "stack": false,
                          "steppedLine": false,
                          "targets": [
                              {
                                  "expr": "rate(node_network_receive_bytes_total{job=\"node-exporter\", instance=\"$instance\", device!=\"lo\"}[$__rate_interval]) * 8",
                                  "format": "time_series",
                                  "intervalFactor": 1,
                                  "legendFormat": "{{device}}",
                                  "refId": "A"
                              }
                          ],
                          "thresholds": [

                          ],
                          "timeFrom": null,
                          "timeShift": null,
                          "title": "Network Received",
                          "tooltip": {
                              "shared": true,
                              "sort": 0,
                              "value_type": "individual"
                          },
                          "type": "graph",
                          "xaxis": {
                              "buckets": null,
                              "mode": "time",
                              "name": null,
                              "show": true,
                              "values": [

                              ]
                          },
                          "yaxes": [
                              {
                                  "format": "bps",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              },
                              {
                                  "format": "bps",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              }
                          ]
                      },
                      {
                          "aliasColors": {

                          },
                          "bars": false,
                          "dashLength": 10,
                          "dashes": false,
                          "datasource": "$datasource",
                          "description": "Network transmitted (bits/s)",
                          "fill": 0,
                          "fillGradient": 0,
                          "gridPos": {

                          },
                          "id": 9,
                          "legend": {
                              "alignAsTable": false,
                              "avg": false,
                              "current": false,
                              "max": false,
                              "min": false,
                              "rightSide": false,
                              "show": true,
                              "sideWidth": null,
                              "total": false,
                              "values": false
                          },
                          "lines": true,
                          "linewidth": 1,
                          "links": [

                          ],
                          "nullPointMode": "null",
                          "percentage": false,
                          "pointradius": 5,
                          "points": false,
                          "renderer": "flot",
                          "repeat": null,
                          "seriesOverrides": [

                          ],
                          "spaceLength": 10,
                          "span": 6,
                          "stack": false,
                          "steppedLine": false,
                          "targets": [
                              {
                                  "expr": "rate(node_network_transmit_bytes_total{job=\"node-exporter\", instance=\"$instance\", device!=\"lo\"}[$__rate_interval]) * 8",
                                  "format": "time_series",
                                  "intervalFactor": 1,
                                  "legendFormat": "{{device}}",
                                  "refId": "A"
                              }
                          ],
                          "thresholds": [

                          ],
                          "timeFrom": null,
                          "timeShift": null,
                          "title": "Network Transmitted",
                          "tooltip": {
                              "shared": true,
                              "sort": 0,
                              "value_type": "individual"
                          },
                          "type": "graph",
                          "xaxis": {
                              "buckets": null,
                              "mode": "time",
                              "name": null,
                              "show": true,
                              "values": [

                              ]
                          },
                          "yaxes": [
                              {
                                  "format": "bps",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              },
                              {
                                  "format": "bps",
                                  "label": null,
                                  "logBase": 1,
                                  "max": null,
                                  "min": 0,
                                  "show": true
                              }
                          ]
                      }
                  ],
                  "repeat": null,
                  "repeatIteration": null,
                  "repeatRowId": null,
                  "showTitle": true,
                  "title": "Network",
                  "titleSize": "h6",
                  "type": "row"
              }
          ],
          "schemaVersion": 14,
          "style": "dark",
          "tags": [
              "node-exporter-mixin"
          ],
          "templating": {
              "list": [
                  {
                      "current": {
                          "text": "Prometheus",
                          "value": "Prometheus"
                      },
                      "hide": 0,
                      "label": "Data Source",
                      "name": "datasource",
                      "options": [

                      ],
                      "query": "prometheus",
                      "refresh": 1,
                      "regex": "",
                      "type": "datasource"
                  },
                  {
                      "allValue": null,
                      "current": {

                      },
                      "datasource": "$datasource",
                      "hide": 0,
                      "includeAll": false,
                      "label": "Instance",
                      "multi": false,
                      "name": "instance",
                      "options": [

                      ],
                      "query": "label_values(node_uname_info{job=\"node-exporter\", sysname=\"Darwin\"}, instance)",
                      "refresh": 2,
                      "regex": "",
                      "sort": 0,
                      "tagValuesQuery": "",
                      "tags": [

                      ],
                      "tagsQuery": "",
                      "type": "query",
                      "useTags": false
                  }
              ]
          },
          "time": {
              "from": "now-1h",
              "to": "now"
          },
          "timepicker": {
              "refresh_intervals": [
                  "5s",
                  "10s",
                  "30s",
                  "1m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "1d"
              ],
              "time_options": [
                  "5m",
                  "15m",
                  "1h",
                  "6h",
                  "12h",
                  "24h",
                  "2d",
                  "7d",
                  "30d"
              ]
          },
          "timezone": "utc",
          "title": "Node Exporter / MacOS",
          "version": 0
      }
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app: rancher-monitoring-grafana
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: rancher-monitoring
      app.kubernetes.io/version: 103.0.3_up45.31.1
      chart: rancher-monitoring-103.0.3_up45.31.1
      grafana_dashboard: "1"
      heritage: Helm
      release: rancher-monitoring
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:nodes-darwin.json: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:chart: {}
            f:grafana_dashboard: {}
            f:heritage: {}
            f:release: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: rancher-monitoring-nodes-darwin
    namespace: cattle-monitoring-system
    resourceVersion: "7598"
    uid: ad3364e8-a311-4603-ae00-cf1c4d9a7aba
- apiVersion: v1
  data:
    config.yaml: |
      rules:
      - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
        seriesFilters: []
        resources:
          overrides:
            namespace:
              resource: namespace
            pod:
              resource: pod
        name:
          matches: ^container_(.*)_seconds_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[5m]))
          by (<<.GroupBy>>)
      - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
        seriesFilters:
        - isNot: ^container_.*_seconds_total$
        resources:
          overrides:
            namespace:
              resource: namespace
            pod:
              resource: pod
        name:
          matches: ^container_(.*)_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[5m]))
          by (<<.GroupBy>>)
      - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
        seriesFilters:
        - isNot: ^container_.*_total$
        resources:
          overrides:
            namespace:
              resource: namespace
            pod:
              resource: pod
        name:
          matches: ^container_(.*)$
          as: ""
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container!="POD"}) by (<<.GroupBy>>)
      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters:
        - isNot: .*_total$
        resources:
          template: <<.Resource>>
        name:
          matches: ""
          as: ""
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters:
        - isNot: .*_seconds_total
        resources:
          template: <<.Resource>>
        name:
          matches: ^(.*)_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)
      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters: []
        resources:
          template: <<.Resource>>
        name:
          matches: ^(.*)_seconds_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
    creationTimestamp: "2024-08-06T01:56:59Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-adapter
      app.kubernetes.io/part-of: prometheus-adapter
      app.kubernetes.io/version: v0.10.0
      helm.sh/chart: prometheus-adapter-4.2.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:config.yaml: {}
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
      manager: helm
      operation: Update
      time: "2024-08-06T01:56:59Z"
    name: rancher-monitoring-prometheus-adapter
    namespace: cattle-monitoring-system
    resourceVersion: "7576"
    uid: 814c427d-755d-4c3a-a0ef-a58bea85f912
kind: List
metadata:
  resourceVersion: "770235"
