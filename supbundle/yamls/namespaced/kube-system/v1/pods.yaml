apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: a024a688ea141fcf22840ea5858306c9
      kubernetes.io/config.mirror: a024a688ea141fcf22840ea5858306c9
      kubernetes.io/config.seen: "2024-08-06T01:51:34.225574400Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T01:51:34Z"
    labels:
      component: cloud-controller-manager
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9b6fb3e0-6ead-4e4f-bb03-9bc72f605557"}: {}
        f:spec:
          f:containers:
            k:{"name":"cloud-controller-manager"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/etc/cloud-config.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"dir0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dir1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file4"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T01:51:34Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:18Z"
    name: cloud-controller-manager-harvesterdev1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev1
      uid: 9b6fb3e0-6ead-4e4f-bb03-9bc72f605557
    resourceVersion: "4048"
    uid: 36b875d3-6d0c-43f2-ba35-58596e026fe6
  spec:
    containers:
    - args:
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
      - --authorization-kubeconfig=/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
      - --bind-address=127.0.0.1
      - --cloud-config=/var/lib/rancher/rke2/server/etc/cloud-config.yaml
      - --cloud-provider=rke2
      - --cluster-cidr=10.52.0.0/16
      - --configure-cloud-routes=false
      - --controllers=*,-route,-service
      - --feature-gates=CloudDualStackNodeIPs=true
      - --kubeconfig=/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
      - --leader-elect-resource-name=rke2-cloud-controller-manager
      - --node-status-update-frequency=1m0s
      - --profiling=false
      command:
      - cloud-controller-manager
      env:
      - name: FILE_HASH
        value: ed7237c07f9c43c0321842ed6e1ebd94d461f8232b8c53692ec5ea259b2185c4
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      image: index.docker.io/rancher/rke2-cloud-provider:v1.29.3-build20240412
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10258
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: cloud-controller-manager
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        privileged: false
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10258
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: dir0
      - mountPath: /etc/ca-certificates
        name: dir1
      - mountPath: /var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/etc/cloud-config.yaml
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.crt
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.key
        name: file3
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
        name: file4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: dir0
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: dir1
    - hostPath:
        path: /var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/server/etc/cloud-config.yaml
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.crt
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.key
        type: File
      name: file3
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/server-ca.crt
        type: File
      name: file4
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:18Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:18Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://00154d709d6c9e78ca928609d03a0eb31e4ebdb68dc473fff53b4738ceb91214
      image: docker.io/rancher/rke2-cloud-provider:v1.29.3-build20240412
      imageID: sha256:3525a3daa55c92783ca961cd9c84d71a6c74db945f2ad8ab8a9d7df2c28c1038
      lastState: {}
      name: cloud-controller-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:51:35Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      etcd.k3s.io/initial: '{"initial-advertise-peer-urls":"https://10.10.110.11:2380","initial-cluster":"harvesterdev1-7d2dbac9=https://10.10.110.11:2380","initial-cluster-state":"new"}'
      kubernetes.io/config.hash: 8044fad60139e279528c874926028b91
      kubernetes.io/config.mirror: 8044fad60139e279528c874926028b91
      kubernetes.io/config.seen: "2024-08-06T01:51:23.199942109Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T01:51:34Z"
    labels:
      component: etcd
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:etcd.k3s.io/initial: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9b6fb3e0-6ead-4e4f-bb03-9bc72f605557"}: {}
        f:spec:
          f:containers:
            k:{"name":"etcd"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-client.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-client.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"dir0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file4"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file5"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file6"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T01:51:34Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:17Z"
    name: etcd-harvesterdev1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev1
      uid: 9b6fb3e0-6ead-4e4f-bb03-9bc72f605557
    resourceVersion: "4040"
    uid: 0682c2d2-7f87-46d6-8280-2fa556a3e18f
  spec:
    containers:
    - args:
      - --config-file=/var/lib/rancher/rke2/server/db/etcd/config
      command:
      - etcd
      env:
      - name: FILE_HASH
        value: c7c44869e14efea6536dc6425c54548212c17c40ddf78ac3c5611d53b9d45e4a
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      image: index.docker.io/rancher/hardened-etcd:v3.5.9-k3s1-build20240418
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /health?serializable=true
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
      securityContext:
        privileged: false
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /health?serializable=true
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rancher/rke2/server/db/etcd
        name: dir0
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-client.crt
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-client.key
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt
        name: file3
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key
        name: file4
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt
        name: file5
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/db/etcd/config
        name: file6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/rancher/rke2/server/db/etcd
        type: DirectoryOrCreate
      name: dir0
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/server-client.crt
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/server-client.key
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt
        type: File
      name: file3
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key
        type: File
      name: file4
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt
        type: File
      name: file5
    - hostPath:
        path: /var/lib/rancher/rke2/server/db/etcd/config
        type: File
      name: file6
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://10a83816bde3d4fea2dbb677ff59c6164a1b15dac76eced388b16af05a551547
      image: docker.io/rancher/hardened-etcd:v3.5.9-k3s1-build20240418
      imageID: sha256:7893f7425a52ac72495b0b033fe6f850712985f8c68a018e20e02394f2b4c31f
      lastState: {}
      name: etcd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:51:24Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 2436610ede014715633f19ea426c84307f2207a20465834a82469bdba78ac6db
      cni.projectcalico.org/podIP: 10.52.0.39/32
      cni.projectcalico.org/podIPs: 10.52.0.39/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.39"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:55:39Z"
    generateName: harvester-snapshot-validation-webhook-b75f94bcb-
    labels:
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: snapshot-validation-webhook
      pod-template-hash: b75f94bcb
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b0a4690e-7dbb-4f7e-b6cf-946b11eb09e6"}: {}
        f:spec:
          f:containers:
            k:{"name":"snapshot-validation-webhook"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/snapshot-validation-webhook/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.39"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:42Z"
    name: harvester-snapshot-validation-webhook-b75f94bcb-sghrd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: harvester-snapshot-validation-webhook-b75f94bcb
      uid: b0a4690e-7dbb-4f7e-b6cf-946b11eb09e6
    resourceVersion: "4944"
    uid: a7e40478-1f67-4094-8f73-068e26e95393
  spec:
    containers:
    - args:
      - --tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt
      - --tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key
      image: registry.k8s.io/sig-storage/snapshot-validation-webhook:v6.3.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: snapshot-validation-webhook
      ports:
      - containerPort: 443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/snapshot-validation-webhook/certs
        name: certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8r6lh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: snapshot-validation-webhook
    serviceAccountName: snapshot-validation-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: certs
      secret:
        defaultMode: 420
        secretName: snapshot-validation-webhook-tls
    - name: kube-api-access-8r6lh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0b86dc6cc5192ff331e4e65ea7db6591d5ce15409115b694981e792c00905c48
      image: registry.k8s.io/sig-storage/snapshot-validation-webhook:v6.3.3
      imageID: sha256:520d048805e05f1598031acfdb303618c9efa0c945e984d4883e5d6b8e028d05
      lastState: {}
      name: snapshot-validation-webhook
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:41Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.39
    podIPs:
    - ip: 10.52.0.39
    qosClass: BestEffort
    startTime: "2024-08-06T01:55:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 07debb8f9f2e48f99226d2bf8debb795ae11f7da42073dcbe20b839abd4a8a14
      cni.projectcalico.org/podIP: 10.52.0.41/32
      cni.projectcalico.org/podIPs: 10.52.0.41/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.41"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:55:39Z"
    generateName: harvester-snapshot-validation-webhook-b75f94bcb-
    labels:
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: snapshot-validation-webhook
      pod-template-hash: b75f94bcb
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b0a4690e-7dbb-4f7e-b6cf-946b11eb09e6"}: {}
        f:spec:
          f:containers:
            k:{"name":"snapshot-validation-webhook"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/snapshot-validation-webhook/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.41"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:41Z"
    name: harvester-snapshot-validation-webhook-b75f94bcb-xf7n6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: harvester-snapshot-validation-webhook-b75f94bcb
      uid: b0a4690e-7dbb-4f7e-b6cf-946b11eb09e6
    resourceVersion: "4860"
    uid: 370030b8-e1a4-4ed8-bd58-da853952c4b2
  spec:
    containers:
    - args:
      - --tls-cert-file=/etc/snapshot-validation-webhook/certs/tls.crt
      - --tls-private-key-file=/etc/snapshot-validation-webhook/certs/tls.key
      image: registry.k8s.io/sig-storage/snapshot-validation-webhook:v6.3.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: snapshot-validation-webhook
      ports:
      - containerPort: 443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/snapshot-validation-webhook/certs
        name: certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4c847
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: snapshot-validation-webhook
    serviceAccountName: snapshot-validation-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: certs
      secret:
        defaultMode: 420
        secretName: snapshot-validation-webhook-tls
    - name: kube-api-access-4c847
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8202f59feb5269e72d7a591f922e3d51078bc17c1805355c4589f016963679ac
      image: registry.k8s.io/sig-storage/snapshot-validation-webhook:v6.3.3
      imageID: sha256:520d048805e05f1598031acfdb303618c9efa0c945e984d4883e5d6b8e028d05
      lastState: {}
      name: snapshot-validation-webhook
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:41Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.41
    podIPs:
    - ip: 10.52.0.41
    qosClass: BestEffort
    startTime: "2024-08-06T01:55:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T02:13:11Z"
    generateName: harvester-whereabouts-
    labels:
      app: whereabouts
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: whereabouts
      controller-revision-hash: 75c8fc64ff
      name: whereabouts
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"88a9a91e-e318-4be4-bae4-9a0a4659dc62"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"whereabouts"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"WHEREABOUTS_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cron-schedule"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cron-scheduler-configmap"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.61"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:14Z"
    name: harvester-whereabouts-2bpm7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: harvester-whereabouts
      uid: 88a9a91e-e318-4be4-bae4-9a0a4659dc62
    resourceVersion: "25909"
    uid: 4c4cb04e-4f7c-4fd6-a1a7-bd2d102c7836
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev3
    containers:
    - args:
      - -c
      - |
        SLEEP=false /install-cni.sh && /ip-control-loop -log-level debug
      command:
      - /bin/sh
      env:
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: WHEREABOUTS_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imagePullPolicy: IfNotPresent
      name: whereabouts
      resources:
        limits:
          cpu: 100m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /cron-schedule
        name: cron-scheduler-configmap
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lx9jx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev3
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: harvester-whereabouts
    serviceAccountName: harvester-whereabouts
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - configMap:
        defaultMode: 484
        items:
        - key: cron-expression
          path: config
        name: whereabouts-config
      name: cron-scheduler-configmap
    - name: kube-api-access-lx9jx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://00cec8d4035fad2b465ffbb0a3b044b20b62ce43ce1df5195528266de4f069e6
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imageID: sha256:95601e6931ef02ff3589bec1a97c19c43692a627dde3abd48d0aa8a438bdf008
      lastState: {}
      name: whereabouts
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:13:14Z"
    hostIP: 10.10.110.61
    phase: Running
    podIP: 10.10.110.61
    podIPs:
    - ip: 10.10.110.61
    qosClass: Burstable
    startTime: "2024-08-06T02:13:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T02:11:20Z"
    generateName: harvester-whereabouts-
    labels:
      app: whereabouts
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: whereabouts
      controller-revision-hash: 75c8fc64ff
      name: whereabouts
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"88a9a91e-e318-4be4-bae4-9a0a4659dc62"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"whereabouts"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"WHEREABOUTS_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cron-schedule"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cron-scheduler-configmap"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:11:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.71"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:23Z"
    name: harvester-whereabouts-5m97d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: harvester-whereabouts
      uid: 88a9a91e-e318-4be4-bae4-9a0a4659dc62
    resourceVersion: "22752"
    uid: 7ca1852b-caeb-4561-85d4-14db360bbae0
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev2
    containers:
    - args:
      - -c
      - |
        SLEEP=false /install-cni.sh && /ip-control-loop -log-level debug
      command:
      - /bin/sh
      env:
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: WHEREABOUTS_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imagePullPolicy: IfNotPresent
      name: whereabouts
      resources:
        limits:
          cpu: 100m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /cron-schedule
        name: cron-scheduler-configmap
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-95zgl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: harvester-whereabouts
    serviceAccountName: harvester-whereabouts
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - configMap:
        defaultMode: 484
        items:
        - key: cron-expression
          path: config
        name: whereabouts-config
      name: cron-scheduler-configmap
    - name: kube-api-access-95zgl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://78f2ce6251a0e7dc2e051f6165d857583b6c726f608c6e215124085e2368ec94
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imageID: sha256:95601e6931ef02ff3589bec1a97c19c43692a627dde3abd48d0aa8a438bdf008
      lastState: {}
      name: whereabouts
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:22Z"
    hostIP: 10.10.110.71
    phase: Running
    podIP: 10.10.110.71
    podIPs:
    - ip: 10.10.110.71
    qosClass: Burstable
    startTime: "2024-08-06T02:11:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T02:15:24Z"
    generateName: harvester-whereabouts-
    labels:
      app: whereabouts
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: whereabouts
      controller-revision-hash: 75c8fc64ff
      name: whereabouts
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"88a9a91e-e318-4be4-bae4-9a0a4659dc62"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"whereabouts"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"WHEREABOUTS_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cron-schedule"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cron-scheduler-configmap"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:15:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.232"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:15:32Z"
    name: harvester-whereabouts-9qs8g
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: harvester-whereabouts
      uid: 88a9a91e-e318-4be4-bae4-9a0a4659dc62
    resourceVersion: "29518"
    uid: 6f4704e3-83fe-4b38-8970-354761d25e23
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev7
    containers:
    - args:
      - -c
      - |
        SLEEP=false /install-cni.sh && /ip-control-loop -log-level debug
      command:
      - /bin/sh
      env:
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: WHEREABOUTS_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imagePullPolicy: IfNotPresent
      name: whereabouts
      resources:
        limits:
          cpu: 100m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /cron-schedule
        name: cron-scheduler-configmap
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vb9v2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev7
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: harvester-whereabouts
    serviceAccountName: harvester-whereabouts
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - configMap:
        defaultMode: 484
        items:
        - key: cron-expression
          path: config
        name: whereabouts-config
      name: cron-scheduler-configmap
    - name: kube-api-access-vb9v2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1ba0ec1879f6e0f986820b55094e343e7666ae266e921777ece8fe32a7c67226
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imageID: sha256:95601e6931ef02ff3589bec1a97c19c43692a627dde3abd48d0aa8a438bdf008
      lastState: {}
      name: whereabouts
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:15:31Z"
    hostIP: 10.10.110.232
    phase: Running
    podIP: 10.10.110.232
    podIPs:
    - ip: 10.10.110.232
    qosClass: Burstable
    startTime: "2024-08-06T02:15:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T01:55:39Z"
    generateName: harvester-whereabouts-
    labels:
      app: whereabouts
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: whereabouts
      controller-revision-hash: 75c8fc64ff
      name: whereabouts
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"88a9a91e-e318-4be4-bae4-9a0a4659dc62"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"whereabouts"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"WHEREABOUTS_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/cron-schedule"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cron-scheduler-configmap"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:42Z"
    name: harvester-whereabouts-cphbg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: harvester-whereabouts
      uid: 88a9a91e-e318-4be4-bae4-9a0a4659dc62
    resourceVersion: "4932"
    uid: 622d0a95-06db-403b-8b06-3cb84a144684
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev1
    containers:
    - args:
      - -c
      - |
        SLEEP=false /install-cni.sh && /ip-control-loop -log-level debug
      command:
      - /bin/sh
      env:
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: WHEREABOUTS_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imagePullPolicy: IfNotPresent
      name: whereabouts
      resources:
        limits:
          cpu: 100m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /cron-schedule
        name: cron-scheduler-configmap
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4l455
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: harvester-whereabouts
    serviceAccountName: harvester-whereabouts
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - configMap:
        defaultMode: 484
        items:
        - key: cron-expression
          path: config
        name: whereabouts-config
      name: cron-scheduler-configmap
    - name: kube-api-access-4l455
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1aa6a85fa37af4684fa33fe6e3fc5efed89c3fe616e85de1b9a26264f283fe2a
      image: ghcr.io/k8snetworkplumbingwg/whereabouts:v0.6.3
      imageID: sha256:95601e6931ef02ff3589bec1a97c19c43692a627dde3abd48d0aa8a438bdf008
      lastState: {}
      name: whereabouts
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:41Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      helmcharts.helm.cattle.io/configHash: SHA256=02DBF527C96D187C86867A63B33B9E9D855C453D021D156CE0DCE784B02FF4DD
    creationTimestamp: "2024-08-06T01:51:46Z"
    generateName: helm-install-rke2-canal-
    labels:
      batch.kubernetes.io/controller-uid: 6ceb205a-457a-418a-a059-3fcdefe9e42b
      batch.kubernetes.io/job-name: helm-install-rke2-canal
      controller-uid: 6ceb205a-457a-418a-a059-3fcdefe9e42b
      helmcharts.helm.cattle.io/chart: rke2-canal
      job-name: helm-install-rke2-canal
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helmcharts.helm.cattle.io/configHash: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:batch.kubernetes.io/controller-uid: {}
            f:batch.kubernetes.io/job-name: {}
            f:controller-uid: {}
            f:helmcharts.helm.cattle.io/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6ceb205a-457a-418a-a059-3fcdefe9e42b"}: {}
        f:spec:
          f:containers:
            k:{"name":"helm"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"AUTH_PASS_CREDENTIALS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BOOTSTRAP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHART"}:
                  .: {}
                  f:name: {}
                k:{"name":"CHART_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FAILURE_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_DRIVER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_VERSION"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REPO"}:
                  .: {}
                  f:name: {}
                k:{"name":"TARGET_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"VERSION"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/chart"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.cache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.helm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:seccompProfile:
              .: {}
              f:type: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"content"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"klipper-cache"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-config"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-helm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"values"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:51:51Z"
    name: helm-install-rke2-canal-d6wzt
    namespace: kube-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: helm-install-rke2-canal
      uid: 6ceb205a-457a-418a-a059-3fcdefe9e42b
    resourceVersion: "757"
    uid: 0604bbf9-6aab-4334-b89d-f7ec0949671b
  spec:
    containers:
    - args:
      - install
      - --set-string
      - global.clusterCIDR=10.52.0.0/16
      - --set-string
      - global.clusterCIDRv4=10.52.0.0/16
      - --set-string
      - global.clusterDNS=10.53.0.10
      - --set-string
      - global.clusterDomain=cluster.local
      - --set-string
      - global.rke2DataDir=/var/lib/rancher/rke2
      - --set-string
      - global.serviceCIDR=10.53.0.0/16
      env:
      - name: NAME
        value: rke2-canal
      - name: VERSION
      - name: REPO
      - name: HELM_DRIVER
        value: secret
      - name: CHART_NAMESPACE
        value: kube-system
      - name: CHART
      - name: HELM_VERSION
      - name: TARGET_NAMESPACE
        value: kube-system
      - name: AUTH_PASS_CREDENTIALS
        value: "false"
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: BOOTSTRAP
        value: "true"
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      - name: FAILURE_POLICY
        value: reinstall
      image: rancher/klipper-helm:v0.8.3-build20240228
      imagePullPolicy: IfNotPresent
      name: helm
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /home/klipper-helm/.helm
        name: klipper-helm
      - mountPath: /home/klipper-helm/.cache
        name: klipper-cache
      - mountPath: /home/klipper-helm/.config
        name: klipper-config
      - mountPath: /tmp
        name: tmp
      - mountPath: /config
        name: values
      - mountPath: /chart
        name: content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rqxth
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: "true"
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: helm-rke2-canal
    serviceAccountName: helm-rke2-canal
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.kubernetes.io/not-ready
    - effect: NoSchedule
      key: node.cloudprovider.kubernetes.io/uninitialized
      operator: Equal
      value: "true"
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: klipper-helm
    - emptyDir:
        medium: Memory
      name: klipper-cache
    - emptyDir:
        medium: Memory
      name: klipper-config
    - emptyDir:
        medium: Memory
      name: tmp
    - name: values
      secret:
        defaultMode: 420
        secretName: chart-values-rke2-canal
    - configMap:
        defaultMode: 420
        name: chart-content-rke2-canal
      name: content
    - name: kube-api-access-rqxth
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:46Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:49Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:49Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5f06bad6eef016ce425bf461161ef36c9ef1935e407760bd35fcdaff0a3a3d98
      image: docker.io/rancher/klipper-helm:v0.8.3-build20240228
      imageID: sha256:0929b4140ada6f9e22dcbd50b15225babc4bc99822a237de438fdcf77ea26821
      lastState: {}
      name: helm
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://5f06bad6eef016ce425bf461161ef36c9ef1935e407760bd35fcdaff0a3a3d98
          exitCode: 0
          finishedAt: "2024-08-06T01:51:48Z"
          message: |
            Installing helm_v3 chart
          reason: Completed
          startedAt: "2024-08-06T01:51:48Z"
    hostIP: 10.10.110.11
    phase: Succeeded
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: BestEffort
    startTime: "2024-08-06T01:51:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      helmcharts.helm.cattle.io/configHash: SHA256=A5ABF5040E4939CAF8F6CEC93B2A2ADDE34FAD837BDCB5611103F957615500FC
    creationTimestamp: "2024-08-06T01:51:46Z"
    generateName: helm-install-rke2-coredns-
    labels:
      batch.kubernetes.io/controller-uid: 686436e7-6ec8-47aa-b262-a3470cc21ff8
      batch.kubernetes.io/job-name: helm-install-rke2-coredns
      controller-uid: 686436e7-6ec8-47aa-b262-a3470cc21ff8
      helmcharts.helm.cattle.io/chart: rke2-coredns
      job-name: helm-install-rke2-coredns
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helmcharts.helm.cattle.io/configHash: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:batch.kubernetes.io/controller-uid: {}
            f:batch.kubernetes.io/job-name: {}
            f:controller-uid: {}
            f:helmcharts.helm.cattle.io/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"686436e7-6ec8-47aa-b262-a3470cc21ff8"}: {}
        f:spec:
          f:containers:
            k:{"name":"helm"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"AUTH_PASS_CREDENTIALS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BOOTSTRAP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHART"}:
                  .: {}
                  f:name: {}
                k:{"name":"CHART_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FAILURE_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_DRIVER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_VERSION"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REPO"}:
                  .: {}
                  f:name: {}
                k:{"name":"TARGET_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"VERSION"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/chart"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.cache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.helm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:seccompProfile:
              .: {}
              f:type: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"content"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"klipper-cache"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-config"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-helm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"values"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:51:51Z"
    name: helm-install-rke2-coredns-7bvgr
    namespace: kube-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: helm-install-rke2-coredns
      uid: 686436e7-6ec8-47aa-b262-a3470cc21ff8
    resourceVersion: "758"
    uid: 86ae01a1-3ff7-4366-bb2d-ec7193fc34ec
  spec:
    containers:
    - args:
      - install
      - --set-string
      - global.clusterCIDR=10.52.0.0/16
      - --set-string
      - global.clusterCIDRv4=10.52.0.0/16
      - --set-string
      - global.clusterDNS=10.53.0.10
      - --set-string
      - global.clusterDomain=cluster.local
      - --set-string
      - global.rke2DataDir=/var/lib/rancher/rke2
      - --set-string
      - global.serviceCIDR=10.53.0.0/16
      env:
      - name: NAME
        value: rke2-coredns
      - name: VERSION
      - name: REPO
      - name: HELM_DRIVER
        value: secret
      - name: CHART_NAMESPACE
        value: kube-system
      - name: CHART
      - name: HELM_VERSION
      - name: TARGET_NAMESPACE
        value: kube-system
      - name: AUTH_PASS_CREDENTIALS
        value: "false"
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: BOOTSTRAP
        value: "true"
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      - name: FAILURE_POLICY
        value: reinstall
      image: rancher/klipper-helm:v0.8.3-build20240228
      imagePullPolicy: IfNotPresent
      name: helm
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /home/klipper-helm/.helm
        name: klipper-helm
      - mountPath: /home/klipper-helm/.cache
        name: klipper-cache
      - mountPath: /home/klipper-helm/.config
        name: klipper-config
      - mountPath: /tmp
        name: tmp
      - mountPath: /config
        name: values
      - mountPath: /chart
        name: content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gj27k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: "true"
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: helm-rke2-coredns
    serviceAccountName: helm-rke2-coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.kubernetes.io/not-ready
    - effect: NoSchedule
      key: node.cloudprovider.kubernetes.io/uninitialized
      operator: Equal
      value: "true"
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: klipper-helm
    - emptyDir:
        medium: Memory
      name: klipper-cache
    - emptyDir:
        medium: Memory
      name: klipper-config
    - emptyDir:
        medium: Memory
      name: tmp
    - name: values
      secret:
        defaultMode: 420
        secretName: chart-values-rke2-coredns
    - configMap:
        defaultMode: 420
        name: chart-content-rke2-coredns
      name: content
    - name: kube-api-access-gj27k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:46Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:49Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:49Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://059ec96f7c1d6c3c14333c94ebc71438150dc43f5cbf6163525c1be51971098e
      image: docker.io/rancher/klipper-helm:v0.8.3-build20240228
      imageID: sha256:0929b4140ada6f9e22dcbd50b15225babc4bc99822a237de438fdcf77ea26821
      lastState: {}
      name: helm
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://059ec96f7c1d6c3c14333c94ebc71438150dc43f5cbf6163525c1be51971098e
          exitCode: 0
          finishedAt: "2024-08-06T01:51:48Z"
          message: |
            Installing helm_v3 chart
          reason: Completed
          startedAt: "2024-08-06T01:51:48Z"
    hostIP: 10.10.110.11
    phase: Succeeded
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: BestEffort
    startTime: "2024-08-06T01:51:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: c2a4827f4f79c55757490b475c01f5fbe0453cb6ad2e137b2bed280326defec1
      cni.projectcalico.org/podIP: "null"
      cni.projectcalico.org/podIPs: "null"
      helmcharts.helm.cattle.io/configHash: SHA256=B06F45A4E196063DCF45DFADDBD08465AC3A7C6AEE35B3C74EAC413265C94D75
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.72"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:56:41Z"
    generateName: helm-install-rke2-ingress-nginx-
    labels:
      batch.kubernetes.io/controller-uid: ae2a790a-01f6-40cd-a276-0e45854ab26f
      batch.kubernetes.io/job-name: helm-install-rke2-ingress-nginx
      controller-uid: ae2a790a-01f6-40cd-a276-0e45854ab26f
      helmcharts.helm.cattle.io/chart: rke2-ingress-nginx
      job-name: helm-install-rke2-ingress-nginx
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helmcharts.helm.cattle.io/configHash: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:batch.kubernetes.io/controller-uid: {}
            f:batch.kubernetes.io/job-name: {}
            f:controller-uid: {}
            f:helmcharts.helm.cattle.io/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ae2a790a-01f6-40cd-a276-0e45854ab26f"}: {}
        f:spec:
          f:containers:
            k:{"name":"helm"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"AUTH_PASS_CREDENTIALS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHART"}:
                  .: {}
                  f:name: {}
                k:{"name":"CHART_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FAILURE_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_DRIVER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_VERSION"}:
                  .: {}
                  f:name: {}
                k:{"name":"NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REPO"}:
                  .: {}
                  f:name: {}
                k:{"name":"TARGET_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"VERSION"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/chart"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.cache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.helm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:seccompProfile:
              .: {}
              f:type: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"content"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"klipper-cache"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-config"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-helm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"values"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:56:41Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:56:42Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:57:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.72"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:57:01Z"
    name: helm-install-rke2-ingress-nginx-trqd9
    namespace: kube-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: helm-install-rke2-ingress-nginx
      uid: ae2a790a-01f6-40cd-a276-0e45854ab26f
    resourceVersion: "7945"
    uid: efbdd979-f464-438e-8dcc-cdccabaa15aa
  spec:
    containers:
    - args:
      - install
      - --set-string
      - global.clusterCIDR=10.52.0.0/16
      - --set-string
      - global.clusterCIDRv4=10.52.0.0/16
      - --set-string
      - global.clusterDNS=10.53.0.10
      - --set-string
      - global.clusterDomain=cluster.local
      - --set-string
      - global.rke2DataDir=/var/lib/rancher/rke2
      - --set-string
      - global.serviceCIDR=10.53.0.0/16
      env:
      - name: NAME
        value: rke2-ingress-nginx
      - name: VERSION
      - name: REPO
      - name: HELM_DRIVER
        value: secret
      - name: CHART_NAMESPACE
        value: kube-system
      - name: CHART
      - name: HELM_VERSION
      - name: TARGET_NAMESPACE
        value: kube-system
      - name: AUTH_PASS_CREDENTIALS
        value: "false"
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      - name: FAILURE_POLICY
        value: reinstall
      image: rancher/klipper-helm:v0.8.3-build20240228
      imagePullPolicy: IfNotPresent
      name: helm
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /home/klipper-helm/.helm
        name: klipper-helm
      - mountPath: /home/klipper-helm/.cache
        name: klipper-cache
      - mountPath: /home/klipper-helm/.config
        name: klipper-config
      - mountPath: /tmp
        name: tmp
      - mountPath: /config
        name: values
      - mountPath: /chart
        name: content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mr4jx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: helm-rke2-ingress-nginx
    serviceAccountName: helm-rke2-ingress-nginx
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: klipper-helm
    - emptyDir:
        medium: Memory
      name: klipper-cache
    - emptyDir:
        medium: Memory
      name: klipper-config
    - emptyDir:
        medium: Memory
      name: tmp
    - name: values
      secret:
        defaultMode: 420
        secretName: chart-values-rke2-ingress-nginx
    - configMap:
        defaultMode: 420
        name: chart-content-rke2-ingress-nginx
      name: content
    - name: kube-api-access-mr4jx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:56:41Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:56:59Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:56:59Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:56:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8d83bac2af5ce0e125ddaf2c649e83ba1fe9c47bfa3d52af23f4c1fa5162f50f
      image: docker.io/rancher/klipper-helm:v0.8.3-build20240228
      imageID: sha256:0929b4140ada6f9e22dcbd50b15225babc4bc99822a237de438fdcf77ea26821
      lastState: {}
      name: helm
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://8d83bac2af5ce0e125ddaf2c649e83ba1fe9c47bfa3d52af23f4c1fa5162f50f
          exitCode: 0
          finishedAt: "2024-08-06T01:56:58Z"
          message: |
            Upgrading helm_v3 chart
          reason: Completed
          startedAt: "2024-08-06T01:56:42Z"
    hostIP: 10.10.110.11
    phase: Succeeded
    podIP: 10.52.0.72
    podIPs:
    - ip: 10.52.0.72
    qosClass: BestEffort
    startTime: "2024-08-06T01:56:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: eac03e96297ab19cc1903d07e1240aa8290375ef521cbb489c2c20455fbd2231
      cni.projectcalico.org/podIP: "null"
      cni.projectcalico.org/podIPs: "null"
      helmcharts.helm.cattle.io/configHash: SHA256=F9DF09E5B063CEF0BE61FE3C4A92AA53BDD020EE5A537DAE87AA27F1442A6B81
    creationTimestamp: "2024-08-06T01:51:46Z"
    generateName: helm-install-rke2-metrics-server-
    labels:
      batch.kubernetes.io/controller-uid: 27af1ada-9e72-45f4-94eb-9718922ebd0f
      batch.kubernetes.io/job-name: helm-install-rke2-metrics-server
      controller-uid: 27af1ada-9e72-45f4-94eb-9718922ebd0f
      helmcharts.helm.cattle.io/chart: rke2-metrics-server
      job-name: helm-install-rke2-metrics-server
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helmcharts.helm.cattle.io/configHash: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:batch.kubernetes.io/controller-uid: {}
            f:batch.kubernetes.io/job-name: {}
            f:controller-uid: {}
            f:helmcharts.helm.cattle.io/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"27af1ada-9e72-45f4-94eb-9718922ebd0f"}: {}
        f:spec:
          f:containers:
            k:{"name":"helm"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"AUTH_PASS_CREDENTIALS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHART"}:
                  .: {}
                  f:name: {}
                k:{"name":"CHART_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FAILURE_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_DRIVER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_VERSION"}:
                  .: {}
                  f:name: {}
                k:{"name":"NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REPO"}:
                  .: {}
                  f:name: {}
                k:{"name":"TARGET_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"VERSION"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/chart"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.cache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.helm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:seccompProfile:
              .: {}
              f:type: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"content"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"klipper-cache"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-config"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-helm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"values"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2024-08-06T01:51:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:06Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:07Z"
    name: helm-install-rke2-metrics-server-54kch
    namespace: kube-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: helm-install-rke2-metrics-server
      uid: 27af1ada-9e72-45f4-94eb-9718922ebd0f
    resourceVersion: "3966"
    uid: fac60530-d676-40d1-8d27-1bd74cb183b2
  spec:
    containers:
    - args:
      - install
      - --set-string
      - global.clusterCIDR=10.52.0.0/16
      - --set-string
      - global.clusterCIDRv4=10.52.0.0/16
      - --set-string
      - global.clusterDNS=10.53.0.10
      - --set-string
      - global.clusterDomain=cluster.local
      - --set-string
      - global.rke2DataDir=/var/lib/rancher/rke2
      - --set-string
      - global.serviceCIDR=10.53.0.0/16
      env:
      - name: NAME
        value: rke2-metrics-server
      - name: VERSION
      - name: REPO
      - name: HELM_DRIVER
        value: secret
      - name: CHART_NAMESPACE
        value: kube-system
      - name: CHART
      - name: HELM_VERSION
      - name: TARGET_NAMESPACE
        value: kube-system
      - name: AUTH_PASS_CREDENTIALS
        value: "false"
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      - name: FAILURE_POLICY
        value: reinstall
      image: rancher/klipper-helm:v0.8.3-build20240228
      imagePullPolicy: IfNotPresent
      name: helm
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /home/klipper-helm/.helm
        name: klipper-helm
      - mountPath: /home/klipper-helm/.cache
        name: klipper-cache
      - mountPath: /home/klipper-helm/.config
        name: klipper-config
      - mountPath: /tmp
        name: tmp
      - mountPath: /config
        name: values
      - mountPath: /chart
        name: content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kqwfm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: helm-rke2-metrics-server
    serviceAccountName: helm-rke2-metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: klipper-helm
    - emptyDir:
        medium: Memory
      name: klipper-cache
    - emptyDir:
        medium: Memory
      name: klipper-config
    - emptyDir:
        medium: Memory
      name: tmp
    - name: values
      secret:
        defaultMode: 420
        secretName: chart-values-rke2-metrics-server
    - configMap:
        defaultMode: 420
        name: chart-content-rke2-metrics-server
      name: content
    - name: kube-api-access-kqwfm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:51Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:05Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:05Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b66af7ae9949ff177f5762a07a326a6773760e0d8e1039fee42d94a0580ff198
      image: docker.io/rancher/klipper-helm:v0.8.3-build20240228
      imageID: sha256:0929b4140ada6f9e22dcbd50b15225babc4bc99822a237de438fdcf77ea26821
      lastState: {}
      name: helm
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b66af7ae9949ff177f5762a07a326a6773760e0d8e1039fee42d94a0580ff198
          exitCode: 0
          finishedAt: "2024-08-06T01:52:04Z"
          message: |
            Installing helm_v3 chart
          reason: Completed
          startedAt: "2024-08-06T01:52:03Z"
    hostIP: 10.10.110.11
    phase: Succeeded
    qosClass: BestEffort
    startTime: "2024-08-06T01:51:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      helmcharts.helm.cattle.io/configHash: SHA256=443C8C7CC9801C69192A8628C4D1EF8EB98C5A45910B7BE1B98AF1F1EC3B7076
    creationTimestamp: "2024-08-06T01:51:46Z"
    generateName: helm-install-rke2-multus-
    labels:
      batch.kubernetes.io/controller-uid: 8b6556f8-37e3-4dac-b175-5ccd71e675fc
      batch.kubernetes.io/job-name: helm-install-rke2-multus
      controller-uid: 8b6556f8-37e3-4dac-b175-5ccd71e675fc
      helmcharts.helm.cattle.io/chart: rke2-multus
      job-name: helm-install-rke2-multus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helmcharts.helm.cattle.io/configHash: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:batch.kubernetes.io/controller-uid: {}
            f:batch.kubernetes.io/job-name: {}
            f:controller-uid: {}
            f:helmcharts.helm.cattle.io/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8b6556f8-37e3-4dac-b175-5ccd71e675fc"}: {}
        f:spec:
          f:containers:
            k:{"name":"helm"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"AUTH_PASS_CREDENTIALS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BOOTSTRAP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHART"}:
                  .: {}
                  f:name: {}
                k:{"name":"CHART_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FAILURE_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_DRIVER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HELM_VERSION"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REPO"}:
                  .: {}
                  f:name: {}
                k:{"name":"TARGET_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"VERSION"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/chart"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.cache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/home/klipper-helm/.helm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:seccompProfile:
              .: {}
              f:type: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"content"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"klipper-cache"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-config"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"klipper-helm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"values"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:51:51Z"
    name: helm-install-rke2-multus-9ljnb
    namespace: kube-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: helm-install-rke2-multus
      uid: 8b6556f8-37e3-4dac-b175-5ccd71e675fc
    resourceVersion: "765"
    uid: e1396767-1bdb-47b5-92a5-5c2a704aba01
  spec:
    containers:
    - args:
      - install
      - --set-string
      - global.clusterCIDR=10.52.0.0/16
      - --set-string
      - global.clusterCIDRv4=10.52.0.0/16
      - --set-string
      - global.clusterDNS=10.53.0.10
      - --set-string
      - global.clusterDomain=cluster.local
      - --set-string
      - global.rke2DataDir=/var/lib/rancher/rke2
      - --set-string
      - global.serviceCIDR=10.53.0.0/16
      env:
      - name: NAME
        value: rke2-multus
      - name: VERSION
      - name: REPO
      - name: HELM_DRIVER
        value: secret
      - name: CHART_NAMESPACE
        value: kube-system
      - name: CHART
      - name: HELM_VERSION
      - name: TARGET_NAMESPACE
        value: kube-system
      - name: AUTH_PASS_CREDENTIALS
        value: "false"
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "6443"
      - name: BOOTSTRAP
        value: "true"
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      - name: FAILURE_POLICY
        value: reinstall
      image: rancher/klipper-helm:v0.8.3-build20240228
      imagePullPolicy: IfNotPresent
      name: helm
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /home/klipper-helm/.helm
        name: klipper-helm
      - mountPath: /home/klipper-helm/.cache
        name: klipper-cache
      - mountPath: /home/klipper-helm/.config
        name: klipper-config
      - mountPath: /tmp
        name: tmp
      - mountPath: /config
        name: values
      - mountPath: /chart
        name: content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qh9jj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: "true"
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: helm-rke2-multus
    serviceAccountName: helm-rke2-multus
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.kubernetes.io/not-ready
    - effect: NoSchedule
      key: node.cloudprovider.kubernetes.io/uninitialized
      operator: Equal
      value: "true"
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: klipper-helm
    - emptyDir:
        medium: Memory
      name: klipper-cache
    - emptyDir:
        medium: Memory
      name: klipper-config
    - emptyDir:
        medium: Memory
      name: tmp
    - name: values
      secret:
        defaultMode: 420
        secretName: chart-values-rke2-multus
    - configMap:
        defaultMode: 420
        name: chart-content-rke2-multus
      name: content
    - name: kube-api-access-qh9jj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:46Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:49Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:49Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://173d3309052ae7794e3da77b71ad989e13122ed8518f0a2f435f03f18160bd90
      image: docker.io/rancher/klipper-helm:v0.8.3-build20240228
      imageID: sha256:0929b4140ada6f9e22dcbd50b15225babc4bc99822a237de438fdcf77ea26821
      lastState: {}
      name: helm
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://173d3309052ae7794e3da77b71ad989e13122ed8518f0a2f435f03f18160bd90
          exitCode: 0
          finishedAt: "2024-08-06T01:51:48Z"
          message: |
            Installing helm_v3 chart
          reason: Completed
          startedAt: "2024-08-06T01:51:48Z"
    hostIP: 10.10.110.11
    phase: Succeeded
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: BestEffort
    startTime: "2024-08-06T01:51:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: ee7637ecac35bafa205e51bddc9f87f4
      kubernetes.io/config.mirror: ee7637ecac35bafa205e51bddc9f87f4
      kubernetes.io/config.seen: "2024-08-06T01:51:27.211992673Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T01:51:32Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9b6fb3e0-6ead-4e4f-bb03-9bc72f605557"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-apiserver"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/rancher/rke2/config.yaml.d/92-harvester-kube-audit-policy.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/rancher/rke2/rke2-pss.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/cred/encryption-config.json"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/name"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/etc/egress-selector-config.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/logs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-auth-proxy.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-auth-proxy.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/client.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/client.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/request-header-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/service.current.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/service.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"dir0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dir1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dir2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file4"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file5"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file6"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file7"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file8"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file9"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file10"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file11"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file12"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file13"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file14"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file15"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file16"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file17"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file18"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T01:51:32Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:16Z"
    name: kube-apiserver-harvesterdev1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev1
      uid: 9b6fb3e0-6ead-4e4f-bb03-9bc72f605557
    resourceVersion: "4033"
    uid: fcb6d02b-628e-43f1-98b2-fa4341815d28
  spec:
    containers:
    - args:
      - --admission-control-config-file=/etc/rancher/rke2/rke2-pss.yaml
      - --audit-policy-file=/etc/rancher/rke2/config.yaml.d/92-harvester-kube-audit-policy.yaml
      - --audit-log-maxage=30
      - --audit-log-maxbackup=10
      - --audit-log-maxsize=100
      - --audit-log-path=/var/lib/rancher/rke2/server/logs/audit.log
      - --allow-privileged=true
      - --anonymous-auth=false
      - --api-audiences=https://kubernetes.default.svc.cluster.local,rke2
      - --authorization-mode=Node,RBAC
      - --bind-address=0.0.0.0
      - --cert-dir=/var/lib/rancher/rke2/server/tls/temporary-certs
      - --client-ca-file=/var/lib/rancher/rke2/server/tls/client-ca.crt
      - --egress-selector-config-file=/var/lib/rancher/rke2/server/etc/egress-selector-config.yaml
      - --enable-admission-plugins=NodeRestriction
      - --enable-aggregator-routing=true
      - --enable-bootstrap-token-auth=true
      - --encryption-provider-config=/var/lib/rancher/rke2/server/cred/encryption-config.json
      - --etcd-cafile=/var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
      - --etcd-certfile=/var/lib/rancher/rke2/server/tls/etcd/client.crt
      - --etcd-keyfile=/var/lib/rancher/rke2/server/tls/etcd/client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --kubelet-certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt
      - --kubelet-client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
      - --kubelet-client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --profiling=false
      - --proxy-client-cert-file=/var/lib/rancher/rke2/server/tls/client-auth-proxy.crt
      - --proxy-client-key-file=/var/lib/rancher/rke2/server/tls/client-auth-proxy.key
      - --requestheader-allowed-names=system:auth-proxy
      - --requestheader-client-ca-file=/var/lib/rancher/rke2/server/tls/request-header-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-issuer=https://kubernetes.default.svc.cluster.local
      - --service-account-key-file=/var/lib/rancher/rke2/server/tls/service.key
      - --service-account-signing-key-file=/var/lib/rancher/rke2/server/tls/service.current.key
      - --service-cluster-ip-range=10.53.0.0/16
      - --service-node-port-range=30000-32767
      - --storage-backend=etcd3
      - --tls-cert-file=/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt
      - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
      - --tls-private-key-file=/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key
      command:
      - kube-apiserver
      env:
      - name: FILE_HASH
        value: 9b71f770f344a5d72d429db3cdc8ee3e013044e311f5ef32b6d62cc29eba93e6
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - kubectl
          - get
          - --server=https://localhost:6443/
          - --client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
          - --client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
          - --certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt
          - --raw=/livez
        failureThreshold: 8
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        exec:
          command:
          - kubectl
          - get
          - --server=https://localhost:6443/
          - --client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
          - --client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
          - --certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt
          - --raw=/readyz
        failureThreshold: 3
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
          memory: 1Gi
      securityContext:
        privileged: false
      startupProbe:
        exec:
          command:
          - kubectl
          - get
          - --server=https://localhost:6443/
          - --client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
          - --client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
          - --certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt
          - --raw=/livez
        failureThreshold: 24
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: dir0
      - mountPath: /etc/ca-certificates
        name: dir1
      - mountPath: /var/lib/rancher/rke2/server/logs
        name: dir2
      - mountPath: /var/lib/rancher/rke2/server/db/etcd/name
        name: file0
        readOnly: true
      - mountPath: /etc/rancher/rke2/config.yaml.d/92-harvester-kube-audit-policy.yaml
        name: file1
        readOnly: true
      - mountPath: /etc/rancher/rke2/rke2-pss.yaml
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/cred/encryption-config.json
        name: file3
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/etc/egress-selector-config.yaml
        name: file4
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-auth-proxy.crt
        name: file5
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-auth-proxy.key
        name: file6
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-ca.crt
        name: file7
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
        name: file8
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
        name: file9
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/client.crt
        name: file10
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/client.key
        name: file11
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
        name: file12
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/request-header-ca.crt
        name: file13
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
        name: file14
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/service.current.key
        name: file15
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/service.key
        name: file16
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt
        name: file17
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key
        name: file18
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: dir0
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: dir1
    - hostPath:
        path: /var/lib/rancher/rke2/server/logs
        type: DirectoryOrCreate
      name: dir2
    - hostPath:
        path: /var/lib/rancher/rke2/server/db/etcd/name
        type: File
      name: file0
    - hostPath:
        path: /etc/rancher/rke2/config.yaml.d/92-harvester-kube-audit-policy.yaml
        type: File
      name: file1
    - hostPath:
        path: /etc/rancher/rke2/rke2-pss.yaml
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/server/cred/encryption-config.json
        type: File
      name: file3
    - hostPath:
        path: /var/lib/rancher/rke2/server/etc/egress-selector-config.yaml
        type: File
      name: file4
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-auth-proxy.crt
        type: File
      name: file5
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-auth-proxy.key
        type: File
      name: file6
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-ca.crt
        type: File
      name: file7
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
        type: File
      name: file8
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
        type: File
      name: file9
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/client.crt
        type: File
      name: file10
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/client.key
        type: File
      name: file11
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
        type: File
      name: file12
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/request-header-ca.crt
        type: File
      name: file13
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/server-ca.crt
        type: File
      name: file14
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/service.current.key
        type: File
      name: file15
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/service.key
        type: File
      name: file16
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt
        type: File
      name: file17
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key
        type: File
      name: file18
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4a27b3dd926d40a863a0115470c4f304bf14e46577b6df28d3a3d1628dcedda6
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-apiserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:51:29Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: c7e6c43a8ab56c48795dc819bd334c98
      kubernetes.io/config.mirror: c7e6c43a8ab56c48795dc819bd334c98
      kubernetes.io/config.seen: "2024-08-06T01:55:11.555848490Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T01:55:12Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9b6fb3e0-6ead-4e4f-bb03-9bc72f605557"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-controller-manager"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/cred/controller.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/name"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-ca.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-ca.nochain.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-controller.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-controller.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/kube-controller-manager"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.nochain.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/service.current.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"dir0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dir1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"extra-mount-0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file4"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file5"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file6"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file7"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file8"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file9"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T01:55:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:24Z"
    name: kube-controller-manager-harvesterdev1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev1
      uid: 9b6fb3e0-6ead-4e4f-bb03-9bc72f605557
    resourceVersion: "4321"
    uid: b5c72400-77a9-4886-bb71-6a7c33f98ff1
  spec:
    containers:
    - args:
      - --flex-volume-plugin-dir=/var/lib/kubelet/volumeplugins
      - --terminated-pod-gc-threshold=1000
      - --permit-port-sharing=true
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/var/lib/rancher/rke2/server/cred/controller.kubeconfig
      - --authorization-kubeconfig=/var/lib/rancher/rke2/server/cred/controller.kubeconfig
      - --bind-address=127.0.0.1
      - --cert-dir=/var/lib/rancher/rke2/server/tls/kube-controller-manager
      - --cluster-cidr=10.52.0.0/16
      - --cluster-signing-kube-apiserver-client-cert-file=/var/lib/rancher/rke2/server/tls/client-ca.nochain.crt
      - --cluster-signing-kube-apiserver-client-key-file=/var/lib/rancher/rke2/server/tls/client-ca.key
      - --cluster-signing-kubelet-client-cert-file=/var/lib/rancher/rke2/server/tls/client-ca.nochain.crt
      - --cluster-signing-kubelet-client-key-file=/var/lib/rancher/rke2/server/tls/client-ca.key
      - --cluster-signing-kubelet-serving-cert-file=/var/lib/rancher/rke2/server/tls/server-ca.nochain.crt
      - --cluster-signing-kubelet-serving-key-file=/var/lib/rancher/rke2/server/tls/server-ca.key
      - --cluster-signing-legacy-unknown-cert-file=/var/lib/rancher/rke2/server/tls/server-ca.nochain.crt
      - --cluster-signing-legacy-unknown-key-file=/var/lib/rancher/rke2/server/tls/server-ca.key
      - --configure-cloud-routes=false
      - --controllers=*,tokencleaner,-service,-route,-cloud-node-lifecycle
      - --kubeconfig=/var/lib/rancher/rke2/server/cred/controller.kubeconfig
      - --profiling=false
      - --root-ca-file=/var/lib/rancher/rke2/server/tls/server-ca.crt
      - --secure-port=10257
      - --service-account-private-key-file=/var/lib/rancher/rke2/server/tls/service.current.key
      - --service-cluster-ip-range=10.53.0.0/16
      - --use-service-account-credentials=true
      command:
      - kube-controller-manager
      env:
      - name: FILE_HASH
        value: bc5d76ecace4cc039f4505df963bbec34c4624bd7f04762f3b30291a718dc2d4
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
      securityContext:
        privileged: false
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: dir0
      - mountPath: /etc/ca-certificates
        name: dir1
      - mountPath: /var/lib/rancher/rke2/server/db/etcd/name
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/cred/controller.kubeconfig
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-ca.key
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-ca.nochain.crt
        name: file3
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-controller.crt
        name: file4
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-controller.key
        name: file5
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
        name: file6
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/server-ca.key
        name: file7
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/server-ca.nochain.crt
        name: file8
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/service.current.key
        name: file9
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/kube-controller-manager
        name: extra-mount-0
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: dir0
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: dir1
    - hostPath:
        path: /var/lib/rancher/rke2/server/db/etcd/name
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/server/cred/controller.kubeconfig
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-ca.key
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-ca.nochain.crt
        type: File
      name: file3
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-controller.crt
        type: File
      name: file4
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-controller.key
        type: File
      name: file5
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/server-ca.crt
        type: File
      name: file6
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/server-ca.key
        type: File
      name: file7
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/server-ca.nochain.crt
        type: File
      name: file8
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/service.current.key
        type: File
      name: file9
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/kube-controller-manager
        type: DirectoryOrCreate
      name: extra-mount-0
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9fdf5c125885dff752057845785479434a9d79c00d4d0b38378488a931482ed1
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-controller-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:12Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 0c59cee352be5dc3e75c963f2c7b5a0b
      kubernetes.io/config.mirror: 0c59cee352be5dc3e75c963f2c7b5a0b
      kubernetes.io/config.seen: "2024-08-06T01:51:43.346049440Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T01:51:43Z"
    labels:
      component: kube-proxy
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9b6fb3e0-6ead-4e4f-bb03-9bc72f605557"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T01:51:43Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:16Z"
    name: kube-proxy-harvesterdev1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev1
      uid: 9b6fb3e0-6ead-4e4f-bb03-9bc72f605557
    resourceVersion: "4034"
    uid: 91c59feb-a20e-4bd2-9949-b7568d21dffa
  spec:
    containers:
    - args:
      - --cluster-cidr=10.52.0.0/16
      - --conntrack-max-per-core=0
      - --conntrack-tcp-timeout-close-wait=0s
      - --conntrack-tcp-timeout-established=0s
      - --healthz-bind-address=127.0.0.1
      - --hostname-override=harvesterdev1
      - --kubeconfig=/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
      - --proxy-mode=iptables
      command:
      - kube-proxy
      env:
      - name: FILE_HASH
        value: 5f6dd845b96a16add5e56bc2f898975fc3702e33ec6b6324f569c27f1e8d7004
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-proxy
      resources:
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/server-ca.crt
        name: file3
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/agent/server-ca.crt
        type: File
      name: file3
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1d34303a8a8548ec2ea2bd20c1b4dfd8f84975cf8d58e7eaedf55c285ff80551
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:51:43Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 76cc99085794391d8c43b4e03bdc86e4
      kubernetes.io/config.mirror: 76cc99085794391d8c43b4e03bdc86e4
      kubernetes.io/config.seen: "2024-08-06T02:11:20.071065357Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T02:11:20Z"
    labels:
      component: kube-proxy
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"141de37b-4cad-4b6f-9831-ffeed49d0658"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T02:11:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.71"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:39Z"
    name: kube-proxy-harvesterdev2
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev2
      uid: 141de37b-4cad-4b6f-9831-ffeed49d0658
    resourceVersion: "23390"
    uid: 6287dfa2-5916-41cf-94db-4426c5deb349
  spec:
    containers:
    - args:
      - --cluster-cidr=10.52.0.0/16
      - --conntrack-max-per-core=0
      - --conntrack-tcp-timeout-close-wait=0s
      - --conntrack-tcp-timeout-established=0s
      - --healthz-bind-address=127.0.0.1
      - --hostname-override=harvesterdev2
      - --kubeconfig=/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
      - --proxy-mode=iptables
      command:
      - kube-proxy
      env:
      - name: FILE_HASH
        value: 5f6dd845b96a16add5e56bc2f898975fc3702e33ec6b6324f569c27f1e8d7004
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-proxy
      resources:
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/server-ca.crt
        name: file3
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev2
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/agent/server-ca.crt
        type: File
      name: file3
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://505a5fd7a5d1cf74afc9f93d8ba6378852daca4f66ba6e7fc25b907b65ccd501
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:22Z"
    hostIP: 10.10.110.71
    phase: Running
    podIP: 10.10.110.71
    podIPs:
    - ip: 10.10.110.71
    qosClass: Burstable
    startTime: "2024-08-06T02:11:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: baf370464bc77bf804a314b39935df98
      kubernetes.io/config.mirror: baf370464bc77bf804a314b39935df98
      kubernetes.io/config.seen: "2024-08-06T02:13:11.745864550Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T02:13:11Z"
    labels:
      component: kube-proxy
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"450a2bb5-9551-4e4f-aa7a-6a8a583bbef8"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.61"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:27Z"
    name: kube-proxy-harvesterdev3
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev3
      uid: 450a2bb5-9551-4e4f-aa7a-6a8a583bbef8
    resourceVersion: "26426"
    uid: 3427d680-94b3-4ae6-b999-dc18cd6b5496
  spec:
    containers:
    - args:
      - --cluster-cidr=10.52.0.0/16
      - --conntrack-max-per-core=0
      - --conntrack-tcp-timeout-close-wait=0s
      - --conntrack-tcp-timeout-established=0s
      - --healthz-bind-address=127.0.0.1
      - --hostname-override=harvesterdev3
      - --kubeconfig=/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
      - --proxy-mode=iptables
      command:
      - kube-proxy
      env:
      - name: FILE_HASH
        value: 5f6dd845b96a16add5e56bc2f898975fc3702e33ec6b6324f569c27f1e8d7004
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-proxy
      resources:
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/server-ca.crt
        name: file3
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev3
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/agent/server-ca.crt
        type: File
      name: file3
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b667ba86513f830efe0fb7744411fa1588a437e5ba193d50cba5fc2e1e74b0b8
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:13:14Z"
    hostIP: 10.10.110.61
    phase: Running
    podIP: 10.10.110.61
    podIPs:
    - ip: 10.10.110.61
    qosClass: Burstable
    startTime: "2024-08-06T02:13:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 563b863b6de5417060b5a564346c68fd
      kubernetes.io/config.mirror: 563b863b6de5417060b5a564346c68fd
      kubernetes.io/config.seen: "2024-08-06T02:15:23.985318396Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T02:15:24Z"
    labels:
      component: kube-proxy
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"cb77b855-ef85-4af4-b07c-b9963a49007b"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/agent/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T02:15:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.232"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:15:43Z"
    name: kube-proxy-harvesterdev7
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev7
      uid: cb77b855-ef85-4af4-b07c-b9963a49007b
    resourceVersion: "29930"
    uid: 4320867c-edb2-4dbe-9cf8-a0679c8b87fd
  spec:
    containers:
    - args:
      - --cluster-cidr=10.52.0.0/16
      - --conntrack-max-per-core=0
      - --conntrack-tcp-timeout-close-wait=0s
      - --conntrack-tcp-timeout-established=0s
      - --healthz-bind-address=127.0.0.1
      - --hostname-override=harvesterdev7
      - --kubeconfig=/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
      - --proxy-mode=iptables
      command:
      - kube-proxy
      env:
      - name: FILE_HASH
        value: 5f6dd845b96a16add5e56bc2f898975fc3702e33ec6b6324f569c27f1e8d7004
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-proxy
      resources:
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10256
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/agent/server-ca.crt
        name: file3
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev7
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/agent/client-kube-proxy.key
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/agent/server-ca.crt
        type: File
      name: file3
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8c1bba5c52ad9799cfed14ac5ab9941bd27bd52177475324cbaaf5bea4baea73
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:15:29Z"
    hostIP: 10.10.110.232
    phase: Running
    podIP: 10.10.110.232
    podIPs:
    - ip: 10.10.110.232
    qosClass: Burstable
    startTime: "2024-08-06T02:15:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 4fb79a53f7cafdbfe1922bd8d067fd48
      kubernetes.io/config.mirror: 4fb79a53f7cafdbfe1922bd8d067fd48
      kubernetes.io/config.seen: "2024-08-06T01:55:11.555843901Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-06T01:55:12Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9b6fb3e0-6ead-4e4f-bb03-9bc72f605557"}: {}
        f:spec:
          f:containers:
            k:{"name":"kube-scheduler"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FILE_HASH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NO_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/name"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-scheduler.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-scheduler.key"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/kube-scheduler"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"extra-mount-0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file0"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file1"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file3"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"file4"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubelet
      operation: Update
      time: "2024-08-06T01:55:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:28Z"
    name: kube-scheduler-harvesterdev1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: harvesterdev1
      uid: 9b6fb3e0-6ead-4e4f-bb03-9bc72f605557
    resourceVersion: "4383"
    uid: 0f0486c2-f9ea-4b45-b4af-b5850e06ab25
  spec:
    containers:
    - args:
      - --permit-port-sharing=true
      - --authentication-kubeconfig=/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
      - --authorization-kubeconfig=/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
      - --bind-address=127.0.0.1
      - --cert-dir=/var/lib/rancher/rke2/server/tls/kube-scheduler
      - --kubeconfig=/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
      - --profiling=false
      - --secure-port=10259
      command:
      - kube-scheduler
      env:
      - name: FILE_HASH
        value: 9e95c9c5f6988d995a1487b7647f2ab9c5ad1fe604ddca159f8abea01d0f52e0
      - name: NO_PROXY
        value: .svc,.cluster.local,10.52.0.0/16,10.53.0.0/16
      image: index.docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: localhost
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        privileged: false
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: localhost
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rancher/rke2/server/db/etcd/name
        name: file0
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
        name: file1
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-scheduler.crt
        name: file2
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/client-scheduler.key
        name: file3
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
        name: file4
        readOnly: true
      - mountPath: /var/lib/rancher/rke2/server/tls/kube-scheduler
        name: extra-mount-0
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/rancher/rke2/server/db/etcd/name
        type: File
      name: file0
    - hostPath:
        path: /var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
        type: File
      name: file1
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-scheduler.crt
        type: File
      name: file2
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/client-scheduler.key
        type: File
      name: file3
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/server-ca.crt
        type: File
      name: file4
    - hostPath:
        path: /var/lib/rancher/rke2/server/tls/kube-scheduler
        type: DirectoryOrCreate
      name: extra-mount-0
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://beebe90413adf946ad41a3729fc784c574c186b0fa768341c57099a96fcabc51
      image: docker.io/rancher/hardened-kubernetes:v1.27.13-rke2r1-build20240416
      imageID: sha256:0b811a311e23cdcbaff7d1bc82f04870ab14a1c8646c504f9ee30cb2c56974c1
      lastState: {}
      name: kube-scheduler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:12Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:55:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T02:15:24Z"
    generateName: rke2-canal-
    labels:
      controller-revision-hash: 59f689fcb
      k8s-app: canal
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9afa51e2-4bed-4340-b686-b49b48ab7051"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_FAILSAFEINBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_FAILSAFEOUTBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESMARKMASK"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESREFRESHINTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_PROMETHEUSMETRICSENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_XDPENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"USE_POD_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/calico/cni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"kube-flannel"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FLANNELD_IFACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IFACE_REGEX"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IP_MASQ"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kube-flannel/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_MTU"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-log-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flannel-cfg"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:15:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.232"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:15:43Z"
    name: rke2-canal-5x7kr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-canal
      uid: 9afa51e2-4bed-4340-b686-b49b48ab7051
    resourceVersion: "29932"
    uid: f0eba93f-da21-4422-9868-d9e4a9cd7598
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev7
    containers:
    - command:
      - start_runit
      env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: USE_POD_CIDR
        value: "true"
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CALICO_NETWORKING_BACKEND
        value: none
      - name: CLUSTER_TYPE
        value: k8s,canal
      - name: FELIX_IPTABLESREFRESHINTERVAL
        value: "60"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_LOGSEVERITYSCREEN
        value: info
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: FELIX_PROMETHEUSMETRICSENABLED
        value: "true"
      - name: FELIX_XDPENABLED
        value: "false"
      - name: FELIX_FAILSAFEINBOUNDHOSTPORTS
      - name: FELIX_FAILSAFEOUTBOUNDHOSTPORTS
      - name: FELIX_IPTABLESMARKMASK
        value: "0xffff0000"
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /usr/bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /usr/bin/calico-node
          - -felix-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-csf2s
        readOnly: true
    - command:
      - /opt/bin/flanneld
      - --ip-masq
      - --kube-subnet-mgr
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FLANNELD_IFACE
        valueFrom:
          configMapKeyRef:
            key: canal_iface
            name: rke2-canal-config
      - name: FLANNELD_IFACE_REGEX
        valueFrom:
          configMapKeyRef:
            key: canal_iface_regex
            name: rke2-canal-config
      - name: FLANNELD_IP_MASQ
        valueFrom:
          configMapKeyRef:
            key: masquerade
            name: rke2-canal-config
      image: rancher/hardened-flannel:v0.25.1-build20240423
      imagePullPolicy: IfNotPresent
      name: kube-flannel
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /etc/kube-flannel/
        name: flannel-cfg
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-csf2s
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/install
      env:
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CNI_CONF_NAME
        value: 10-canal.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: rke2-canal-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: rke2-canal-config
      - name: SLEEP
        value: "false"
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-csf2s
        readOnly: true
    - command:
      - /usr/local/bin/flexvol.sh
      - -s
      - /usr/local/bin/flexvol
      - -i
      - flexvoldriver
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-csf2s
        readOnly: true
    nodeName: harvesterdev7
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: canal
    serviceAccountName: canal
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: "null"
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: "null"
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: "null"
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        name: rke2-canal-config
      name: flannel-cfg
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: "null"
      name: cni-log-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - hostPath:
        path: /var/lib/kubelet/volumeplugins/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: kube-api-access-csf2s
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:40Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://dcd109b309e3f5ac8cecfd2e3ac6624cb636ed0f9200b4d114a70792d25beee5
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:15:40Z"
    - containerID: containerd://e170615e6f4d170683f40e77466400dcfd9fb31728a8722d49bf2286769c9c47
      image: docker.io/rancher/hardened-flannel:v0.25.1-build20240423
      imageID: sha256:398c3d1a135f0a5236d019bf9d758603911fba3f2b0e30208def7616f3dea2e7
      lastState: {}
      name: kube-flannel
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:15:41Z"
    hostIP: 10.10.110.232
    initContainerStatuses:
    - containerID: containerd://868ab4076096b2c191d6a8be0e05f332b8c0862572b7b7bde0e437d27e930eb1
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://868ab4076096b2c191d6a8be0e05f332b8c0862572b7b7bde0e437d27e930eb1
          exitCode: 0
          finishedAt: "2024-08-06T02:15:35Z"
          reason: Completed
          startedAt: "2024-08-06T02:15:32Z"
    - containerID: containerd://30b7012925272518308cccde0d5cb0712539e31ec5caa6559d64c781ce88624b
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://30b7012925272518308cccde0d5cb0712539e31ec5caa6559d64c781ce88624b
          exitCode: 0
          finishedAt: "2024-08-06T02:15:36Z"
          reason: Completed
          startedAt: "2024-08-06T02:15:36Z"
    phase: Running
    podIP: 10.10.110.232
    podIPs:
    - ip: 10.10.110.232
    qosClass: Burstable
    startTime: "2024-08-06T02:15:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T02:11:20Z"
    generateName: rke2-canal-
    labels:
      controller-revision-hash: 59f689fcb
      k8s-app: canal
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9afa51e2-4bed-4340-b686-b49b48ab7051"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_FAILSAFEINBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_FAILSAFEOUTBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESMARKMASK"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESREFRESHINTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_PROMETHEUSMETRICSENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_XDPENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"USE_POD_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/calico/cni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"kube-flannel"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FLANNELD_IFACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IFACE_REGEX"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IP_MASQ"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kube-flannel/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_MTU"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-log-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flannel-cfg"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:11:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.71"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:29Z"
    name: rke2-canal-gssgp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-canal
      uid: 9afa51e2-4bed-4340-b686-b49b48ab7051
    resourceVersion: "23103"
    uid: f3618f02-b452-4d5a-a5ac-66aa3942bd19
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev2
    containers:
    - command:
      - start_runit
      env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: USE_POD_CIDR
        value: "true"
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CALICO_NETWORKING_BACKEND
        value: none
      - name: CLUSTER_TYPE
        value: k8s,canal
      - name: FELIX_IPTABLESREFRESHINTERVAL
        value: "60"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_LOGSEVERITYSCREEN
        value: info
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: FELIX_PROMETHEUSMETRICSENABLED
        value: "true"
      - name: FELIX_XDPENABLED
        value: "false"
      - name: FELIX_FAILSAFEINBOUNDHOSTPORTS
      - name: FELIX_FAILSAFEOUTBOUNDHOSTPORTS
      - name: FELIX_IPTABLESMARKMASK
        value: "0xffff0000"
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /usr/bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /usr/bin/calico-node
          - -felix-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4ql8c
        readOnly: true
    - command:
      - /opt/bin/flanneld
      - --ip-masq
      - --kube-subnet-mgr
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FLANNELD_IFACE
        valueFrom:
          configMapKeyRef:
            key: canal_iface
            name: rke2-canal-config
      - name: FLANNELD_IFACE_REGEX
        valueFrom:
          configMapKeyRef:
            key: canal_iface_regex
            name: rke2-canal-config
      - name: FLANNELD_IP_MASQ
        valueFrom:
          configMapKeyRef:
            key: masquerade
            name: rke2-canal-config
      image: rancher/hardened-flannel:v0.25.1-build20240423
      imagePullPolicy: IfNotPresent
      name: kube-flannel
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /etc/kube-flannel/
        name: flannel-cfg
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4ql8c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/install
      env:
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CNI_CONF_NAME
        value: 10-canal.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: rke2-canal-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: rke2-canal-config
      - name: SLEEP
        value: "false"
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4ql8c
        readOnly: true
    - command:
      - /usr/local/bin/flexvol.sh
      - -s
      - /usr/local/bin/flexvol
      - -i
      - flexvoldriver
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4ql8c
        readOnly: true
    nodeName: harvesterdev2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: canal
    serviceAccountName: canal
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: "null"
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: "null"
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: "null"
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        name: rke2-canal-config
      name: flannel-cfg
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: "null"
      name: cni-log-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - hostPath:
        path: /var/lib/kubelet/volumeplugins/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: kube-api-access-4ql8c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://452831b1d99cdc2bc85994e50f087b32975d8a6c144a901d1e9887e6d9c9985f
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:26Z"
    - containerID: containerd://b5d3920015f6ed89b1105025649da6fac7eebf30fe3aafa208885b90875c1d12
      image: docker.io/rancher/hardened-flannel:v0.25.1-build20240423
      imageID: sha256:398c3d1a135f0a5236d019bf9d758603911fba3f2b0e30208def7616f3dea2e7
      lastState: {}
      name: kube-flannel
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:27Z"
    hostIP: 10.10.110.71
    initContainerStatuses:
    - containerID: containerd://61a8f087e060945d5770e007de6947ef33777df029a9f55abd9d62c56e923691
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://61a8f087e060945d5770e007de6947ef33777df029a9f55abd9d62c56e923691
          exitCode: 0
          finishedAt: "2024-08-06T02:11:24Z"
          reason: Completed
          startedAt: "2024-08-06T02:11:23Z"
    - containerID: containerd://7cbec8d191c55ea43b48278dca96be5175b1931c3304f459b7d9a3bcb855ed03
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://7cbec8d191c55ea43b48278dca96be5175b1931c3304f459b7d9a3bcb855ed03
          exitCode: 0
          finishedAt: "2024-08-06T02:11:25Z"
          reason: Completed
          startedAt: "2024-08-06T02:11:25Z"
    phase: Running
    podIP: 10.10.110.71
    podIPs:
    - ip: 10.10.110.71
    qosClass: Burstable
    startTime: "2024-08-06T02:11:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T01:51:48Z"
    generateName: rke2-canal-
    labels:
      controller-revision-hash: 59f689fcb
      k8s-app: canal
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9afa51e2-4bed-4340-b686-b49b48ab7051"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_FAILSAFEINBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_FAILSAFEOUTBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESMARKMASK"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESREFRESHINTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_PROMETHEUSMETRICSENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_XDPENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"USE_POD_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/calico/cni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"kube-flannel"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FLANNELD_IFACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IFACE_REGEX"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IP_MASQ"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kube-flannel/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_MTU"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-log-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flannel-cfg"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:18Z"
    name: rke2-canal-jwqrp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-canal
      uid: 9afa51e2-4bed-4340-b686-b49b48ab7051
    resourceVersion: "4047"
    uid: 9009e2a8-9955-43c5-a28a-d80a99790641
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev1
    containers:
    - command:
      - start_runit
      env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: USE_POD_CIDR
        value: "true"
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CALICO_NETWORKING_BACKEND
        value: none
      - name: CLUSTER_TYPE
        value: k8s,canal
      - name: FELIX_IPTABLESREFRESHINTERVAL
        value: "60"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_LOGSEVERITYSCREEN
        value: info
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: FELIX_PROMETHEUSMETRICSENABLED
        value: "true"
      - name: FELIX_XDPENABLED
        value: "false"
      - name: FELIX_FAILSAFEINBOUNDHOSTPORTS
      - name: FELIX_FAILSAFEOUTBOUNDHOSTPORTS
      - name: FELIX_IPTABLESMARKMASK
        value: "0xffff0000"
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /usr/bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /usr/bin/calico-node
          - -felix-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bltrn
        readOnly: true
    - command:
      - /opt/bin/flanneld
      - --ip-masq
      - --kube-subnet-mgr
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FLANNELD_IFACE
        valueFrom:
          configMapKeyRef:
            key: canal_iface
            name: rke2-canal-config
      - name: FLANNELD_IFACE_REGEX
        valueFrom:
          configMapKeyRef:
            key: canal_iface_regex
            name: rke2-canal-config
      - name: FLANNELD_IP_MASQ
        valueFrom:
          configMapKeyRef:
            key: masquerade
            name: rke2-canal-config
      image: rancher/hardened-flannel:v0.25.1-build20240423
      imagePullPolicy: IfNotPresent
      name: kube-flannel
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /etc/kube-flannel/
        name: flannel-cfg
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bltrn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/install
      env:
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CNI_CONF_NAME
        value: 10-canal.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: rke2-canal-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: rke2-canal-config
      - name: SLEEP
        value: "false"
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bltrn
        readOnly: true
    - command:
      - /usr/local/bin/flexvol.sh
      - -s
      - /usr/local/bin/flexvol
      - -i
      - flexvoldriver
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bltrn
        readOnly: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: canal
    serviceAccountName: canal
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: "null"
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: "null"
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: "null"
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        name: rke2-canal-config
      name: flannel-cfg
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: "null"
      name: cni-log-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - hostPath:
        path: /var/lib/kubelet/volumeplugins/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: kube-api-access-bltrn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:18Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:18Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1b8e38bf4aa03b713b0134f815cbf6483cdd0bb42ce2840bfdd9a5bed1c15c40
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:51:53Z"
    - containerID: containerd://492ae7f948501d86b3bfc66398d11c39d4db538705419f4577189d5baa5c197a
      image: docker.io/rancher/hardened-flannel:v0.25.1-build20240423
      imageID: sha256:398c3d1a135f0a5236d019bf9d758603911fba3f2b0e30208def7616f3dea2e7
      lastState: {}
      name: kube-flannel
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:51:54Z"
    hostIP: 10.10.110.11
    initContainerStatuses:
    - containerID: containerd://3198141625934e2d0e88825aab6b8c4f0e15248b135d9fcb2a7737adc4d668c7
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://3198141625934e2d0e88825aab6b8c4f0e15248b135d9fcb2a7737adc4d668c7
          exitCode: 0
          finishedAt: "2024-08-06T01:51:51Z"
          reason: Completed
          startedAt: "2024-08-06T01:51:51Z"
    - containerID: containerd://060e89038f8ce6e632c4040e3c0e16a396f865a8dc8d62965aa84f0147fbc591
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://060e89038f8ce6e632c4040e3c0e16a396f865a8dc8d62965aa84f0147fbc591
          exitCode: 0
          finishedAt: "2024-08-06T01:51:52Z"
          reason: Completed
          startedAt: "2024-08-06T01:51:52Z"
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:51:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-06T02:13:12Z"
    generateName: rke2-canal-
    labels:
      controller-revision-hash: 59f689fcb
      k8s-app: canal
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9afa51e2-4bed-4340-b686-b49b48ab7051"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_FAILSAFEINBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_FAILSAFEOUTBOUNDHOSTPORTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESMARKMASK"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESREFRESHINTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_PROMETHEUSMETRICSENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_XDPENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"USE_POD_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log/calico/cni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"kube-flannel"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"FLANNELD_IFACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IFACE_REGEX"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"FLANNELD_IP_MASQ"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kube-flannel/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_MTU"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-log-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flannel-cfg"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.61"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:19Z"
    name: rke2-canal-pwhs8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-canal
      uid: 9afa51e2-4bed-4340-b686-b49b48ab7051
    resourceVersion: "26202"
    uid: 4cd2c288-ea0c-4d89-a6f9-7c6ffd472a4a
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev3
    containers:
    - command:
      - start_runit
      env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: USE_POD_CIDR
        value: "true"
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CALICO_NETWORKING_BACKEND
        value: none
      - name: CLUSTER_TYPE
        value: k8s,canal
      - name: FELIX_IPTABLESREFRESHINTERVAL
        value: "60"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_LOGSEVERITYSCREEN
        value: info
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: FELIX_PROMETHEUSMETRICSENABLED
        value: "true"
      - name: FELIX_XDPENABLED
        value: "false"
      - name: FELIX_FAILSAFEINBOUNDHOSTPORTS
      - name: FELIX_FAILSAFEOUTBOUNDHOSTPORTS
      - name: FELIX_IPTABLESMARKMASK
        value: "0xffff0000"
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /usr/bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /usr/bin/calico-node
          - -felix-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v2hzd
        readOnly: true
    - command:
      - /opt/bin/flanneld
      - --ip-masq
      - --kube-subnet-mgr
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FLANNELD_IFACE
        valueFrom:
          configMapKeyRef:
            key: canal_iface
            name: rke2-canal-config
      - name: FLANNELD_IFACE_REGEX
        valueFrom:
          configMapKeyRef:
            key: canal_iface_regex
            name: rke2-canal-config
      - name: FLANNELD_IP_MASQ
        valueFrom:
          configMapKeyRef:
            key: masquerade
            name: rke2-canal-config
      image: rancher/hardened-flannel:v0.25.1-build20240423
      imagePullPolicy: IfNotPresent
      name: kube-flannel
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /etc/kube-flannel/
        name: flannel-cfg
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v2hzd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/install
      env:
      - name: CALICO_CNI_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CNI_CONF_NAME
        value: 10-canal.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: rke2-canal-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: rke2-canal-config
      - name: SLEEP
        value: "false"
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v2hzd
        readOnly: true
    - command:
      - /usr/local/bin/flexvol.sh
      - -s
      - /usr/local/bin/flexvol
      - -i
      - flexvoldriver
      image: rancher/hardened-calico:v3.27.3-build20240423
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v2hzd
        readOnly: true
    nodeName: harvesterdev3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: canal
    serviceAccountName: canal
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: "null"
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: "null"
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: "null"
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        name: rke2-canal-config
      name: flannel-cfg
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: "null"
      name: cni-log-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - hostPath:
        path: /var/lib/kubelet/volumeplugins/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: kube-api-access-v2hzd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6413e6cc68ddf0ebe51e6555e0376a8eb3c32adbf50f398c5b47fb9ac9392fa5
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:13:17Z"
    - containerID: containerd://8539327f31f0294eb64a3ecc5b496302c316fc2861d19d3c05f022e7b1151f3f
      image: docker.io/rancher/hardened-flannel:v0.25.1-build20240423
      imageID: sha256:398c3d1a135f0a5236d019bf9d758603911fba3f2b0e30208def7616f3dea2e7
      lastState: {}
      name: kube-flannel
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:13:18Z"
    hostIP: 10.10.110.61
    initContainerStatuses:
    - containerID: containerd://23d1009d8bb8bacc76a34ca2c4402fef283a7cf535ee5528722cf5e4ed3a2c11
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://23d1009d8bb8bacc76a34ca2c4402fef283a7cf535ee5528722cf5e4ed3a2c11
          exitCode: 0
          finishedAt: "2024-08-06T02:13:15Z"
          reason: Completed
          startedAt: "2024-08-06T02:13:15Z"
    - containerID: containerd://8fb8128218850b0054c339f5452911e21b4fe0bdfff4c2918b63d14324d38406
      image: docker.io/rancher/hardened-calico:v3.27.3-build20240423
      imageID: sha256:3564b4ac1d3dca86615adb0d717697d1412055682a61ab388ecf72d3eee10e59
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://8fb8128218850b0054c339f5452911e21b4fe0bdfff4c2918b63d14324d38406
          exitCode: 0
          finishedAt: "2024-08-06T02:13:16Z"
          reason: Completed
          startedAt: "2024-08-06T02:13:16Z"
    phase: Running
    podIP: 10.10.110.61
    podIPs:
    - ip: 10.10.110.61
    qosClass: Burstable
    startTime: "2024-08-06T02:13:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: d087fd48fbc5849d41100749f59dcecc245a1470fd4054faf715000c2473f5e5
      cni.projectcalico.org/containerID: 55f900fb415361f33f9bd70c6b4d7825c4846eb8923b0e0a7b191a8e2fc818ee
      cni.projectcalico.org/podIP: 10.52.1.2/32
      cni.projectcalico.org/podIPs: 10.52.1.2/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.1.2"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T02:11:29Z"
    generateName: rke2-coredns-rke2-coredns-864fbd7785-
    labels:
      app.kubernetes.io/instance: rke2-coredns
      app.kubernetes.io/name: rke2-coredns
      k8s-app: kube-dns
      pod-template-hash: 864fbd7785
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:29Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8dfb4eb8-4d72-4182-ae36-1d7cc38747a3"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:11:29Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:29Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.1.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:12:05Z"
    name: rke2-coredns-rke2-coredns-864fbd7785-bwfcp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: rke2-coredns-rke2-coredns-864fbd7785
      uid: 8dfb4eb8-4d72-4182-ae36-1d7cc38747a3
    resourceVersion: "24050"
    uid: b25c1dbc-f4cc-4be1-86aa-2a59f674edf9
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: k8s-app
              operator: In
              values:
              - kube-dns
          topologyKey: kubernetes.io/hostname
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: rancher/hardened-coredns:v1.11.1-build20240305
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: udp-53
        protocol: UDP
      - containerPort: 53
        name: tcp-53
        protocol: TCP
      - containerPort: 9153
        name: tcp-9153
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        capabilities:
          add:
          - NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-94hl4
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: harvesterdev2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: rke2-coredns-rke2-coredns
      name: config-volume
    - name: kube-api-access-94hl4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:12:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:12:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c2396bf4cfc4a27dbec5e26cf3cb55d0653f5beeb2abbe26f26b7d5cf00d83d5
      image: docker.io/rancher/hardened-coredns:v1.11.1-build20240305
      imageID: sha256:00df8b41cfd2ed413f320b6306d5f7eaab3440371710ff4ddbfe4ef9b0bde4d2
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:31Z"
    hostIP: 10.10.110.71
    phase: Running
    podIP: 10.52.1.2
    podIPs:
    - ip: 10.52.1.2
    qosClass: Guaranteed
    startTime: "2024-08-06T02:11:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: d087fd48fbc5849d41100749f59dcecc245a1470fd4054faf715000c2473f5e5
      cni.projectcalico.org/containerID: 1f7896b23567fed05c8f567e669e01a81aea1f664175583e6b87e07071484ce4
      cni.projectcalico.org/podIP: 10.52.0.4/32
      cni.projectcalico.org/podIPs: 10.52.0.4/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.4"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:51:48Z"
    generateName: rke2-coredns-rke2-coredns-864fbd7785-
    labels:
      app.kubernetes.io/instance: rke2-coredns
      app.kubernetes.io/name: rke2-coredns
      k8s-app: kube-dns
      pod-template-hash: 864fbd7785
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8dfb4eb8-4d72-4182-ae36-1d7cc38747a3"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2024-08-06T01:51:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:06Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:06Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:15Z"
    name: rke2-coredns-rke2-coredns-864fbd7785-jc77s
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: rke2-coredns-rke2-coredns-864fbd7785
      uid: 8dfb4eb8-4d72-4182-ae36-1d7cc38747a3
    resourceVersion: "4000"
    uid: dec5c1bd-dfb3-4178-a3d4-20d3dd79e4fd
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: k8s-app
              operator: In
              values:
              - kube-dns
          topologyKey: kubernetes.io/hostname
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: rancher/hardened-coredns:v1.11.1-build20240305
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: udp-53
        protocol: UDP
      - containerPort: 53
        name: tcp-53
        protocol: TCP
      - containerPort: 9153
        name: tcp-9153
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        capabilities:
          add:
          - NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lklbr
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: rke2-coredns-rke2-coredns
      name: config-volume
    - name: kube-api-access-lklbr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5ba3ab86edb6f34c9088645d9595708ffcd7b4e71c98b4c9c1bafa7048c07c70
      image: docker.io/rancher/hardened-coredns:v1.11.1-build20240305
      imageID: sha256:00df8b41cfd2ed413f320b6306d5f7eaab3440371710ff4ddbfe4ef9b0bde4d2
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:52:08Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.4
    podIPs:
    - ip: 10.52.0.4
    qosClass: Guaranteed
    startTime: "2024-08-06T01:51:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/configmap: fe7a6a80a6774aa97c4fb9cba093d715525a9665f9dc6a3141b10eaea8395811
      cni.projectcalico.org/containerID: 60fc2c19f7e4ad69e5c722b3fcdb23e9d0f09eb6dd598a2ac35ef51022107ac3
      cni.projectcalico.org/podIP: 10.52.0.7/32
      cni.projectcalico.org/podIPs: 10.52.0.7/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.7"
            ],
            "default": true,
            "dns": {}
        }]
      scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    creationTimestamp: "2024-08-06T01:51:48Z"
    generateName: rke2-coredns-rke2-coredns-autoscaler-6c87968579-
    labels:
      app.kubernetes.io/instance: rke2-coredns
      app.kubernetes.io/name: rke2-coredns-autoscaler
      k8s-app: kube-dns-autoscaler
      pod-template-hash: 6c87968579
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/configmap: {}
            f:scheduler.alpha.kubernetes.io/tolerations: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7e5a025c-15b4-4ff5-8dd4-8ba55fb0bd51"}: {}
        f:spec:
          f:containers:
            k:{"name":"autoscaler"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2024-08-06T01:51:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:07Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:07Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:09Z"
    name: rke2-coredns-rke2-coredns-autoscaler-6c87968579-cfkt6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: rke2-coredns-rke2-coredns-autoscaler-6c87968579
      uid: 7e5a025c-15b4-4ff5-8dd4-8ba55fb0bd51
    resourceVersion: "970"
    uid: 6ef89b59-2445-491e-b7fc-a89b0ea3e5d0
  spec:
    containers:
    - command:
      - /cluster-proportional-autoscaler
      - --namespace=kube-system
      - --configmap=rke2-coredns-rke2-coredns-autoscaler
      - --target=Deployment/rke2-coredns-rke2-coredns
      - --logtostderr=true
      - --v=2
      image: rancher/hardened-cluster-autoscaler:v1.8.10-build20240124
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: autoscaler
      resources:
        limits:
          cpu: 100m
          memory: 64Mi
        requests:
          cpu: 25m
          memory: 16Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4rhz9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rke2-coredns-rke2-coredns-autoscaler
    serviceAccountName: rke2-coredns-rke2-coredns-autoscaler
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4rhz9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cda25118475415401a6751fb6f1ae7d87c5d4d76580d8f7557ca8c5b8508a859
      image: docker.io/rancher/hardened-cluster-autoscaler:v1.8.10-build20240124
      imageID: sha256:cd00dc5289588b0ccec93e92bc996948783a7a791d46d04d12227a0f6cc5c6cd
      lastState: {}
      name: autoscaler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:52:08Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.7
    podIPs:
    - ip: 10.52.0.7
    qosClass: Burstable
    startTime: "2024-08-06T01:51:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 831532e4d7b70fa636fdc19fecf7a99d5ae284f441309e5d578e46734ab30c0a
      cni.projectcalico.org/podIP: 10.52.0.29/32
      cni.projectcalico.org/podIPs: 10.52.0.29/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.29"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:53:48Z"
    generateName: rke2-ingress-nginx-controller-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: rke2-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: rke2-ingress-nginx
      app.kubernetes.io/part-of: rke2-ingress-nginx
      app.kubernetes.io/version: 1.9.6
      controller-revision-hash: 58b87fbbb
      helm.sh/chart: rke2-ingress-nginx-4.9.100
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dfcedcbd-d9c5-4bcd-9f04-450678a4df09"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"rke2-ingress-nginx-controller"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"LD_PRELOAD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8444,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/local/certificates/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"webhook-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:53:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:53:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:53:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.29"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:19Z"
    name: rke2-ingress-nginx-controller-ddpjc
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-ingress-nginx-controller
      uid: dfcedcbd-d9c5-4bcd-9f04-450678a4df09
    resourceVersion: "4057"
    uid: 36ac3aa1-348b-4545-98a5-b9c970d30da4
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev1
    containers:
    - args:
      - /nginx-ingress-controller
      - --election-id=rke2-ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/rke2-ingress-nginx-controller
      - --validating-webhook=:8444
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --watch-ingress-without-class=true
      - --default-ssl-certificate=cattle-system/tls-rancher-internal
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: rke2-ingress-nginx-controller
      ports:
      - containerPort: 80
        hostPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        name: https
        protocol: TCP
      - containerPort: 8444
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dnd62
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rke2-ingress-nginx
    serviceAccountName: rke2-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: rke2-ingress-nginx-admission
    - name: kube-api-access-dnd62
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:53:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:53:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2b28ca6a91493b3a5a1ebbc8992c6492297850f98245bcec525a9f756675bb6e
      image: docker.io/rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imageID: sha256:3f5b7fd2026e93e4ac1d3a51cc59045effc558570b71bc83db1d50f7700f9bf0
      lastState: {}
      name: rke2-ingress-nginx-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:53:49Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.29
    podIPs:
    - ip: 10.52.0.29
    qosClass: Burstable
    startTime: "2024-08-06T01:53:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: ac3bf49b9c62298a176cd92f6916cd610178ce18d9dd398973f6a45daa541e29
      cni.projectcalico.org/podIP: 10.52.2.10/32
      cni.projectcalico.org/podIPs: 10.52.2.10/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.2.10"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T02:13:16Z"
    generateName: rke2-ingress-nginx-controller-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: rke2-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: rke2-ingress-nginx
      app.kubernetes.io/part-of: rke2-ingress-nginx
      app.kubernetes.io/version: 1.9.6
      controller-revision-hash: 58b87fbbb
      helm.sh/chart: rke2-ingress-nginx-4.9.100
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dfcedcbd-d9c5-4bcd-9f04-450678a4df09"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"rke2-ingress-nginx-controller"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"LD_PRELOAD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8444,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/local/certificates/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"webhook-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:15Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:31Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:31Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.2.10"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:47Z"
    name: rke2-ingress-nginx-controller-gtgfl
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-ingress-nginx-controller
      uid: dfcedcbd-d9c5-4bcd-9f04-450678a4df09
    resourceVersion: "27080"
    uid: 998ba49c-3601-49a6-9d23-ebff420a29f0
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev3
    containers:
    - args:
      - /nginx-ingress-controller
      - --election-id=rke2-ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/rke2-ingress-nginx-controller
      - --validating-webhook=:8444
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --watch-ingress-without-class=true
      - --default-ssl-certificate=cattle-system/tls-rancher-internal
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: rke2-ingress-nginx-controller
      ports:
      - containerPort: 80
        hostPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        name: https
        protocol: TCP
      - containerPort: 8444
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dfs9h
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    nodeName: harvesterdev3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rke2-ingress-nginx
    serviceAccountName: rke2-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: rke2-ingress-nginx-admission
    - name: kube-api-access-dfs9h
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a51ad36c7d52ae5ac27acc6ff41009c6df2d3346bac07caf6248488af921b9f0
      image: docker.io/rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imageID: sha256:3f5b7fd2026e93e4ac1d3a51cc59045effc558570b71bc83db1d50f7700f9bf0
      lastState: {}
      name: rke2-ingress-nginx-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:13:35Z"
    hostIP: 10.10.110.61
    phase: Running
    podIP: 10.52.2.10
    podIPs:
    - ip: 10.52.2.10
    qosClass: Burstable
    startTime: "2024-08-06T02:13:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 31801de7d1fa1c120609fcd0a86787ad0e9e40b68b546486348ebd483fd86a6c
      cni.projectcalico.org/podIP: 10.52.3.11/32
      cni.projectcalico.org/podIPs: 10.52.3.11/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.3.11"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T02:15:35Z"
    generateName: rke2-ingress-nginx-controller-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: rke2-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: rke2-ingress-nginx
      app.kubernetes.io/part-of: rke2-ingress-nginx
      app.kubernetes.io/version: 1.9.6
      controller-revision-hash: 58b87fbbb
      helm.sh/chart: rke2-ingress-nginx-4.9.100
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dfcedcbd-d9c5-4bcd-9f04-450678a4df09"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"rke2-ingress-nginx-controller"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"LD_PRELOAD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8444,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/local/certificates/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"webhook-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:15:35Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T02:15:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T02:15:53Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.3.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:16:25Z"
    name: rke2-ingress-nginx-controller-kvsmb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-ingress-nginx-controller
      uid: dfcedcbd-d9c5-4bcd-9f04-450678a4df09
    resourceVersion: "30842"
    uid: ffbf40cd-a5d9-4337-ace0-26af794b6339
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev7
    containers:
    - args:
      - /nginx-ingress-controller
      - --election-id=rke2-ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/rke2-ingress-nginx-controller
      - --validating-webhook=:8444
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --watch-ingress-without-class=true
      - --default-ssl-certificate=cattle-system/tls-rancher-internal
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: rke2-ingress-nginx-controller
      ports:
      - containerPort: 80
        hostPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        name: https
        protocol: TCP
      - containerPort: 8444
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7r756
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    nodeName: harvesterdev7
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rke2-ingress-nginx
    serviceAccountName: rke2-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: rke2-ingress-nginx-admission
    - name: kube-api-access-7r756
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:16:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:16:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f17e42804e52ad8a707923b6484686c07386aa30b3a53cfea4be8a74ebe54b78
      image: docker.io/rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imageID: sha256:3f5b7fd2026e93e4ac1d3a51cc59045effc558570b71bc83db1d50f7700f9bf0
      lastState: {}
      name: rke2-ingress-nginx-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:16:11Z"
    hostIP: 10.10.110.232
    phase: Running
    podIP: 10.52.3.11
    podIPs:
    - ip: 10.52.3.11
    qosClass: Burstable
    startTime: "2024-08-06T02:15:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: bf1540791a0a06cb53391b0ba42bcc1f99b80f7270aa76f9941128582e56bbdd
      cni.projectcalico.org/podIP: 10.52.1.4/32
      cni.projectcalico.org/podIPs: 10.52.1.4/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.1.4"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T02:11:24Z"
    generateName: rke2-ingress-nginx-controller-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: rke2-ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: rke2-ingress-nginx
      app.kubernetes.io/part-of: rke2-ingress-nginx
      app.kubernetes.io/version: 1.9.6
      controller-revision-hash: 58b87fbbb
      helm.sh/chart: rke2-ingress-nginx-4.9.100
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dfcedcbd-d9c5-4bcd-9f04-450678a4df09"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"rke2-ingress-nginx-controller"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"LD_PRELOAD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8444,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/local/certificates/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"webhook-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:11:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.1.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:59Z"
    name: rke2-ingress-nginx-controller-kz8qf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-ingress-nginx-controller
      uid: dfcedcbd-d9c5-4bcd-9f04-450678a4df09
    resourceVersion: "23955"
    uid: 3ab38831-8942-4614-ac70-f434e8731f16
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev2
    containers:
    - args:
      - /nginx-ingress-controller
      - --election-id=rke2-ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/rke2-ingress-nginx-controller
      - --validating-webhook=:8444
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --watch-ingress-without-class=true
      - --default-ssl-certificate=cattle-system/tls-rancher-internal
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: rke2-ingress-nginx-controller
      ports:
      - containerPort: 80
        hostPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        name: https
        protocol: TCP
      - containerPort: 8444
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w4dkp
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    nodeName: harvesterdev2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rke2-ingress-nginx
    serviceAccountName: rke2-ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: rke2-ingress-nginx-admission
    - name: kube-api-access-w4dkp
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://360894349f0c849de492bcd55ceefebab9603ba3c44af46ab4d09c2b0696039a
      image: docker.io/rancher/nginx-ingress-controller:nginx-1.9.6-hardened1
      imageID: sha256:3f5b7fd2026e93e4ac1d3a51cc59045effc558570b71bc83db1d50f7700f9bf0
      lastState: {}
      name: rke2-ingress-nginx-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:42Z"
    hostIP: 10.10.110.71
    phase: Running
    podIP: 10.52.1.4
    podIPs:
    - ip: 10.52.1.4
    qosClass: Burstable
    startTime: "2024-08-06T02:11:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 60273f201673050bed1adb68c233744535fe47c6e5c553eaca39535f3e8f87b5
      cni.projectcalico.org/podIP: 10.52.0.3/32
      cni.projectcalico.org/podIPs: 10.52.0.3/32
    creationTimestamp: "2024-08-06T01:52:04Z"
    generateName: rke2-metrics-server-7f745dbddf-
    labels:
      app: rke2-metrics-server
      app.kubernetes.io/instance: rke2-metrics-server
      app.kubernetes.io/name: rke2-metrics-server
      pod-template-hash: 7f745dbddf
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"20dc7a25-6963-4b81-a62b-4ee580d1aacc"}: {}
        f:spec:
          f:containers:
            k:{"name":"metrics-server"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":10250,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:52:04Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:05Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:38Z"
    name: rke2-metrics-server-7f745dbddf-5trhx
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: rke2-metrics-server-7f745dbddf
      uid: 20dc7a25-6963-4b81-a62b-4ee580d1aacc
    resourceVersion: "4484"
    uid: a647228b-6b72-4814-a113-692e6613e13e
  spec:
    containers:
    - args:
      - --secure-port=10250
      - --cert-dir=/tmp
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --kubelet-use-node-status-port
      - --metric-resolution=15s
      image: rancher/hardened-k8s-metrics-server:v0.7.1-build20240401
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: metrics-server
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wt58j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2e+09
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rke2-metrics-server
    serviceAccountName: rke2-metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp
    - name: kube-api-access-wt58j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:04Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:04Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bd8863da1919fbe2d7f9af6093e7c5e558af32bdc1c346deee93afed8c26723b
      image: docker.io/rancher/hardened-k8s-metrics-server:v0.7.1-build20240401
      imageID: sha256:6d80f01a1966b703e599992bd91a9dff6b6fd391d2bb3cbb004501fa98c89e08
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:52:05Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.3
    podIPs:
    - ip: 10.52.0.3
    qosClass: Burstable
    startTime: "2024-08-06T01:52:04Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: fd23672d720fdddd8faf8f629c7eec5c444ad6484d2a654621fa7d4b5c65c4fc
    creationTimestamp: "2024-08-06T02:13:11Z"
    generateName: rke2-multus-
    labels:
      app: rke2-multus
      controller-revision-hash: 78f6bc8dc
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6b43d191-7d22-4e5c-8d21-15d6d2c19b70"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rke2-multus"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"cni-plugins"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"SKIP_CNI_BINARIES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.61"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:16Z"
    name: rke2-multus-2pxj6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-multus
      uid: 6b43d191-7d22-4e5c-8d21-15d6d2c19b70
    resourceVersion: "26085"
    uid: 4141cd1f-3e33-41e9-bc60-7d270c2eba4b
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev3
    containers:
    - args:
      - --multus-conf-file=auto
      - --multus-kubeconfig-file-host=/etc/cni/net.d/multus.d/multus.kubeconfig
      command:
      - /thin_entrypoint
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: rancher/hardened-multus-cni:v4.0.2-build20240208
      imagePullPolicy: IfNotPresent
      name: kube-rke2-multus
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mp8fh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: SKIP_CNI_BINARIES
        value: flannel
      image: rancher/hardened-cni-plugins:v1.4.0-build20240122
      imagePullPolicy: IfNotPresent
      name: cni-plugins
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mp8fh
        readOnly: true
    nodeName: harvesterdev3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: multus
    serviceAccountName: multus
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - name: kube-api-access-mp8fh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:13:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://fe92a4c3032302ca7ec161ce419c745626553690155557fc65392428c0912bfa
      image: docker.io/rancher/hardened-multus-cni:v4.0.2-build20240208
      imageID: sha256:d41d049a62ad0ffa1ee381f4e77307af24804d44217dde09fa2e1bce95de552b
      lastState:
        terminated:
          containerID: containerd://a1eb26a7cc9435c40d885e10be5b50bd0a5fcece5d5d7531f68dec284e7172e0
          exitCode: 0
          finishedAt: "2024-08-06T02:13:15Z"
          reason: Completed
          startedAt: "2024-08-06T02:13:15Z"
      name: kube-rke2-multus
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:13:15Z"
    hostIP: 10.10.110.61
    initContainerStatuses:
    - containerID: containerd://67600b2fff50bfe422e22bc7481febe07adf0a614a5602f7cd60ec23fae89226
      image: docker.io/rancher/hardened-cni-plugins:v1.4.0-build20240122
      imageID: sha256:1218a19dc8780e1c037fc33404827f2d90cc3e52c3588b83b1ca9870fa5c5b31
      lastState: {}
      name: cni-plugins
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://67600b2fff50bfe422e22bc7481febe07adf0a614a5602f7cd60ec23fae89226
          exitCode: 0
          finishedAt: "2024-08-06T02:13:14Z"
          reason: Completed
          startedAt: "2024-08-06T02:13:13Z"
    phase: Running
    podIP: 10.10.110.61
    podIPs:
    - ip: 10.10.110.61
    qosClass: Burstable
    startTime: "2024-08-06T02:13:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: fd23672d720fdddd8faf8f629c7eec5c444ad6484d2a654621fa7d4b5c65c4fc
    creationTimestamp: "2024-08-06T02:15:24Z"
    generateName: rke2-multus-
    labels:
      app: rke2-multus
      controller-revision-hash: 78f6bc8dc
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6b43d191-7d22-4e5c-8d21-15d6d2c19b70"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rke2-multus"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"cni-plugins"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"SKIP_CNI_BINARIES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:15:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.232"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:15:38Z"
    name: rke2-multus-4g2jg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-multus
      uid: 6b43d191-7d22-4e5c-8d21-15d6d2c19b70
    resourceVersion: "29783"
    uid: ab3aa876-0293-4e72-a2a6-ed34c4901042
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev7
    containers:
    - args:
      - --multus-conf-file=auto
      - --multus-kubeconfig-file-host=/etc/cni/net.d/multus.d/multus.kubeconfig
      command:
      - /thin_entrypoint
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: rancher/hardened-multus-cni:v4.0.2-build20240208
      imagePullPolicy: IfNotPresent
      name: kube-rke2-multus
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j6fts
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: SKIP_CNI_BINARIES
        value: flannel
      image: rancher/hardened-cni-plugins:v1.4.0-build20240122
      imagePullPolicy: IfNotPresent
      name: cni-plugins
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j6fts
        readOnly: true
    nodeName: harvesterdev7
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: multus
    serviceAccountName: multus
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - name: kube-api-access-j6fts
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:15:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://de66510f763e467ccc958b32c8ee40a24ccddbbc66c171801cee11555fca4e28
      image: docker.io/rancher/hardened-multus-cni:v4.0.2-build20240208
      imageID: sha256:d41d049a62ad0ffa1ee381f4e77307af24804d44217dde09fa2e1bce95de552b
      lastState: {}
      name: kube-rke2-multus
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:15:37Z"
    hostIP: 10.10.110.232
    initContainerStatuses:
    - containerID: containerd://3f00b379beb5b3e4178f0132cdb5c9c3aa09dc8cb2bee21bf0bc93d2e199a260
      image: docker.io/rancher/hardened-cni-plugins:v1.4.0-build20240122
      imageID: sha256:1218a19dc8780e1c037fc33404827f2d90cc3e52c3588b83b1ca9870fa5c5b31
      lastState: {}
      name: cni-plugins
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://3f00b379beb5b3e4178f0132cdb5c9c3aa09dc8cb2bee21bf0bc93d2e199a260
          exitCode: 0
          finishedAt: "2024-08-06T02:15:30Z"
          reason: Completed
          startedAt: "2024-08-06T02:15:30Z"
    phase: Running
    podIP: 10.10.110.232
    podIPs:
    - ip: 10.10.110.232
    qosClass: Burstable
    startTime: "2024-08-06T02:15:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: fd23672d720fdddd8faf8f629c7eec5c444ad6484d2a654621fa7d4b5c65c4fc
    creationTimestamp: "2024-08-06T01:51:48Z"
    generateName: rke2-multus-
    labels:
      app: rke2-multus
      controller-revision-hash: 78f6bc8dc
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6b43d191-7d22-4e5c-8d21-15d6d2c19b70"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rke2-multus"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"cni-plugins"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"SKIP_CNI_BINARIES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:51:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:52:06Z"
    name: rke2-multus-8wp2w
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-multus
      uid: 6b43d191-7d22-4e5c-8d21-15d6d2c19b70
    resourceVersion: "897"
    uid: 7a969210-5849-42a3-89f3-b71874cc1920
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev1
    containers:
    - args:
      - --multus-conf-file=auto
      - --multus-kubeconfig-file-host=/etc/cni/net.d/multus.d/multus.kubeconfig
      command:
      - /thin_entrypoint
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: rancher/hardened-multus-cni:v4.0.2-build20240208
      imagePullPolicy: IfNotPresent
      name: kube-rke2-multus
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-xsccr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: SKIP_CNI_BINARIES
        value: flannel
      image: rancher/hardened-cni-plugins:v1.4.0-build20240122
      imagePullPolicy: IfNotPresent
      name: cni-plugins
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-xsccr
        readOnly: true
    nodeName: harvesterdev1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: multus
    serviceAccountName: multus
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - name: kube-api-access-xsccr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:52:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:51:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c119f14b8bd2971f9059fcd786d251cecedcd83b4834fca903034bc26cea9119
      image: docker.io/rancher/hardened-multus-cni:v4.0.2-build20240208
      imageID: sha256:d41d049a62ad0ffa1ee381f4e77307af24804d44217dde09fa2e1bce95de552b
      lastState:
        terminated:
          containerID: containerd://1a1a3f25b6da49f1819df0a63782e4ec55b2c05a449e0e8ccfb142cd29aff758
          exitCode: 0
          finishedAt: "2024-08-06T01:51:51Z"
          reason: Completed
          startedAt: "2024-08-06T01:51:51Z"
      name: kube-rke2-multus
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:52:05Z"
    hostIP: 10.10.110.11
    initContainerStatuses:
    - containerID: containerd://a75c544013f510061a7f4908a5ae865ebe91578217b289d92744ceb2aeebbfb6
      image: docker.io/rancher/hardened-cni-plugins:v1.4.0-build20240122
      imageID: sha256:1218a19dc8780e1c037fc33404827f2d90cc3e52c3588b83b1ca9870fa5c5b31
      lastState: {}
      name: cni-plugins
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://a75c544013f510061a7f4908a5ae865ebe91578217b289d92744ceb2aeebbfb6
          exitCode: 0
          finishedAt: "2024-08-06T01:51:49Z"
          reason: Completed
          startedAt: "2024-08-06T01:51:49Z"
    phase: Running
    podIP: 10.10.110.11
    podIPs:
    - ip: 10.10.110.11
    qosClass: Burstable
    startTime: "2024-08-06T01:51:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: fd23672d720fdddd8faf8f629c7eec5c444ad6484d2a654621fa7d4b5c65c4fc
    creationTimestamp: "2024-08-06T02:11:20Z"
    generateName: rke2-multus-
    labels:
      app: rke2-multus
      controller-revision-hash: 78f6bc8dc
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6b43d191-7d22-4e5c-8d21-15d6d2c19b70"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kube-rke2-multus"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"cni-plugins"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"SKIP_CNI_BINARIES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cnibin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:11:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.10.110.71"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:25Z"
    name: rke2-multus-w5rcx
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: rke2-multus
      uid: 6b43d191-7d22-4e5c-8d21-15d6d2c19b70
    resourceVersion: "22920"
    uid: 505a81ca-a488-4988-8e1e-381d3f96a14e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - harvesterdev2
    containers:
    - args:
      - --multus-conf-file=auto
      - --multus-kubeconfig-file-host=/etc/cni/net.d/multus.d/multus.kubeconfig
      command:
      - /thin_entrypoint
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: rancher/hardened-multus-cni:v4.0.2-build20240208
      imagePullPolicy: IfNotPresent
      name: kube-rke2-multus
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 128Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mss2z
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: SKIP_CNI_BINARIES
        value: flannel
      image: rancher/hardened-cni-plugins:v1.4.0-build20240122
      imagePullPolicy: IfNotPresent
      name: cni-plugins
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cnibin
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mss2z
        readOnly: true
    nodeName: harvesterdev2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2.000001e+09
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: multus
    serviceAccountName: multus
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: "null"
      name: cni
    - hostPath:
        path: /opt/cni/bin
        type: "null"
      name: cnibin
    - name: kube-api-access-mss2z
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T02:11:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://861d1d25db85e8a0b6393bfb52a45a361945616cb53e3c77997996e48c64cb62
      image: docker.io/rancher/hardened-multus-cni:v4.0.2-build20240208
      imageID: sha256:d41d049a62ad0ffa1ee381f4e77307af24804d44217dde09fa2e1bce95de552b
      lastState: {}
      name: kube-rke2-multus
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T02:11:24Z"
    hostIP: 10.10.110.71
    initContainerStatuses:
    - containerID: containerd://f66cdac08b1328405eabf98f7585edfeb345325bf5ab4576dd43051cab0f9c42
      image: docker.io/rancher/hardened-cni-plugins:v1.4.0-build20240122
      imageID: sha256:1218a19dc8780e1c037fc33404827f2d90cc3e52c3588b83b1ca9870fa5c5b31
      lastState: {}
      name: cni-plugins
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://f66cdac08b1328405eabf98f7585edfeb345325bf5ab4576dd43051cab0f9c42
          exitCode: 0
          finishedAt: "2024-08-06T02:11:22Z"
          reason: Completed
          startedAt: "2024-08-06T02:11:22Z"
    phase: Running
    podIP: 10.10.110.71
    podIPs:
    - ip: 10.10.110.71
    qosClass: Burstable
    startTime: "2024-08-06T02:11:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 39b79123e8ec4261153840400b3888d45eecbd70fabac228d0c3a91439274e94
      cni.projectcalico.org/podIP: 10.52.0.37/32
      cni.projectcalico.org/podIPs: 10.52.0.37/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.37"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:55:39Z"
    generateName: snapshot-controller-65d5f465d9-
    labels:
      app: snapshot-controller
      pod-template-hash: 65d5f465d9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ae8329ed-6864-4786-8af7-fceea8483c09"}: {}
        f:spec:
          f:containers:
            k:{"name":"snapshot-controller"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.37"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:41Z"
    name: snapshot-controller-65d5f465d9-bbk25
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: snapshot-controller-65d5f465d9
      uid: ae8329ed-6864-4786-8af7-fceea8483c09
    resourceVersion: "4858"
    uid: fa473c03-9902-4d09-8774-329afe4ccade
  spec:
    containers:
    - args:
      - --v=5
      - --leader-election=true
      image: registry.k8s.io/sig-storage/snapshot-controller:v6.3.3
      imagePullPolicy: IfNotPresent
      name: snapshot-controller
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-xtdb6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: snapshot-controller
    serviceAccountName: snapshot-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-xtdb6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://48daecae848701cbeb42fc0555b617d2295f4eef385d10c991bcc7fbe928685c
      image: registry.k8s.io/sig-storage/snapshot-controller:v6.3.3
      imageID: sha256:4f642f162057e32bcb577eab93aef3a675b2cdd96ac2fb4457c3c860ef5dcb66
      lastState: {}
      name: snapshot-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:41Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.37
    podIPs:
    - ip: 10.52.0.37
    qosClass: BestEffort
    startTime: "2024-08-06T01:55:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: e5dc4d84fd5abb3e4f6bf4b13c9aec931e8f30d6f7df9c43e322de384dbcc90a
      cni.projectcalico.org/podIP: 10.52.0.42/32
      cni.projectcalico.org/podIPs: 10.52.0.42/32
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "k8s-pod-network",
            "ips": [
                "10.52.0.42"
            ],
            "default": true,
            "dns": {}
        }]
    creationTimestamp: "2024-08-06T01:55:39Z"
    generateName: snapshot-controller-65d5f465d9-
    labels:
      app: snapshot-controller
      pod-template-hash: 65d5f465d9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ae8329ed-6864-4786-8af7-fceea8483c09"}: {}
        f:spec:
          f:containers:
            k:{"name":"snapshot-controller"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.52.0.42"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:41Z"
    name: snapshot-controller-65d5f465d9-ssxbd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: snapshot-controller-65d5f465d9
      uid: ae8329ed-6864-4786-8af7-fceea8483c09
    resourceVersion: "4865"
    uid: 838499c0-4712-4a29-b6f6-4b9a1e02f38f
  spec:
    containers:
    - args:
      - --v=5
      - --leader-election=true
      image: registry.k8s.io/sig-storage/snapshot-controller:v6.3.3
      imagePullPolicy: IfNotPresent
      name: snapshot-controller
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-njz62
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: harvesterdev1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: snapshot-controller
    serviceAccountName: snapshot-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-njz62
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: "null"
      lastTransitionTime: "2024-08-06T01:55:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6b026cc0a552c1297d2a47158891ced5000bcb1a1674b3be3292ea454cd63559
      image: registry.k8s.io/sig-storage/snapshot-controller:v6.3.3
      imageID: sha256:4f642f162057e32bcb577eab93aef3a675b2cdd96ac2fb4457c3c860ef5dcb66
      lastState: {}
      name: snapshot-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-06T01:55:41Z"
    hostIP: 10.10.110.11
    phase: Running
    podIP: 10.52.0.42
    podIPs:
    - ip: 10.52.0.42
    qosClass: BestEffort
    startTime: "2024-08-06T01:55:39Z"
kind: List
metadata:
  resourceVersion: "770187"
