apiVersion: v1
items:
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "5"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      management.cattle.io/scale-available: "3"
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 3
    labels:
      app.kubernetes.io/component: apiserver
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harvester
      app.kubernetes.io/part-of: harvester
      app.kubernetes.io/version: v1.3.1
      helm.sh/chart: harvester-1.3.1
      helm.sh/release: harvester
      pod-template-hash: 96fcbb748
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:management.cattle.io/scale-available: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:helm.sh/release: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"17e39bbc-4edf-48b0-b892-ea9b31f0eef3"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:container.apparmor.security.beta.kubernetes.io/apiserver: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:helm.sh/release: {}
                f:pod-template-hash: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
                f:podAntiAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"apiserver"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"HARVESTER_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HARVESTER_SERVER_HTTP_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HARVESTER_SERVER_HTTPS_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HCI_MODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"RANCHER_EMBEDDED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":6060,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T02:14:19Z"
    name: harvester-96fcbb748
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester
      uid: 17e39bbc-4edf-48b0-b892-ea9b31f0eef3
    resourceVersion: "27928"
    uid: f1e8a9fb-b225-43f9-90f3-6278e60c7c45
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: apiserver
        app.kubernetes.io/name: harvester
        app.kubernetes.io/part-of: harvester
        helm.sh/release: harvester
        pod-template-hash: 96fcbb748
    template:
      metadata:
        annotations:
          container.apparmor.security.beta.kubernetes.io/apiserver: unconfined
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/component: apiserver
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: harvester
          app.kubernetes.io/part-of: harvester
          app.kubernetes.io/version: v1.3.1
          helm.sh/chart: harvester-1.3.1
          helm.sh/release: harvester
          pod-template-hash: 96fcbb748
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - harvester
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - apiserver
                - key: app.kubernetes.io/version
                  operator: In
                  values:
                  - v1.3.1
              topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: HARVESTER_SERVER_HTTPS_PORT
            value: "8443"
          - name: HARVESTER_DEBUG
            value: "false"
          - name: HARVESTER_SERVER_HTTP_PORT
            value: "0"
          - name: HCI_MODE
            value: "true"
          - name: RANCHER_EMBEDDED
            value: "true"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: rancher/harvester:v1.3.1
          imagePullPolicy: IfNotPresent
          name: apiserver
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          - containerPort: 6060
            name: profile
            protocol: TCP
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester
        serviceAccountName: harvester
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: harvester-load-balancer
      pod-template-hash: 54cd9754dc
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e47f5bc8-d2bf-4079-ad09-bde5bb30370b"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"harvester-load-balancer"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:42Z"
    name: harvester-load-balancer-54cd9754dc
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-load-balancer
      uid: e47f5bc8-d2bf-4079-ad09-bde5bb30370b
    resourceVersion: "4916"
    uid: c4795838-0249-42a3-9c33-34046d41d949
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: harvester
        app.kubernetes.io/name: harvester-load-balancer
        pod-template-hash: 54cd9754dc
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/instance: harvester
          app.kubernetes.io/name: harvester-load-balancer
          pod-template-hash: 54cd9754dc
      spec:
        containers:
        - command:
          - harvester-load-balancer
          image: rancher/harvester-load-balancer:v0.3.0
          imagePullPolicy: IfNotPresent
          name: harvester-load-balancer
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester-load-balancer
        serviceAccountName: harvester-load-balancer
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: harvester-load-balancer-webhook
      pod-template-hash: c8699b786
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"51990f42-2a8b-42d0-946c-a833451e3fde"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"harvester-load-balancer-webhook"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"HARVESTER_CONTROLLER_USER_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HARVESTER_WEBHOOK_SERVER_HTTPS_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:42Z"
    name: harvester-load-balancer-webhook-c8699b786
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-load-balancer-webhook
      uid: 51990f42-2a8b-42d0-946c-a833451e3fde
    resourceVersion: "4913"
    uid: 22750d76-f079-4260-b7b1-a64fae574a11
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: harvester
        app.kubernetes.io/name: harvester-load-balancer-webhook
        pod-template-hash: c8699b786
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/instance: harvester
          app.kubernetes.io/name: harvester-load-balancer-webhook
          pod-template-hash: c8699b786
      spec:
        containers:
        - command:
          - harvester-load-balancer-webhook
          env:
          - name: HARVESTER_WEBHOOK_SERVER_HTTPS_PORT
            value: "8443"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: HARVESTER_CONTROLLER_USER_NAME
            value: system:serviceaccount:harvester-system:harvester-load-balancer-webhook
          image: rancher/harvester-load-balancer-webhook:v0.3.0
          imagePullPolicy: IfNotPresent
          name: harvester-load-balancer-webhook
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester-load-balancer-webhook
        serviceAccountName: harvester-load-balancer-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      management.cattle.io/scale-available: "2"
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: harvester-network-controller-manager
      pod-template-hash: b69bf6b69
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:management.cattle.io/scale-available: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"624879a5-23fe-447b-b45f-207e84e590bc"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
                f:podAntiAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"harvester-network-manager"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:11:20Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T02:11:27Z"
    name: harvester-network-controller-manager-b69bf6b69
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-network-controller-manager
      uid: 624879a5-23fe-447b-b45f-207e84e590bc
    resourceVersion: "23020"
    uid: c4d98230-1054-40f9-b162-597cc217f733
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/instance: harvester
        app.kubernetes.io/name: harvester-network-controller-manager
        pod-template-hash: b69bf6b69
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/instance: harvester
          app.kubernetes.io/name: harvester-network-controller-manager
          pod-template-hash: b69bf6b69
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - harvester-network-controller-manager
              topologyKey: kubernetes.io/hostname
        containers:
        - args:
          - manager
          - --enable-vip-controller
          - --helper-image=rancher/harvester-network-helper:v0.4.0
          command:
          - harvester-network-controller
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: rancher/harvester-network-controller:v0.4.0
          imagePullPolicy: IfNotPresent
          name: harvester-network-manager
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            capabilities:
              add:
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester-network-controller
        serviceAccountName: harvester-network-controller
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      management.cattle.io/scale-available: "1"
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: harvester
      app.kubernetes.io/name: harvester-network-webhook
      pod-template-hash: 7b98f8cd98
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:management.cattle.io/scale-available: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e00f3caa-d955-4fe3-81b1-c2e2882a810b"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"harvester-network-webhook"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:42Z"
    name: harvester-network-webhook-7b98f8cd98
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-network-webhook
      uid: e00f3caa-d955-4fe3-81b1-c2e2882a810b
    resourceVersion: "4929"
    uid: a586f9c6-eb23-485b-a593-8df798729f95
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: harvester
        app.kubernetes.io/name: harvester-network-webhook
        pod-template-hash: 7b98f8cd98
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/instance: harvester
          app.kubernetes.io/name: harvester-network-webhook
          pod-template-hash: 7b98f8cd98
      spec:
        containers:
        - command:
          - harvester-network-webhook
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: rancher/harvester-network-webhook:v0.4.0
          imagePullPolicy: IfNotPresent
          name: harvester-network-webhook
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 10m
              memory: 64Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester-network-webhook
        serviceAccountName: harvester-network-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      management.cattle.io/scale-available: "3"
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 3
    labels:
      app.kubernetes.io/name: harvester-node-manager-webhook
      pod-template-hash: 9cfccc84c
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:management.cattle.io/scale-available: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6c7c8995-0f41-4f5a-8518-1dd973ad71cb"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"harvester-node-manager-webhook"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"WEBHOOK_SERVER_HTTPS_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:13Z"
    name: harvester-node-manager-webhook-9cfccc84c
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-node-manager-webhook
      uid: 6c7c8995-0f41-4f5a-8518-1dd973ad71cb
    resourceVersion: "25861"
    uid: 88994f66-64d2-4f02-b271-928ab9b426d1
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/name: harvester-node-manager-webhook
        pod-template-hash: 9cfccc84c
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/name: harvester-node-manager-webhook
          pod-template-hash: 9cfccc84c
      spec:
        containers:
        - env:
          - name: WEBHOOK_SERVER_HTTPS_PORT
            value: "8443"
          - name: NAMESPACE
            value: harvester-system
          image: rancher/harvester-node-manager-webhook:v0.2.1
          imagePullPolicy: IfNotPresent
          name: harvester-node-manager-webhook
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester-node-manager-webhook
        serviceAccountName: harvester-node-manager-webhook
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoExecute
          operator: Exists
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: harvester-seeder
      meta.helm.sh/release-namespace: harvester-system
    creationTimestamp: "2024-08-06T01:56:42Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: harvester-seeder
      app.kubernetes.io/name: harvester-seeder
      pod-template-hash: 846c6ff8b4
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"39671c46-f8f1-422a-848d-9cb90fdf78ec"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
                f:podAntiAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"harvester-seeder"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LEADER_ELECTION_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"SEEDER_EMBEDDED_MODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8081,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:56:42Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T01:56:45Z"
    name: harvester-seeder-846c6ff8b4
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-seeder
      uid: 39671c46-f8f1-422a-848d-9cb90fdf78ec
    resourceVersion: "7140"
    uid: 21b2f0e6-bf22-49e5-8585-209ee4e4c244
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: harvester-seeder
        app.kubernetes.io/name: harvester-seeder
        pod-template-hash: 846c6ff8b4
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/instance: harvester-seeder
          app.kubernetes.io/name: harvester-seeder
          pod-template-hash: 846c6ff8b4
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - seeder
              topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: SEEDER_EMBEDDED_MODE
            value: "true"
          - name: LEADER_ELECTION_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: rancher/harvester-seeder:v0.3.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: harvester-seeder
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8081
            name: probe
            protocol: TCP
          - containerPort: 9443
            name: leader
            protocol: TCP
          - containerPort: 443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 250m
              memory: 250Mi
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester-seeder
        serviceAccountName: harvester-seeder
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      management.cattle.io/scale-available: "3"
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 3
    labels:
      app.kubernetes.io/component: webhook-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: harvester
      app.kubernetes.io/part-of: harvester
      app.kubernetes.io/version: v1.3.1
      helm.sh/chart: harvester-1.3.1
      helm.sh/release: harvester
      pod-template-hash: bf9659678
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:management.cattle.io/scale-available: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:helm.sh/release: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"042305b6-32e4-4d61-8802-2c1e5170bbe6"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:container.apparmor.security.beta.kubernetes.io/harvester-webhook: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:helm.sh/release: {}
                f:pod-template-hash: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
                f:podAntiAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"harvester-webhook"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"HARVESTER_CONTROLLER_USER_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HARVESTER_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HARVESTER_WEBHOOK_SERVER_HTTPS_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:13:11Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T02:13:31Z"
    name: harvester-webhook-bf9659678
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: harvester-webhook
      uid: 042305b6-32e4-4d61-8802-2c1e5170bbe6
    resourceVersion: "26602"
    uid: 1be0858d-181e-49aa-9f72-b9dc6063f0c7
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook-server
        app.kubernetes.io/name: harvester
        app.kubernetes.io/part-of: harvester
        helm.sh/release: harvester
        pod-template-hash: bf9659678
    template:
      metadata:
        annotations:
          container.apparmor.security.beta.kubernetes.io/harvester-webhook: unconfined
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/component: webhook-server
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: harvester
          app.kubernetes.io/part-of: harvester
          app.kubernetes.io/version: v1.3.1
          helm.sh/chart: harvester-1.3.1
          helm.sh/release: harvester
          pod-template-hash: bf9659678
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - harvester
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - webhook-server
                - key: app.kubernetes.io/version
                  operator: In
                  values:
                  - v1.3.1
              topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: HARVESTER_WEBHOOK_SERVER_HTTPS_PORT
            value: "9443"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: HARVESTER_DEBUG
            value: "false"
          - name: HARVESTER_CONTROLLER_USER_NAME
            value: system:serviceaccount:harvester-system:harvester
          image: rancher/harvester-webhook:v1.3.1
          imagePullPolicy: IfNotPresent
          name: harvester-webhook
          ports:
          - containerPort: 9443
            name: https
            protocol: TCP
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester
        serviceAccountName: harvester
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-06T14:12:10Z"
    generation: 1
    labels:
      app: support-bundle-manager
      pod-template-hash: 77457f48f7
      rancher/supportbundle: bundle-vuocj
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:rancher/supportbundle: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4e5ebae5-8043-4b33-a0af-6b5122b1a2ae"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:rancher/supportbundle: {}
            f:spec:
              f:containers:
                k:{"name":"manager"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"SUPPORT_BUNDLE_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_DESCRIPTION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_EXCLUDE_RESOURCES"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_EXTRA_COLLECTORS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_IMAGE_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_ISSUE_URL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SUPPORT_BUNDLE_MANAGER_POD_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"SUPPORT_BUNDLE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_NODE_SELECTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_NODE_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_TAINT_TOLERATION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUPPORT_BUNDLE_TARGET_NAMESPACES"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T14:12:10Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T14:12:12Z"
    name: supportbundle-manager-bundle-vuocj-77457f48f7
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: supportbundle-manager-bundle-vuocj
      uid: 4e5ebae5-8043-4b33-a0af-6b5122b1a2ae
    resourceVersion: "770149"
    uid: 6fb749a2-70f5-41a8-abba-9bdcece60efe
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: support-bundle-manager
        pod-template-hash: 77457f48f7
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app: support-bundle-manager
          pod-template-hash: 77457f48f7
          rancher/supportbundle: bundle-vuocj
      spec:
        containers:
        - args:
          - /usr/bin/support-bundle-kit
          - manager
          env:
          - name: SUPPORT_BUNDLE_TARGET_NAMESPACES
            value: cattle-dashboards,cattle-fleet-local-system,cattle-fleet-system,cattle-fleet-clusters-system,cattle-monitoring-system,fleet-local,harvester-system,local,longhorn-system,cattle-logging-system
          - name: SUPPORT_BUNDLE_NAME
            value: bundle-vuocj
          - name: SUPPORT_BUNDLE_DESCRIPTION
            value: the gpu vm does not start
          - name: SUPPORT_BUNDLE_ISSUE_URL
          - name: SUPPORT_BUNDLE_DEBUG
            value: "true"
          - name: SUPPORT_BUNDLE_MANAGER_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: SUPPORT_BUNDLE_IMAGE
            value: rancher/support-bundle-kit:v0.0.38
          - name: SUPPORT_BUNDLE_IMAGE_PULL_POLICY
            value: IfNotPresent
          - name: SUPPORT_BUNDLE_NODE_SELECTOR
            value: harvesterhci.io/managed=true
          - name: SUPPORT_BUNDLE_EXCLUDE_RESOURCES
            value: settings.harvesterhci.io,authconfigs.management.cattle.io,authtokens.management.cattle.io,samltokens.management.cattle.io,tokens.management.cattle.io,users.management.cattle.io
          - name: SUPPORT_BUNDLE_EXTRA_COLLECTORS
            value: harvester
          - name: SUPPORT_BUNDLE_TAINT_TOLERATION
            value: ':'
          - name: SUPPORT_BUNDLE_NODE_TIMEOUT
            value: 30m0s
          image: rancher/support-bundle-kit:v0.0.38
          imagePullPolicy: IfNotPresent
          name: manager
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: harvester
        serviceAccountName: harvester
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      kubevirt.io/customizer-identifier: ed6c75fc7ef60740d09f9802c39ceb8c790d407e
      kubevirt.io/generation: "3"
      kubevirt.io/install-strategy-identifier: 8c5c8323ebf23c689ce9bc87a13132d3fae18c7a
      kubevirt.io/install-strategy-registry: registry.suse.com/suse/sles/15.5
      kubevirt.io/install-strategy-version: 1.1.1-150500.8.15.1
    creationTimestamp: "2024-08-06T01:56:18Z"
    generation: 2
    labels:
      app.kubernetes.io/component: kubevirt
      app.kubernetes.io/managed-by: virt-operator
      app.kubernetes.io/version: 1.1.1-150500.8.15.1
      kubevirt.io: virt-api
      pod-template-hash: 788c88fb89
      prometheus.kubevirt.io: "true"
    name: virt-api-788c88fb89
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: virt-api
      uid: 951d5ffe-ce9d-4903-b3c3-b3c34db4d6b5
    resourceVersion: "36107"
    uid: ce32987b-e000-4d02-982d-25535cf1fb97
  spec:
    replicas: 2
    selector:
      matchLabels:
        kubevirt.io: virt-api
        pod-template-hash: 788c88fb89
    template:
      metadata:
        annotations:
          kubevirt.io/install-strategy-identifier: 8c5c8323ebf23c689ce9bc87a13132d3fae18c7a
          kubevirt.io/install-strategy-registry: registry.suse.com/suse/sles/15.5
          kubevirt.io/install-strategy-version: 1.1.1-150500.8.15.1
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/component: kubevirt
          app.kubernetes.io/managed-by: virt-operator
          app.kubernetes.io/version: 1.1.1-150500.8.15.1
          kubevirt.io: virt-api
          pod-template-hash: 788c88fb89
          prometheus.kubevirt.io: "true"
        name: virt-api
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: kubevirt.io
                    operator: In
                    values:
                    - virt-api
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - --port
          - "8443"
          - --console-server-port
          - "8186"
          - --subresources-only
          - -v
          - "2"
          command:
          - virt-api
          image: registry.suse.com/suse/sles/15.5/virt-api:1.1.1-150500.8.15.1
          imagePullPolicy: IfNotPresent
          name: virt-api
          ports:
          - containerPort: 8443
            name: virt-api
            protocol: TCP
          - containerPort: 8443
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /apis/subresources.kubevirt.io/v1/healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 400m
              memory: 1100Mi
            requests:
              cpu: 5m
              memory: 500Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/virt-api/certificates
            name: kubevirt-virt-api-certs
            readOnly: true
          - mountPath: /etc/virt-handler/clientcertificates
            name: kubevirt-virt-handler-certs
            readOnly: true
          - mountPath: /profile-data
            name: profile-data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: kubevirt-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubevirt-apiserver
        serviceAccountName: kubevirt-apiserver
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: kubevirt-virt-api-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: kubevirt-virt-api-certs
        - name: kubevirt-virt-handler-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: kubevirt-virt-handler-certs
        - emptyDir: {}
          name: profile-data
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      kubevirt.io/customizer-identifier: ed6c75fc7ef60740d09f9802c39ceb8c790d407e
      kubevirt.io/generation: "3"
      kubevirt.io/install-strategy-identifier: 8c5c8323ebf23c689ce9bc87a13132d3fae18c7a
      kubevirt.io/install-strategy-registry: registry.suse.com/suse/sles/15.5
      kubevirt.io/install-strategy-version: 1.1.1-150500.8.15.1
    creationTimestamp: "2024-08-06T01:56:43Z"
    generation: 1
    labels:
      app.kubernetes.io/component: kubevirt
      app.kubernetes.io/managed-by: virt-operator
      app.kubernetes.io/version: 1.1.1-150500.8.15.1
      kubevirt.io: virt-controller
      pod-template-hash: 656bc79754
      prometheus.kubevirt.io: "true"
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T01:57:03Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:kubevirt.io/customizer-identifier: {}
            f:kubevirt.io/generation: {}
            f:kubevirt.io/install-strategy-identifier: {}
            f:kubevirt.io/install-strategy-registry: {}
            f:kubevirt.io/install-strategy-version: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/version: {}
            f:kubevirt.io: {}
            f:pod-template-hash: {}
            f:prometheus.kubevirt.io: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a1618532-fde5-406d-a7d6-be71daeb8ebf"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kubevirt.io/install-strategy-identifier: {}
                f:kubevirt.io/install-strategy-registry: {}
                f:kubevirt.io/install-strategy-version: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/version: {}
                f:kubevirt.io: {}
                f:pod-template-hash: {}
                f:prometheus.kubevirt.io: {}
              f:name: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"virt-controller"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:seccompProfile:
                      .: {}
                      f:type: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/virt-controller/certificates"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/virt-controller/exportca"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/profile-data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubevirt-controller-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"kubevirt-export-ca"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"profile-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T02:21:30Z"
    name: virt-controller-656bc79754
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: virt-controller
      uid: a1618532-fde5-406d-a7d6-be71daeb8ebf
    resourceVersion: "36113"
    uid: 8f8ad8a0-cb1d-4a7c-a555-2332e6a59867
  spec:
    replicas: 2
    selector:
      matchLabels:
        kubevirt.io: virt-controller
        pod-template-hash: 656bc79754
    template:
      metadata:
        annotations:
          kubevirt.io/install-strategy-identifier: 8c5c8323ebf23c689ce9bc87a13132d3fae18c7a
          kubevirt.io/install-strategy-registry: registry.suse.com/suse/sles/15.5
          kubevirt.io/install-strategy-version: 1.1.1-150500.8.15.1
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/component: kubevirt
          app.kubernetes.io/managed-by: virt-operator
          app.kubernetes.io/version: 1.1.1-150500.8.15.1
          kubevirt.io: virt-controller
          pod-template-hash: 656bc79754
          prometheus.kubevirt.io: "true"
        name: virt-controller
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: kubevirt.io
                    operator: In
                    values:
                    - virt-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - --launcher-image
          - registry.suse.com/suse/sles/15.5/virt-launcher:1.1.1-150500.8.15.1
          - --exporter-image
          - registry.suse.com/suse/sles/15.5/virt-exportserver:1.1.1-150500.8.15.1
          - --port
          - "8443"
          - -v
          - "2"
          command:
          - virt-controller
          image: registry.suse.com/suse/sles/15.5/virt-controller:1.1.1-150500.8.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: virt-controller
          ports:
          - containerPort: 8443
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /leader
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 800m
              memory: 1300Mi
            requests:
              cpu: 10m
              memory: 275Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/virt-controller/certificates
            name: kubevirt-controller-certs
            readOnly: true
          - mountPath: /etc/virt-controller/exportca
            name: kubevirt-export-ca
            readOnly: true
          - mountPath: /profile-data
            name: profile-data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: kubevirt-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubevirt-controller
        serviceAccountName: kubevirt-controller
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: kubevirt-controller-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: kubevirt-controller-certs
        - name: kubevirt-export-ca
          secret:
            defaultMode: 420
            optional: true
            secretName: kubevirt-export-ca
        - emptyDir: {}
          name: profile-data
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: harvester
      meta.helm.sh/release-namespace: harvester-system
      objectset.rio.cattle.io/id: default-mcc-harvester-cattle-fleet-local-system
    creationTimestamp: "2024-08-06T01:55:39Z"
    generation: 1
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: virt-operator
      app.kubernetes.io/part-of: kubevirt-operator
      app.kubernetes.io/version: 0.30.x
      helm.sh/chart: kubevirt-operator-0.2.0
      helm.sh/release: harvester
      kubevirt.io: virt-operator
      pod-template-hash: 74c7f9696d
      prometheus.kubevirt.io: "true"
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:helm.sh/resource-policy: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:helm.sh/release: {}
            f:kubevirt.io: {}
            f:pod-template-hash: {}
            f:prometheus.kubevirt.io: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"951f2d0a-03f1-4669-86a0-05d1ffe2e5d8"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:helm.sh/release: {}
                f:kubevirt.io: {}
                f:pod-template-hash: {}
                f:prometheus.kubevirt.io: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"virt-operator"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"OPERATOR_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8444,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/virt-operator/certificates"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/profile-data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"kubevirt-operator-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"profile-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-08-06T01:55:39Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2024-08-06T01:55:54Z"
    name: virt-operator-74c7f9696d
    namespace: harvester-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: virt-operator
      uid: 951f2d0a-03f1-4669-86a0-05d1ffe2e5d8
    resourceVersion: "5554"
    uid: 32d9bf81-4f2b-4db1-8cbb-ab90e239ebf8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: operator
        app.kubernetes.io/name: virt-operator
        app.kubernetes.io/part-of: kubevirt-operator
        helm.sh/release: harvester
        kubevirt.io: virt-operator
        pod-template-hash: 74c7f9696d
    template:
      metadata:
        creationTimestamp: "null"
        labels:
          app.kubernetes.io/component: operator
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: virt-operator
          app.kubernetes.io/part-of: kubevirt-operator
          app.kubernetes.io/version: 0.30.x
          helm.sh/chart: kubevirt-operator-0.2.0
          helm.sh/release: harvester
          kubevirt.io: virt-operator
          pod-template-hash: 74c7f9696d
          prometheus.kubevirt.io: "true"
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: kubevirt.io
                    operator: In
                    values:
                    - virt-operator
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - command:
          - virt-operator
          - --port
          - "8443"
          - -v
          - "2"
          env:
          - name: OPERATOR_IMAGE
            value: registry.suse.com/suse/sles/15.5/virt-operator:1.1.1-150500.8.15.1
          image: registry.suse.com/suse/sles/15.5/virt-operator:1.1.1-150500.8.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: virt-operator
          ports:
          - containerPort: 8443
            name: metrics
            protocol: TCP
          - containerPort: 8444
            name: webhooks
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/virt-operator/certificates
            name: kubevirt-operator-certs
            readOnly: true
          - mountPath: /profile-data
            name: profile-data
        dnsPolicy: ClusterFirst
        priorityClassName: kubevirt-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: kubevirt-operator
        serviceAccountName: kubevirt-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - name: kubevirt-operator-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: kubevirt-operator-certs
        - emptyDir: {}
          name: profile-data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata:
  resourceVersion: "770255"
